(window.webpackJsonp=window.webpackJsonp||[]).push([[110],{446:function(a,t,e){"use strict";e.r(t);var s=e(4),r=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("ul",[t("li",[a._v("构建流程")]),a._v(" "),t("li",[a._v("常见 loader")]),a._v(" "),t("li",[a._v("常见 plugin")]),a._v(" "),t("li",[a._v("Loader 和 Plugin 的区别")]),a._v(" "),t("li",[a._v("提高效率的插件")]),a._v(" "),t("li",[a._v("source map")]),a._v(" "),t("li",[a._v("模块打包原理")]),a._v(" "),t("li",[a._v("文件监听原理")]),a._v(" "),t("li",[a._v("热更新原理")]),a._v(" "),t("li",[a._v("如何对 bundle 体积进行监控和分析")]),a._v(" "),t("li",[a._v("文件指纹")]),a._v(" "),t("li",[a._v("如何保证各个 loader 按照预想方式工作")]),a._v(" "),t("li",[a._v("如何优化 Webpack 的构建速度")]),a._v(" "),t("li",[a._v("代码分割本质")]),a._v(" "),t("li",[a._v("手写 loader")]),a._v(" "),t("li",[a._v("手写 plugin")]),a._v(" "),t("li",[a._v("Babel")])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gcore.jsdelivr.net/gh/wu529778790/image/blog/20211130151017.png",alt:"20211130151017"}})]),a._v(" "),t("h2",{attrs:{id:"webpack-构建流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack-构建流程"}},[a._v("#")]),a._v(" webpack 构建流程")]),a._v(" "),t("p",[a._v("Webpack 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：")]),a._v(" "),t("ul",[t("li",[t("p",[t("code",[a._v("初始化参数")]),a._v("：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("开始编译")]),a._v("：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("确定入口")]),a._v("：根据配置中的 entry 找出所有的入口文件")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("编译模块")]),a._v("：从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("完成模块编译")]),a._v("：在经过第 4 步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("输出资源")]),a._v("：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("输出完成")]),a._v("：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统")])])]),a._v(" "),t("p",[a._v("在以上过程中，"),t("code",[a._v("Webpack")]),a._v(" 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。")]),a._v(" "),t("p",[a._v("简单说")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("初始化：启动构建，读取与合并配置参数，加载 Plugin，实例化 Compiler")])]),a._v(" "),t("li",[t("p",[a._v("编译：从 Entry 出发，针对每个 Module 串行调用对应的 Loader 去翻译文件的内容，再找到该 Module 依赖的 Module，递归地进行编译处理")])]),a._v(" "),t("li",[t("p",[a._v("输出：将编译后的 Module 组合成 Chunk，将 Chunk 转换成文件，输出到文件系统中")])])]),a._v(" "),t("h2",{attrs:{id:"常见-loader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见-loader"}},[a._v("#")]),a._v(" 常见 Loader")]),a._v(" "),t("ul",[t("li",[t("p",[t("code",[a._v("raw-loader")]),a._v("：加载文件原始内容（utf-8）")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("file-loader")]),a._v("：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件 (处理图片和字体)")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("url-loader")]),a._v("：与 file-loader 类似，区别是用户可以设置一个阈值，大于阈值会交给 file-loader 处理，小于阈值时返回文件 base64 形式编码 (处理图片和字体)")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("source-map-loader")]),a._v("：加载额外的 Source Map 文件，以方便断点调试")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("svg-inline-loader")]),a._v("：将压缩后的 SVG 内容注入代码中")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("image-loader")]),a._v("：加载并且压缩图片文件")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("json-loader")]),a._v(" 加载 JSON 文件（默认包含）")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("handlebars-loader")]),a._v(": 将 Handlebars 模版编译成函数并返回")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("babel-loader")]),a._v("：把 ES6 转换成 ES5")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("ts-loader")]),a._v(": 将 TypeScript 转换成 JavaScript")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("awesome-typescript-loader")]),a._v("：将 TypeScript 转换成 JavaScript，性能优于 ts-loader")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("sass-loader")]),a._v("：将 SCSS/SASS 代码转换成 CSS")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("css-loader")]),a._v("：加载 CSS，支持模块化、压缩、文件导入等特性")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("style-loader")]),a._v("：把 CSS 代码注入到 JavaScript 中，通过 DOM 操作去加载 CSS")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("postcss-loader")]),a._v("：扩展 CSS 语法，使用下一代 CSS，可以配合 autoprefixer 插件自动补齐 CSS3 前缀")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("eslint-loader")]),a._v("：通过 ESLint 检查 JavaScript 代码")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("tslint-loader")]),a._v("：通过 TSLint 检查 TypeScript 代码")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("mocha-loader")]),a._v("：加载 Mocha 测试用例的代码")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("coverjs-loader")]),a._v("：计算测试的覆盖率")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("vue-loader")]),a._v("：加载 Vue.js 单文件组件")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("i18n-loader")]),a._v(": 国际化")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("cache-loader")]),a._v(": 可以在一些性能开销较大的 Loader 之前添加，目的是将结果缓存到磁盘里")])])]),a._v(" "),t("p",[a._v("更多 Loader 请参考"),t("a",{attrs:{href:"https://webpack.docschina.org/loaders/",target:"_blank",rel:"noopener noreferrer"}},[a._v("官网"),t("OutboundLink")],1)]),a._v(" "),t("h2",{attrs:{id:"常见-plugin"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见-plugin"}},[a._v("#")]),a._v(" 常见 Plugin")]),a._v(" "),t("ul",[t("li",[t("p",[t("code",[a._v("define-plugin")]),a._v("：定义环境变量 (Webpack4 之后指定 mode 会自动配置)")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("ignore-plugin")]),a._v("：忽略部分文件")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("html-webpack-plugin")]),a._v("：简化 HTML 文件创建 (依赖于 html-loader)")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("web-webpack-plugin")]),a._v("：可方便地为单页应用输出 HTML，比 html-webpack-plugin 好用")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("uglifyjs-webpack-plugin")]),a._v("：不支持 ES6 压缩 (Webpack4 以前)")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("terser-webpack-plugin")]),a._v(": 支持压缩 ES6 (Webpack4)")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("webpack-parallel-uglify-plugin")]),a._v(": 多进程执行代码压缩，提升构建速度")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("mini-css-extract-plugin")]),a._v(": 分离样式文件，CSS 提取为独立文件，支持按需加载 (替代 extract-text-webpack-plugin)")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("serviceworker-webpack-plugin")]),a._v("：为网页应用增加离线缓存功能")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("clean-webpack-plugin")]),a._v(": 目录清理")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("ModuleConcatenationPlugin")]),a._v(": 开启 Scope Hoisting")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("speed-measure-webpack-plugin")]),a._v(": 可以看到每个 Loader 和 Plugin 执行耗时 (整个打包耗时、每个 Plugin 和 Loader 耗时)")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("webpack-bundle-analyzer")]),a._v(": 可视化 Webpack 输出文件的体积 (业务组件、依赖第三方模块)")])])]),a._v(" "),t("p",[a._v("更多 Plugin 请参考"),t("a",{attrs:{href:"https://webpack.docschina.org/plugins/",target:"_blank",rel:"noopener noreferrer"}},[a._v("官网"),t("OutboundLink")],1)]),a._v(" "),t("h2",{attrs:{id:"loader-和-plugin-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#loader-和-plugin-的区别"}},[a._v("#")]),a._v(" Loader 和 Plugin 的区别")]),a._v(" "),t("p",[t("code",[a._v("Loader")]),a._v(" 本质就是一个函数，在该函数中对接收到的内容进行转换，返回转换后的结果。 因为 Webpack 只认识 JavaScript，所以 Loader 就成了翻译官，对其他类型的资源进行转译的预处理工作。")]),a._v(" "),t("p",[t("code",[a._v("Plugin")]),a._v(" 就是插件，基于事件流框架 "),t("code",[a._v("Tapable")]),a._v("，插件可以扩展 Webpack 的功能，在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。")]),a._v(" "),t("p",[t("code",[a._v("Loader")]),a._v(" 在 module.rules 中配置，作为模块的解析规则，类型为数组。每一项都是一个 Object，内部包含了 test(类型文件)、loader、options (参数)等属性。")]),a._v(" "),t("p",[t("code",[a._v("Plugin")]),a._v(" 在 plugins 中单独配置，类型为数组，每一项是一个 Plugin 的实例，参数都通过构造函数传入。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gcore.jsdelivr.net/gh/wu529778790/image/blog/20210609163450.png",alt:"20210609163450"}})]),a._v(" "),t("h2",{attrs:{id:"提高效率的插件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#提高效率的插件"}},[a._v("#")]),a._v(" 提高效率的插件")]),a._v(" "),t("ul",[t("li",[t("p",[t("code",[a._v("webpack-dashboard")]),a._v("：可以更友好的展示相关打包信息。")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("webpack-merge")]),a._v("：提取公共配置，减少重复配置代码")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("speed-measure-webpack-plugin")]),a._v("：简称 SMP，分析出 Webpack 打包过程中 Loader 和 Plugin 的耗时，有助于找到构建过程中的性能瓶颈。")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("size-plugin")]),a._v("：监控资源体积变化，尽早发现问题")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("HotModuleReplacementPlugin")]),a._v("：模块热替换")])])]),a._v(" "),t("h2",{attrs:{id:"source-map-是什么-生产环境怎么用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#source-map-是什么-生产环境怎么用"}},[a._v("#")]),a._v(" source map 是什么？生产环境怎么用？")]),a._v(" "),t("p",[t("code",[a._v("source map")]),a._v(" 是将编译、打包、压缩后的代码映射回源代码的过程。打包压缩后的代码不具备良好的可读性，想要调试源码就需要 soucre map。")]),a._v(" "),t("p",[a._v("map 文件只要不打开开发者工具，浏览器是不会加载的。")]),a._v(" "),t("p",[a._v("线上环境一般有三种处理方案：")]),a._v(" "),t("ul",[t("li",[t("p",[t("code",[a._v("hidden-source-map")]),a._v("：借助第三方错误监控平台 Sentry 使用")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("nosources-source-map")]),a._v("：只会显示具体行数以及查看源代码的错误栈。安全性比 sourcemap 高")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("sourcemap")]),a._v("：通过 nginx 设置将 .map 文件只对白名单开放(公司内网)")])])]),a._v(" "),t("p",[a._v("注意：避免在生产中使用 "),t("code",[a._v("inline-")]),a._v(" 和 "),t("code",[a._v("eval-")]),a._v("，因为它们会增加 bundle 体积大小，并降低整体性能。")]),a._v(" "),t("h2",{attrs:{id:"模块打包原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模块打包原理"}},[a._v("#")]),a._v(" 模块打包原理")]),a._v(" "),t("p",[a._v("Webpack 实际上为每个模块创造了一个可以导出和导入的环境，本质上并没有修改 代码的执行逻辑，代码执行顺序与模块加载顺序也完全一致。")]),a._v(" "),t("h2",{attrs:{id:"文件监听原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#文件监听原理"}},[a._v("#")]),a._v(" 文件监听原理")]),a._v(" "),t("p",[a._v("在发现源码发生变化时，自动重新构建出新的输出文件。")]),a._v(" "),t("p",[a._v("Webpack 开启监听模式，有两种方式：")]),a._v(" "),t("ul",[t("li",[a._v("启动 webpack 命令时，带上 --watch 参数")]),a._v(" "),t("li",[a._v("在配置 webpack.config.js 中设置 watch:true")])]),a._v(" "),t("p",[a._v("缺点：每次需要手动刷新浏览器")]),a._v(" "),t("p",[a._v("原理：轮询判断文件的最后编辑时间是否变化，如果某个文件发生了变化，并不会立刻告诉监听者，而是先缓存起来，等 "),t("code",[a._v("aggregateTimeout")]),a._v(" 后再执行。")]),a._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[a._v("module"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("export "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 默认false,也就是不开启")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("watch")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 只有开启监听模式时，watchOptions才有意义")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("watchOptions")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 默认为空，不监听的文件或者文件夹，支持正则匹配")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("ignored")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[a._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[a._v("node_modules")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[a._v("/")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 监听到变化发生后会等300ms再去执行，默认300ms")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("aggregateTimeout")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("300")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 判断文件是否发生变化是通过不停询问系统指定文件有没有变化实现的，默认每秒问1000次")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("poll")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("h2",{attrs:{id:"webpack-热更新原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack-热更新原理"}},[a._v("#")]),a._v(" Webpack 热更新原理")]),a._v(" "),t("p",[t("code",[a._v("Webpack")]),a._v(" 的热更新又称热替换（"),t("code",[a._v("Hot Module Replacement")]),a._v("），缩写为 "),t("code",[a._v("HMR")]),a._v("。 这个机制可以做到不用刷新浏览器而将新变更的模块替换掉旧的模块。")]),a._v(" "),t("p",[a._v("HMR 的核心就是客户端从服务端拉去更新后的文件，准确的说是 chunk diff (chunk 需要更新的部分)，实际上 WDS 与浏览器之间维护了一个 "),t("code",[a._v("Websocket")]),a._v("，当本地资源发生变化时，WDS 会向浏览器推送更新，并带上构建时的 hash，让客户端与上一次资源进行对比。客户端对比出差异后会向 WDS 发起 "),t("code",[a._v("Ajax")]),a._v(" 请求来获取更改内容(文件列表、hash)，这样客户端就可以再借助这些信息继续向 WDS 发起 "),t("code",[a._v("jsonp")]),a._v(" 请求获取该 chunk 的增量更新。")]),a._v(" "),t("p",[a._v("后续的部分(拿到增量更新之后如何处理？哪些状态该保留？哪些又需要更新？)由 "),t("code",[a._v("HotModulePlugin")]),a._v(" 来完成，提供了相关 API 以供开发者针对自身场景进行处理，像"),t("code",[a._v("react-hot-loader")]),a._v(" 和 "),t("code",[a._v("vue-loader")]),a._v(" 都是借助这些 API 实现 HMR。")]),a._v(" "),t("p",[a._v("细节请参考"),t("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/30669007",target:"_blank",rel:"noopener noreferrer"}},[a._v("Webpack HMR 原理解析"),t("OutboundLink")],1)]),a._v(" "),t("h2",{attrs:{id:"如何对-bundle-体积进行监控和分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何对-bundle-体积进行监控和分析"}},[a._v("#")]),a._v(" 如何对 bundle 体积进行监控和分析")]),a._v(" "),t("p",[t("code",[a._v("VSCode")]),a._v(" 中有一个插件 "),t("code",[a._v("Import Cost")]),a._v(" 可以帮助我们对引入模块的大小进行实时监测，还可以使用 "),t("code",[a._v("webpack-bundle-analyzer")]),a._v(" 生成 "),t("code",[a._v("bundle")]),a._v(" 的模块组成图，显示所占体积。")]),a._v(" "),t("p",[t("code",[a._v("bundlesize")]),a._v(" 工具包可以进行自动化资源体积监控。")]),a._v(" "),t("h2",{attrs:{id:"文件指纹"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#文件指纹"}},[a._v("#")]),a._v(" 文件指纹")]),a._v(" "),t("p",[a._v("文件指纹是打包后输出的文件名的后缀。")]),a._v(" "),t("ul",[t("li",[t("p",[t("code",[a._v("Hash")]),a._v("：和整个项目的构建相关，只要项目文件有修改，整个项目构建的 hash 值就会更改")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("Chunkhash")]),a._v("：和 Webpack 打包的 chunk 有关，不同的 entry 会生出不同的 chunkhash")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("Contenthash")]),a._v("：根据文件内容来定义 hash，文件内容不变，则 contenthash 不变")])])]),a._v(" "),t("h3",{attrs:{id:"js-文件指纹设置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js-文件指纹设置"}},[a._v("#")]),a._v(" js 文件指纹设置")]),a._v(" "),t("p",[a._v("设置 output 的 filename，用 chunkhash")]),a._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[a._v("module"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("exports "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("entry")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("app")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"./scr/app.js"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("search")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"./src/search.js"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("output")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("filename")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"[name][chunkhash:8].js"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("path")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" __dirname "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/dist"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("h3",{attrs:{id:"css-的文件指纹设置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#css-的文件指纹设置"}},[a._v("#")]),a._v(" CSS 的文件指纹设置")]),a._v(" "),t("p",[a._v("设置 MiniCssExtractPlugin 的 filename，使用 contenthash")]),a._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[a._v("module"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("exports "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("entry")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("app")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"./scr/app.js"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("search")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"./src/search.js"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("output")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("filename")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"[name][chunkhash:8].js"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("path")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" __dirname "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/dist"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("plugins")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("MiniCssExtractPlugin")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("filename")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token template-string"}},[t("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[a._v("`")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("[name][contenthash:8].css")]),t("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[a._v("`")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("h3",{attrs:{id:"图片的文件指纹设置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#图片的文件指纹设置"}},[a._v("#")]),a._v(" 图片的文件指纹设置")]),a._v(" "),t("p",[a._v("设置 file-loader 的 name，使用 hash。")]),a._v(" "),t("p",[a._v("占位符名称及含义")]),a._v(" "),t("ul",[t("li",[a._v("ext 资源后缀名")]),a._v(" "),t("li",[a._v("name 文件名称")]),a._v(" "),t("li",[a._v("path 文件的相对路径")]),a._v(" "),t("li",[a._v("folder 文件所在的文件夹")]),a._v(" "),t("li",[a._v("contenthash 文件的内容 hash，默认是 md5 生成")]),a._v(" "),t("li",[a._v("hash 文件内容的 hash，默认是 md5 生成")]),a._v(" "),t("li",[a._v("emoji 一个随机的指代文件内容的 emoj")])]),a._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" path "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("require")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"path"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nmodule"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("exports "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("entry")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"./src/index.js"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("output")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("filename")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"bundle.js"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("path")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" path"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("resolve")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("__dirname"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"dist"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("module")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("rules")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("test")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[a._v("/")]),t("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[a._v("\\.(png|svg|jpg|gif)$")]),t("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[a._v("/")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("use")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("\n          "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("loader")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"file-loader"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("options")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n              "),t("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("name")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"img/[name][hash:8].[ext]"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n          "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),t("h2",{attrs:{id:"如何保证各个-loader-按照预想方式工作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何保证各个-loader-按照预想方式工作"}},[a._v("#")]),a._v(" 如何保证各个 loader 按照预想方式工作")]),a._v(" "),t("p",[a._v("可以使用 "),t("code",[a._v("enforce")]),a._v(" 强制执行 "),t("code",[a._v("loader")]),a._v(" 的作用顺序，"),t("code",[a._v("pre")]),a._v(" 代表在所有正常 loader 之前执行，"),t("code",[a._v("post")]),a._v(" 是所有 loader 之后执行。(inline 官方不推荐使用)")]),a._v(" "),t("h2",{attrs:{id:"如何优化-webpack-的构建速度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何优化-webpack-的构建速度"}},[a._v("#")]),a._v(" 如何优化 Webpack 的构建速度")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("使用"),t("code",[a._v("高版本")]),a._v("的 Webpack 和 Node.js")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("多进程/多实例构建")]),a._v("：HappyPack(不维护了)、thread-loader")])]),a._v(" "),t("li",[t("p",[t("code",[a._v("压缩代码")])]),a._v(" "),t("ul",[t("li",[a._v("多进程并行压缩\n"),t("ul",[t("li",[a._v("webpack-paralle-uglify-plugin")]),a._v(" "),t("li",[a._v("uglifyjs-webpack-plugin 开启 parallel 参数 (不支持 ES6)")]),a._v(" "),t("li",[a._v("terser-webpack-plugin 开启 parallel 参数")])])]),a._v(" "),t("li",[a._v("通过 mini-css-extract-plugin 提取 Chunk 中的 CSS 代码到单独文件，通过 css-loader 的 minimize 选项开启 cssnano 压缩 CSS。")])])]),a._v(" "),t("li",[t("p",[t("code",[a._v("图片压缩")])]),a._v(" "),t("ul",[t("li",[a._v("使用基于 Node 库的 imagemin (很多定制选项、可以处理多种图片格式)")]),a._v(" "),t("li",[a._v("配置 image-webpack-loader")])])]),a._v(" "),t("li",[t("p",[t("code",[a._v("缩小打包作用域")]),a._v("：")]),a._v(" "),t("ul",[t("li",[a._v("exclude/include (确定 loader 规则范围)")]),a._v(" "),t("li",[a._v("resolve.modules 指明第三方模块的绝对路径 (减少不必要的查找)")]),a._v(" "),t("li",[a._v("resolve.mainFields 只采用 main 字段作为入口文件描述字段 (减少搜索步骤，需要考虑到所有运行时依赖的第三方模块的入口文件描述字段)")]),a._v(" "),t("li",[a._v("resolve.extensions 尽可能减少后缀尝试的可能性")]),a._v(" "),t("li",[a._v("noParse 对完全不需要解析的库进行忽略 (不去解析但仍会打包到 bundle 中，注意被忽略掉的文件里不应该包含 import、require、define 等模块化语句)")]),a._v(" "),t("li",[a._v("IgnorePlugin (完全排除模块)")]),a._v(" "),t("li",[a._v("合理使用 alias")])])]),a._v(" "),t("li",[t("p",[t("code",[a._v("提取页面公共资源")]),a._v("：")]),a._v(" "),t("ul",[t("li",[a._v("基础包分离：\n"),t("ul",[t("li",[a._v("使用 html-webpack-externals-plugin，将基础包通过 CDN 引入，不打入 bundle 中")]),a._v(" "),t("li",[a._v("使用 SplitChunksPlugin 进行(公共脚本、基础包、页面公共文件)分离(Webpack4 内置) ，替代了 CommonsChunkPlugin 插件")])])])])]),a._v(" "),t("li",[t("p",[t("code",[a._v("DLL")]),a._v("：")]),a._v(" "),t("ul",[t("li",[a._v("使用 DllPlugin 进行分包，使用 DllReferencePlugin(索引链接) 对 manifest.json 引用，让一些基本不会改动的代码先打包成静态资源，避免反复编译浪费时间。")]),a._v(" "),t("li",[a._v("HashedModuleIdsPlugin 可以解决模块数字 id 问题")])])]),a._v(" "),t("li",[t("p",[t("code",[a._v("充分利用缓存提升二次构建速度")]),a._v("：")]),a._v(" "),t("ul",[t("li",[a._v("babel-loader 开启缓存")]),a._v(" "),t("li",[a._v("terser-webpack-plugin 开启缓存")]),a._v(" "),t("li",[a._v("使用 cache-loader 或者 hard-source-webpack-plugin")])])]),a._v(" "),t("li",[t("p",[t("code",[a._v("Tree shaking")])]),a._v(" "),t("ul",[t("li",[a._v("打包过程中检测工程中没有引用过的模块并进行标记，在资源压缩时将它们从最终的 bundle 中去掉(只能对 ES6 Modlue 生效) 开发中尽可能使用 ES6 Module 的模块，提高 tree shaking 效率")]),a._v(" "),t("li",[a._v("禁用 babel-loader 的模块依赖解析，否则 Webpack 接收到的就都是转换过的 CommonJS 形式的模块，无法进行 tree-shaking")]),a._v(" "),t("li",[a._v("使用 PurifyCSS(不在维护) 或者 uncss 去除无用 CSS 代码\n"),t("ul",[t("li",[a._v("purgecss-webpack-plugin 和 mini-css-extract-plugin 配合使用(建议)")])])])])]),a._v(" "),t("li",[t("p",[t("code",[a._v("Scope hoisting")])]),a._v(" "),t("ul",[t("li",[a._v("构建后的代码会存在大量闭包，造成体积增大，运行代码时创建的函数作用域变多，内存开销变大。Scope hoisting 将所有模块的代码按照引用顺序放在一个函数作用域里，然后适当的重命名一些变量以防止变量名冲突")]),a._v(" "),t("li",[a._v("必须是 ES6 的语法，因为有很多第三方库仍采用 CommonJS 语法，为了充分发挥 Scope hoisting 的作用，需要配置 mainFields 对第三方模块优先采用 jsnext:main 中指向的 ES6 模块化语法")])])]),a._v(" "),t("li",[t("p",[t("code",[a._v("动态Polyfill")])]),a._v(" "),t("ul",[t("li",[a._v("建议采用 polyfill-service 只给用户返回需要的 polyfill，社区维护。 (部分国内奇葩浏览器 UA 可能无法识别，但可以降级返回所需全部 polyfill)")])])])]),a._v(" "),t("p",[a._v("更多优化请参考"),t("a",{attrs:{href:"https://www.webpackjs.com/guides/build-performance/",target:"_blank",rel:"noopener noreferrer"}},[a._v("官网-构建性能"),t("OutboundLink")],1)]),a._v(" "),t("h2",{attrs:{id:"代码分割本质"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代码分割本质"}},[a._v("#")]),a._v(" 代码分割本质")]),a._v(" "),t("p",[a._v("代码分割的本质其实就是在"),t("code",[a._v("源代码直接上线")]),a._v("和"),t("code",[a._v("打包成唯一脚本main.bundle.js")]),a._v("这两种极端方案之间的一种更适合实际场景的中间状态。")]),a._v(" "),t("p",[a._v("源代码直接上线：虽然过程可控，但是 http 请求多，性能开销大。")]),a._v(" "),t("p",[a._v("打包成唯一脚本：一把梭完自己爽，服务器压力小，但是页面空白期长，用户体验不好。")]),a._v(" "),t("h2",{attrs:{id:"是否写过-loader-简单描述一下编写-loader-的思路"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#是否写过-loader-简单描述一下编写-loader-的思路"}},[a._v("#")]),a._v(" 是否写过 Loader？简单描述一下编写 loader 的思路？")]),a._v(" "),t("p",[a._v("Loader 支持链式调用，所以开发上需要严格遵循“单一职责”，每个 Loader 只负责自己需要负责的事情。")]),a._v(" "),t("p",[t("a",{attrs:{href:"https://www.webpackjs.com/api/loaders/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Loader 的 API"),t("OutboundLink")],1),a._v(" 可以去官网查阅")]),a._v(" "),t("ul",[t("li",[a._v("Loader 运行在 Node.js 中，我们可以调用任意 Node.js 自带的 API 或者安装第三方模块进行调用")]),a._v(" "),t("li",[a._v("Webpack 传给 Loader 的原内容都是 UTF-8 格式编码的字符串，当某些场景下 Loader 处理二进制文件时，需要通过 exports.raw = true 告诉 Webpack 该 Loader 是否需要二进制数据")]),a._v(" "),t("li",[a._v("尽可能的异步化 Loader，如果计算量很小，同步也可以")]),a._v(" "),t("li",[a._v("Loader 是无状态的，我们不应该在 Loader 中保留状态")]),a._v(" "),t("li",[a._v("使用 loader-utils 和 schema-utils 为我们提供的实用工具")]),a._v(" "),t("li",[a._v("加载本地 Loader 方法\n"),t("ul",[t("li",[a._v("Npm link")]),a._v(" "),t("li",[a._v("ResolveLoader")])])])]),a._v(" "),t("h2",{attrs:{id:"是否写过-plugin-简单描述一下编写-plugin-的思路"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#是否写过-plugin-简单描述一下编写-plugin-的思路"}},[a._v("#")]),a._v(" 是否写过 Plugin？简单描述一下编写 Plugin 的思路？")]),a._v(" "),t("p",[a._v("webpack 在运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在特定的阶段钩入想要添加的自定义功能。Webpack 的 Tapable 事件流机制保证了插件的有序性，使得整个系统扩展性良好。")]),a._v(" "),t("p",[t("a",{attrs:{href:"https://www.webpackjs.com/api/plugins/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Plugin 的 API"),t("OutboundLink")],1),a._v(" 可以去官网查阅")]),a._v(" "),t("ul",[t("li",[a._v("compiler 暴露了和 Webpack 整个生命周期相关的钩子")]),a._v(" "),t("li",[a._v("compilation 暴露了与模块和依赖有关的粒度更小的事件钩子")]),a._v(" "),t("li",[a._v("插件需要在其原型上绑定 apply 方法，才能访问 compiler 实例")]),a._v(" "),t("li",[a._v("传给每个插件的 compiler 和 compilation 对象都是同一个引用，若在一个插件中修改了它们身上的属性，会影响后面的插件")]),a._v(" "),t("li",[a._v("找出合适的事件点去完成想要的功能\n"),t("ul",[t("li",[a._v("emit 事件发生时，可以读取到最终输出的资源、代码块、模块及其依赖，并进行修改(emit 事件是修改 Webpack 输出资源的最后时机)")]),a._v(" "),t("li",[a._v("watch-run 当依赖的文件发生变化时会触发")])])]),a._v(" "),t("li",[a._v("异步的事件需要在插件处理完任务时调用回调函数通知 Webpack 进入下一个流程，不然会卡住")])]),a._v(" "),t("h2",{attrs:{id:"babel"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel"}},[a._v("#")]),a._v(" Babel")]),a._v(" "),t("p",[a._v("大多数 JavaScript Parser 遵循 "),t("code",[a._v("estree")]),a._v(" 规范，Babel 最初基于 "),t("code",[a._v("acorn")]),a._v(" 项目(轻量级现代 JavaScript 解析器) Babel 大概分为三大部分：")]),a._v(" "),t("ul",[t("li",[a._v("解析：将代码转换成 AST\n"),t("ul",[t("li",[a._v("词法分析：将代码(字符串)分割为 token 流，即语法单元成的数组")]),a._v(" "),t("li",[a._v("语法分析：分析 token 流(上面生成的数组)并生成 AST")])])]),a._v(" "),t("li",[a._v("转换：访问 AST 的节点进行变换操作生产新的 AST\n"),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/NervJS/taro/blob/master/packages/taro-transformer-wx/src/index.ts#L15",target:"_blank",rel:"noopener noreferrer"}},[a._v("Taro"),t("OutboundLink")],1),a._v("就是利用 babel 完成的小程序语法转换")])])]),a._v(" "),t("li",[a._v("生成：以新的 AST 为基础生成代码")])]),a._v(" "),t("p",[a._v("想了解如何一步一步实现一个编译器的同学可以移步 Babel 官网曾经推荐的开源项目 "),t("a",{attrs:{href:"https://github.com/jamiebuilds/the-super-tiny-compiler",target:"_blank",rel:"noopener noreferrer"}},[a._v("the-super-tiny-compiler"),t("OutboundLink")],1)]),a._v(" "),t("h2",{attrs:{id:"参考链接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考链接"}},[a._v("#")]),a._v(" 参考链接")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://juejin.cn/post/6844904094281236487",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://juejin.cn/post/6844904094281236487"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=r.exports}}]);