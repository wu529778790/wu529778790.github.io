(window.webpackJsonp=window.webpackJsonp||[]).push([[160],{499:function(a,s,t){"use strict";t.r(s);var e=t(4),n=Object(e.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("p",{attrs:{"data-nodeid":"21749"}},[a._v("今天我和你分享的话题和 Babel 相关。Babel 在前端中占有举足轻重的历史地位，几乎所有的大型前端应用项目都离不开 Babel 的支持。同时，Babel 不仅仅是一个工具，更是一个"),s("strong",{attrs:{"data-nodeid":"21755"}},[a._v("工具链（toolchain）")]),a._v("，是前端基建中绝对重要的一环。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"24286"}},[a._v("对于很多前端工程师来说，你可能配置过 Babel，也可能看过一些关于 Babel 插件或原理的文章。但我认为，“配置工程师”只是我们的起点，通过阅读几篇 Babel 插件编写的文章并不能让我们真正掌握 Babel 的设计思想和原理。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"24287"}},[a._v("对于 Babel 的学习，不能停留在配置层面，我们需要从更高的角度认识 Babel 在工程上的方方面面和设计思想。这一讲就让我们深入 Babel 生态，了解前端基建工程中最重要的一环。")]),a._v(" "),s("h3",{attrs:{"data-nodeid":"14744"}},[a._v("Babel 是什么")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14745"}},[a._v("借用 Babel 官方的一句话简短介绍：")]),a._v(" "),s("blockquote",{attrs:{"data-nodeid":"14746"}},[s("p",{attrs:{"data-nodeid":"14747"}},[a._v("Babel is a JavaScript compiler.")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"14748"}},[a._v("Babel 其实就是一个 JavaScript 的“编译器”。但是一个简单的编译器如何会成为影响前端项目的“大杀器”呢？究其原因，主要是前端语言特性和宿主（浏览器/Node.js 等）环境高速发展，但"),s("strong",{attrs:{"data-nodeid":"14913"}},[a._v("宿主环境对新语言特性的支持无法做到即时，而开发者又需要兼容各种宿主环境")]),a._v("，因此语言特性的降级成为刚需。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14749"}},[a._v("另一方面，前端框架“"),s("strong",{attrs:{"data-nodeid":"14919"}},[a._v("自定义 DSL")]),a._v("”的风格越来越凸显，使得前端各种“姿势”的代码被编译为 JavaScript 的需求成为标配。因此 Babel 的职责半径越来越大，它需要完成以下内容：")]),a._v(" "),s("ul",{attrs:{"data-nodeid":"14750"}},[s("li",{attrs:{"data-nodeid":"14751"}},[s("p",{attrs:{"data-nodeid":"14752"}},[a._v("语法转换，一般是高级语言特性的降级；")])]),a._v(" "),s("li",{attrs:{"data-nodeid":"14753"}},[s("p",{attrs:{"data-nodeid":"14754"}},[a._v("Polyfill（垫片/补丁）特性的实现和接入；")])]),a._v(" "),s("li",{attrs:{"data-nodeid":"14755"}},[s("p",{attrs:{"data-nodeid":"14756"}},[a._v("源码转换，比如 JSX 等。")])])]),a._v(" "),s("blockquote",{attrs:{"data-nodeid":"14757"}},[s("p",{attrs:{"data-nodeid":"14758"}},[s("a",{attrs:{href:"https://babeljs.io/videos.html","data-nodeid":"14925"}},[a._v("更多需求，点击这里查看")]),a._v("。")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"27448"}},[a._v("为了完成这些编译工作，Babel 不能大包大揽地实现一切，更不能用面条式毫无设计模式可言的方式来 Coding。因此，Babel 的设计，在工程化的角度上，需要秉承以下理念：")]),a._v(" "),s("ul",{attrs:{"data-nodeid":"29996"}},[s("li",{attrs:{"data-nodeid":"29997"}},[s("p",{attrs:{"data-nodeid":"29998"}},[s("strong",{attrs:{"data-nodeid":"30007"}},[a._v("可插拔")]),a._v("（Pluggable），比如 Babel 需要有一套灵活的插件机制，召集第三方开发者力量，同时还需要方便接入各种工具；")])]),a._v(" "),s("li",{attrs:{"data-nodeid":"29999"}},[s("p",{attrs:{"data-nodeid":"30000"}},[s("strong",{attrs:{"data-nodeid":"30012"}},[a._v("可调式")]),a._v("（Debuggable），比如 Babel 在编译过程中，要提供一套 Source Map，来帮助使用者在编译结果和编译前源码之间建立映射关系，方便调试；")])]),a._v(" "),s("li",{attrs:{"data-nodeid":"30001"}},[s("p",{attrs:{"data-nodeid":"30002"}},[s("strong",{attrs:{"data-nodeid":"30021"}},[a._v("基于协定")]),a._v("（Compact），Compact 可以简单翻译为基于协定，主要是指实现灵活的配置方式，比如你熟悉的 Babel"),s("a",{attrs:{href:"https://2ality.com/2015/12/babel6-loose-mode.html","data-nodeid":"30019"}},[a._v("loose 模式")]),a._v("，Babel 提供 loose 选项，帮助开发者在“尽量还原规范”和“更小的编译产出体积”之间，找到平衡。")])])]),a._v(" "),s("p",{attrs:{"data-nodeid":"14767"}},[a._v("我们总结一下，"),s("strong",{attrs:{"data-nodeid":"14952"}},[a._v("编译是 Babel 的核心目标")]),a._v("，因此它自身的实现基于编译原理，深入 AST（抽象语法树）来生成目标代码；同时，Babel 需要工程化协作，需要和各种工具（如 Webpack）相互配合，因此 Babel 一定是庞大复杂的。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14768"}},[a._v("接下来，我们继续深入 Babel，了解这个“庞然大物”的运作方式和实现原理。")]),a._v(" "),s("h3",{attrs:{"data-nodeid":"14769"}},[a._v("Babel Monorepo 架构包解析")]),a._v(" "),s("p",{attrs:{"data-nodeid":"24920"}},[a._v("为了以最完美的方式支撑上述职责，Babel 的“家族”可谓枝繁叶茂。Babel 是一个使用 Lerna 构建的 Monorepo 风格的仓库，在其"),s("a",{attrs:{href:"https://github.com/babel/babel/tree/main/packages","data-nodeid":"24924"}},[s("code",{attrs:{"data-backticks":"1","data-nodeid":"24923"}},[a._v("./packages")])]),a._v("目录下有 140 多个包，这些包我经过整合分类，并按照重要性筛选出来，可以用下面这张图片简单概括：")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14771"}},[s("img",{attrs:{src:"https://s0.lgstatic.com/i/image/M00/8C/84/CgqCHl_toZGAYAFJAAFicXOL898453.png",alt:"Drawing 0.png","data-nodeid":"14962"}})]),a._v(" "),s("p",{attrs:{"data-nodeid":"14772"}},[a._v("其中 Babel 部分包你可能见过或者使用过，但并不确定它们起到了什么作用；有些包，你可能都没有听说过。总的来说，可以分为两种情况：")]),a._v(" "),s("ul",{attrs:{"data-nodeid":"14773"}},[s("li",{attrs:{"data-nodeid":"14774"}},[s("p",{attrs:{"data-nodeid":"14775"}},[a._v("Babel 一些包的意义是在工程上起作用，因此对于业务来说是不透明的，比如一些插件可能被 Babel preset 预设机制打包对外输出；")])]),a._v(" "),s("li",{attrs:{"data-nodeid":"14776"}},[s("p",{attrs:{"data-nodeid":"14777"}},[a._v("Babel 一些包是为了纯工程项目使用，或者运行目标在 Node.js 环境中，相对来讲你对这些会更熟悉。")])])]),a._v(" "),s("p",{attrs:{"data-nodeid":"14778"}},[a._v("下面，我会对一些“Babel 家族重点成员”进行梳理，并简单说说它们的基本原理。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14779"}},[s("a",{attrs:{href:"https://babeljs.io/docs/en/babel-core","data-nodeid":"14969"}},[a._v("@babel/core")]),a._v(" "),s("strong",{attrs:{"data-nodeid":"14975"}},[a._v("是 Babel 实现转换的核心")]),a._v("，它可以根据配置，进行源码的编译转换：")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" babel "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"@babel/core"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nbabel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("transform")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("code"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" options"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("err"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" result")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\nresult"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// => { code, map, ast }")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",{attrs:{"data-nodeid":"14781"}},[s("a",{attrs:{href:"https://babeljs.io/docs/en/babel-cli","data-nodeid":"14978"}},[a._v("@babel/cli")]),a._v(" "),s("strong",{attrs:{"data-nodeid":"14992"}},[a._v("是 Babel 提供的命令行")]),a._v("，它可以在终端中通过命令行方式运行，编译文件或目录。我们简单说一下它的实现原理：@babel/cli 使用了 "),s("a",{attrs:{href:"https://github.com/babel/babel/blob/main/packages/babel-cli/package.json#L26","data-nodeid":"14986"}},[a._v("commander")]),a._v(" 库搭建基本的命令行开发。以编译文件为例，其关键部分"),s("a",{attrs:{href:"https://github.com/babel/babel/blob/main/packages/babel-cli/package.json#L26","data-nodeid":"14990"}},[a._v("源码如下")]),a._v("：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"14782"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-keyword"},[a._v("import")]),a._v(" * as util from "),s("span",{staticClass:"hljs-string"},[a._v('"./util"')]),a._v(";\n"),s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" results = await Promise.all(\n  _filenames.map("),s("span",{staticClass:"hljs-function"},[a._v("async "),s("span",{staticClass:"hljs-title"},[a._v("function")]),a._v(" "),s("span",{staticClass:"hljs-params"},[a._v("(filename: string)")]),a._v(": Promise<Object> ")]),a._v("{\n    let sourceFilename = filename;\n    "),s("span",{staticClass:"hljs-keyword"},[a._v("if")]),a._v(" (cliOptions.outFile) {\n      sourceFilename = path.relative(\n        path.dirname(cliOptions.outFile),\n        sourceFilename,\n      );\n    }\n    "),s("span",{staticClass:"hljs-comment"},[a._v("// 获取文件名")]),a._v("\n    sourceFilename = slash(sourceFilename);\n    "),s("span",{staticClass:"hljs-keyword"},[a._v("try")]),a._v(" {\n      "),s("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" await util.compile(filename, {\n        ...babelOptions,\n        sourceFileName: sourceFilename,\n        "),s("span",{staticClass:"hljs-comment"},[a._v("// 获取 sourceMaps 配置项")]),a._v("\n        sourceMaps:\n          babelOptions.sourceMaps === "),s("span",{staticClass:"hljs-string"},[a._v('"inline"')]),a._v("\n            ? "),s("span",{staticClass:"hljs-keyword"},[a._v("true")]),a._v("\n            : babelOptions.sourceMaps,\n      });\n    } "),s("span",{staticClass:"hljs-keyword"},[a._v("catch")]),a._v(" (err) {\n      "),s("span",{staticClass:"hljs-keyword"},[a._v("if")]),a._v(" (!cliOptions.watch) {\n        "),s("span",{staticClass:"hljs-keyword"},[a._v("throw")]),a._v(" err;\n      }\n      console.error(err);\n      "),s("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" "),s("span",{staticClass:"hljs-keyword"},[a._v("null")]),a._v(";\n    }\n  }),\n);\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"14783"}},[a._v("在上述代码中，@babel/cli 使用了"),s("code",{attrs:{"data-backticks":"1","data-nodeid":"14994"}},[a._v("util.compile")]),a._v("方法执行关键的编译操作，而该方法定义在 "),s("a",{attrs:{href:"https://github.com/babel/babel/blob/master/packages/babel-cli/src/babel/util.js#L80","data-nodeid":"14998"}},[a._v("babel-cli/src/babel/util.js")]),a._v(" 中：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"14784"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-keyword"},[a._v("import")]),a._v(" * as babel from "),s("span",{staticClass:"hljs-string"},[a._v('"@babel/core"')]),a._v(";\n"),s("span",{staticClass:"hljs-comment"},[a._v("// 核心编译方法")]),a._v("\n"),s("span",{staticClass:"hljs-function"},[a._v("export function "),s("span",{staticClass:"hljs-title"},[a._v("compile")]),s("span",{staticClass:"hljs-params"},[a._v("(\n  filename: string,\n  opts: Object | Function,\n)")]),a._v(": Promise<Object> ")]),a._v("{\n  "),s("span",{staticClass:"hljs-comment"},[a._v("// 编译配置")]),a._v("\n  opts = {\n    ...opts,\n    caller: CALLER,\n  };\n  "),s("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" "),s("span",{staticClass:"hljs-keyword"},[a._v("new")]),a._v(" Promise((resolve, reject) => {\n    "),s("span",{staticClass:"hljs-comment"},[a._v("// 调用 transformFile 方法执行编译过程")]),a._v("\n    babel.transformFile(filename, opts, (err, result) => {\n      "),s("span",{staticClass:"hljs-keyword"},[a._v("if")]),a._v(" (err) reject(err);\n      "),s("span",{staticClass:"hljs-keyword"},[a._v("else")]),a._v(" resolve(result);\n    });\n  });\n}\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"14785"}},[a._v("由此可见，@babel/cli 负责获取配置内容，并最终依赖了 @babel/core 完成编译。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14786"}},[a._v("事实上，我们可以在 @babel/cli 的 package.json 中找到线索：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"14787"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-string"},[a._v('"peerDependencies"')]),a._v(": {\n "),s("span",{staticClass:"hljs-string"},[a._v('"@babel/core"')]),a._v(": "),s("span",{staticClass:"hljs-string"},[a._v('"^7.0.0-0"')]),a._v("\n},\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"14788"}},[a._v("这一部分的源码在 "),s("a",{attrs:{href:"https://github.com/babel/babel/blob/master/packages/babel-cli/package.json#L39","data-nodeid":"15005"}},[a._v("peerDependencies")]),a._v(" 当中，你可以课后再次学习。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14789"}},[a._v("现在，你应该进一步体会到了 @babel/core 的作用，"),s("strong",{attrs:{"data-nodeid":"15018"}},[a._v("作为 @babel/cli 的关键依赖，@babel/core 提供了基础的编译能力")]),a._v("。至于为什么在 @babel/cli 中，使用"),s("code",{attrs:{"data-backticks":"1","data-nodeid":"15012"}},[a._v("peerDependencies")]),a._v("，你可以在 "),s("a",{attrs:{href:"https://kaiwu.lagou.com/course/courseInfo.htm?courseId=584#/detail/pc?id=5908","data-nodeid":"15016"}},[a._v("03 讲“CI 环境上的 npm 优化及更多工程化问题解析”")]),a._v("中找到答案。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14790"}},[a._v("我们花时间梳理 @babel/cli 和 @babel/core 包，希望帮助你对于 Babel 各个包之间的协同分工有个整体感知，这也是 Monorepo 风格仓库常见的设计形式。接下来，我们再继续看更多“家族成员”。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14791"}},[s("a",{attrs:{href:"https://github.com/babel/babel/tree/main/packages/babel-standalone","data-nodeid":"15022"}},[a._v("@babel/standalone")]),a._v("这个包非常有趣，它可以在非 Node.js 环境（比如浏览器环境）自动编译含有 text/babel 或 text/jsx 的 type 值的 script 标签，并进行编译，如下面代码：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"14792"}},[s("code",{attrs:{"data-language":"java"}},[a._v('<script src="https://unpkg.com/@babel/standalone/babel.min.js"><\/script>\n<script type="text/babel">\n const getMessage = () => "Hello World";\n document.getElementById(\'output\').innerHTML = getMessage();\n<\/script>\n')])]),a._v(" "),s("p",{attrs:{"data-nodeid":"14793"}},[a._v("其工作原理藏在 "),s("a",{attrs:{href:"https://github.com/babel/babel/tree/main/packages/babel-standalone","data-nodeid":"15027"}},[a._v("babel-standalone")]),a._v(" 的"),s("a",{attrs:{href:"https://github.com/babel/babel/blob/0641a15030565e7f47ef0c5ff25f36264c182b11/packages/babel-standalone/src/transformScriptTags.js#L132","data-nodeid":"15031"}},[a._v("核心源码")]),a._v("中，最后的编译行为由：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"14794"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-keyword"},[a._v("import")]),a._v(" {\n  transformFromAst as babelTransformFromAst,\n  transform as babelTransform,\n  buildExternalHelpers as babelBuildExternalHelpers,\n} from "),s("span",{staticClass:"hljs-string"},[a._v('"@babel/core"')]),a._v(";\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"14795"}},[a._v("来提供。因此，我们又看到了另一个基于 @babel/core 的应用：@babel/standalone。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14796"}},[s("strong",{attrs:{"data-nodeid":"15046"}},[a._v("@babel/standalone 可以在浏览器中直接执行")]),a._v("，因此这个包对于"),s("strong",{attrs:{"data-nodeid":"15047"}},[a._v("浏览器环境动态插入高级语言特性的脚本")]),a._v("、"),s("strong",{attrs:{"data-nodeid":"15048"}},[a._v("在线自动解析编译")]),a._v("非常有意义。我们知道的 Babel 官网也用到了这个包，JSFiddle、JS Bin 等也都是 @babel/standalone 的受益者。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14797"}},[a._v("我认为，在前端发展方向之一——Web IDE 和智能化方向上，相信类似的设计和技术将会有更多的施展空间，@babel/standalone 对于我们的现代化前端发展思路，应该有启发。")]),a._v(" "),s("p",{staticClass:"te-preview-highlight",attrs:{"data-nodeid":"35098"}},[a._v("至此，我们看到了 @babel/core 被多个 Babel 包应用，而 @babel/core 的能力由更底层的 "),s("strong",{attrs:{"data-nodeid":"35116"}},[a._v("@babel/parser")]),a._v("、"),s("strong",{attrs:{"data-nodeid":"35117"}},[a._v("@babel/code-frame")]),a._v("、"),s("strong",{attrs:{"data-nodeid":"35118"}},[a._v("@babel/generator")]),a._v("、"),s("strong",{attrs:{"data-nodeid":"35119"}},[a._v("@babel/traverse、@babel/types")]),a._v("等包提供。这些“家族成员”提供了更基础的 AST 处理能力。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14799"}},[a._v("我们先看 "),s("a",{attrs:{href:"https://babeljs.io/docs/en/babel-parser","data-nodeid":"15075"}},[a._v("@babel/parser")]),a._v("，它是 Babel 用来对 JavaScript 语言解析的解析器。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14800"}},[a._v("@babel/parser 的实现主要依赖并参考了 "),s("a",{attrs:{href:"https://github.com/acornjs/acorn","data-nodeid":"15080"}},[a._v("acorn")]),a._v(" 和 "),s("a",{attrs:{href:"https://github.com/acornjs/acorn-jsx","data-nodeid":"15084"}},[a._v("acorn-jsx")]),a._v("，典型用法：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"14801"}},[s("code",{attrs:{"data-language":"java"}},[a._v("require("),s("span",{staticClass:"hljs-string"},[a._v('"@babel/parser"')]),a._v(").parse("),s("span",{staticClass:"hljs-string"},[a._v('"code"')]),a._v(", {\n  sourceType: "),s("span",{staticClass:"hljs-string"},[a._v('"module"')]),a._v(",\n  plugins: [\n    "),s("span",{staticClass:"hljs-string"},[a._v('"jsx"')]),a._v(",\n    "),s("span",{staticClass:"hljs-string"},[a._v('"flow"')]),a._v("\n  ]\n});\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"14802"}},[a._v("parse"),s("a",{attrs:{href:"https://github.com/babel/babel/blob/main/packages/babel-parser/src/index.js#L18","data-nodeid":"15089"}},[a._v("源码实现")]),a._v("：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"14803"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-function"},[a._v("export function "),s("span",{staticClass:"hljs-title"},[a._v("parse")]),s("span",{staticClass:"hljs-params"},[a._v("(input: string, options?: Options)")]),a._v(": File ")]),a._v("{\n  "),s("span",{staticClass:"hljs-keyword"},[a._v("if")]),a._v(" (options?.sourceType === "),s("span",{staticClass:"hljs-string"},[a._v('"unambiguous"')]),a._v(") {\n    options = {\n      ...options,\n    };\n    "),s("span",{staticClass:"hljs-keyword"},[a._v("try")]),a._v(" {\n      options.sourceType = "),s("span",{staticClass:"hljs-string"},[a._v('"module"')]),a._v(";\n      "),s("span",{staticClass:"hljs-comment"},[a._v("// 获取相应的编译器")]),a._v("\n      "),s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" parser = getParser(options, input);\n      "),s("span",{staticClass:"hljs-comment"},[a._v("// 使用编译器将源代码转为 ast")]),a._v("\n      "),s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" ast = parser.parse();\n      "),s("span",{staticClass:"hljs-keyword"},[a._v("if")]),a._v(" (parser.sawUnambiguousESM) {\n        "),s("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" ast;\n      }\n      "),s("span",{staticClass:"hljs-keyword"},[a._v("if")]),a._v(" (parser.ambiguousScriptDifferentAst) {\n        "),s("span",{staticClass:"hljs-keyword"},[a._v("try")]),a._v(" {\n          options.sourceType = "),s("span",{staticClass:"hljs-string"},[a._v('"script"')]),a._v(";\n          "),s("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" getParser(options, input).parse();\n        } "),s("span",{staticClass:"hljs-keyword"},[a._v("catch")]),a._v(" {}\n      } "),s("span",{staticClass:"hljs-keyword"},[a._v("else")]),a._v(" {\n        ast.program.sourceType = "),s("span",{staticClass:"hljs-string"},[a._v('"script"')]),a._v(";\n      }\n      "),s("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" ast;\n    } "),s("span",{staticClass:"hljs-keyword"},[a._v("catch")]),a._v(" (moduleError) {\n      "),s("span",{staticClass:"hljs-keyword"},[a._v("try")]),a._v(" {\n        options.sourceType = "),s("span",{staticClass:"hljs-string"},[a._v('"script"')]),a._v(";\n        "),s("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" getParser(options, input).parse();\n      } "),s("span",{staticClass:"hljs-keyword"},[a._v("catch")]),a._v(" {}\n      "),s("span",{staticClass:"hljs-keyword"},[a._v("throw")]),a._v(" moduleError;\n    }\n  } "),s("span",{staticClass:"hljs-keyword"},[a._v("else")]),a._v(" {\n    "),s("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" getParser(options, input).parse();\n  }\n}\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"14804"}},[a._v("由此可见，"),s("code",{attrs:{"data-backticks":"1","data-nodeid":"15092"}},[a._v('require("@babel/parser").parse()')]),a._v("方法可以返回给我们一个针对源码编译得到的 AST，这里的 AST 符合"),s("a",{attrs:{href:"https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md","data-nodeid":"15096"}},[a._v("Babel AST 格式")]),a._v("。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14805"}},[a._v("有了 AST，我们"),s("strong",{attrs:{"data-nodeid":"15107"}},[a._v("还需要对 AST 完成修改，才能产出编译后的代码")]),a._v("。这就需要对 AST 进行遍历，此时 "),s("a",{attrs:{href:"https://babeljs.io/docs/en/babel-traverse","data-nodeid":"15105"}},[a._v("@babel/traverse")]),a._v(" 就派上用场了，使用方式如下：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"14806"}},[s("code",{attrs:{"data-language":"java"}},[a._v("traverse(ast, {\n  enter(path) {\n    "),s("span",{staticClass:"hljs-keyword"},[a._v("if")]),a._v(" (path.isIdentifier({ name: "),s("span",{staticClass:"hljs-string"},[a._v('"n"')]),a._v(" })) {\n      path.node.name = "),s("span",{staticClass:"hljs-string"},[a._v('"x"')]),a._v(";\n    }\n  }\n});\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"14807"}},[a._v("遍历的同时，如何对 AST 上指定内容进行修改呢？这就又要引出另外一个“家族成员”，"),s("a",{attrs:{href:"https://babeljs.io/docs/en/babel-types","data-nodeid":"15111"}},[a._v("@babel/types")]),a._v(" "),s("strong",{attrs:{"data-nodeid":"15117"}},[a._v("包提供了对具体的 AST 节点的修改能力")]),a._v("。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14808"}},[a._v("得到了编译后的 AST 之后，最后一步：使用 "),s("a",{attrs:{href:"https://babeljs.io/docs/en/babel-generator","data-nodeid":"15121"}},[a._v("@babel/generator")]),a._v(" "),s("strong",{attrs:{"data-nodeid":"15127"}},[a._v("对新的 AST 进行聚合并生成 JavaScript 代码")]),a._v("：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"14809"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" output = generate(\n  ast,\n  {\n    "),s("span",{staticClass:"hljs-comment"},[a._v("/* options */")]),a._v("\n  },\n  code\n);\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"14810"}},[a._v("这样一个典型的 Babel 底层编译流程就出来了，如下图：")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14811"}},[s("img",{attrs:{src:"https://s0.lgstatic.com/i/image/M00/8C/8A/CgqCHl_u4niAOtOmAAEw7EQpjEI596.png",alt:"Lark20210101-165010.png","data-nodeid":"15131"}})]),a._v(" "),s("div",{attrs:{"data-nodeid":"14812"}},[s("p",{staticStyle:{"text-align":"center"}},[a._v("Babel 底层编译流程图")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"14813"}},[a._v("上图也是 Babel 插件运作实现的基础。基于 AST 的操作，Babel 将上述所有能力开放给插件，让第三方能够更方便地操作 AST，并聚合成最后编译产出的代码。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14814"}},[a._v("基于以上原理，Babel 具备了编译处理能力，但在工程中运用时，我们一般不会感知这些内容，你可能也很少直接操作 @babel/core、@babel/types 等，而应该对 @babel/preset-env 更加熟悉，毕竟 "),s("a",{attrs:{href:"https://babeljs.io/docs/en/babel-preset-env","data-nodeid":"15136"}},[a._v("@babel/preset-env")]),a._v(" "),s("strong",{attrs:{"data-nodeid":"15142"}},[a._v("是直接暴露给开发者在业务中运用的包能力")]),a._v("。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14815"}},[a._v("在工程中，我们需要 Babel 做到的是编译降级，而这个编译降级一般通过 "),s("a",{attrs:{href:"https://babeljs.io/docs/en/babel-preset-env","data-nodeid":"15146"}},[a._v("@babel/preset-env")]),a._v(" 来配置。@babel/preset-env 允许我们配置需要支持的目标环境（一般是浏览器范围或 Node.js 版本范围），利用 "),s("a",{attrs:{href:"https://babeljs.io/docs/en/babel-polyfill","data-nodeid":"15150"}},[a._v("babel-polyfill")]),a._v(" 完成补丁的接入。结合上一讲内容，"),s("strong",{attrs:{"data-nodeid":"15160"}},[a._v("@babel/polyfill 其实就是 core-js 和 regenerator-runtime 两个包的结合，@babel/polyfill 源码层面，通过 build-dist.sh 脚本，利用 browserify 进行打包")]),a._v("，参考"),s("a",{attrs:{href:"https://github.com/babel/babel/blob/main/packages/babel-polyfill/scripts/build-dist.sh","data-nodeid":"15158"}},[a._v("源码")]),a._v("：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"14816"}},[s("code",{attrs:{"data-language":"java"}},[a._v("#!/bin/sh\nset -ex\nmkdir -p dist\nyarn browserify lib/index.js \\\n  --insert-global-vars 'global' \\\n  --plugin bundle-collapser/plugin \\\n  --plugin derequire/plugin \\\n  >dist/polyfill.js\nyarn uglifyjs dist/polyfill.js \\\n  --compress keep_fnames,keep_fargs \\\n  --mangle keep_fnames \\\n  >dist/polyfill.min.js\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"14817"}},[s("strong",{attrs:{"data-nodeid":"15165"}},[a._v("注意：@babel/polyfill 目前已经计划废弃")]),a._v("，新的 Babel 生态（@babel/preset-env V7.4.0 版本）鼓励开发者直接在代码中引入 core-js 和 regenerator-runtime。但是不管直接导入 core-js 和 regenerator-runtime，还是直接导入 @babel/polyfill 都是引入了全量的 polyfills，@babel/preset-env 如何根据目标适配环境，按需引入业务中所需要的 polyfills 呢？")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14818"}},[a._v("事实上，@babel/preset-env 通过 "),s("a",{attrs:{href:"https://babeljs.io/docs/en/babel-preset-env#targets","data-nodeid":"15169"}},[a._v("targets 参数")]),a._v("，按照 browserslist 规范，结 合"),s("a",{attrs:{href:"https://www.npmjs.com/package/core-js-compat","data-nodeid":"15173"}},[a._v("core-js-compat")]),a._v("，筛选出适配环境所需的 polyfills（或 plugins），关键源码：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"14819"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-function"},[a._v("export "),s("span",{staticClass:"hljs-keyword"},[a._v("default")]),a._v(" "),s("span",{staticClass:"hljs-title"},[a._v("declare")]),s("span",{staticClass:"hljs-params"},[a._v("((api, opts)")]),a._v(" ")]),a._v("=> {\n  "),s("span",{staticClass:"hljs-comment"},[a._v("// 规范参数")]),a._v("\n  "),s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" {\n    bugfixes,\n    configPath,\n    debug,\n    exclude: optionsExclude,\n    forceAllTransforms,\n    ignoreBrowserslistConfig,\n    include: optionsInclude,\n    loose,\n    modules,\n    shippedProposals,\n    spec,\n    targets: optionsTargets,\n    useBuiltIns,\n    corejs: { version: corejs, proposals },\n    browserslistEnv,\n  } = normalizeOptions(opts);\n  let hasUglifyTarget = "),s("span",{staticClass:"hljs-keyword"},[a._v("false")]),a._v(";\n  "),s("span",{staticClass:"hljs-comment"},[a._v("// 获取对应 targets")]),a._v("\n  "),s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" targets = getTargets(\n    (optionsTargets: InputTargets),\n    { ignoreBrowserslistConfig, configPath, browserslistEnv },\n  );\n  "),s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" include = transformIncludesAndExcludes(optionsInclude);\n  "),s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" exclude = transformIncludesAndExcludes(optionsExclude);\n  "),s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" transformTargets = forceAllTransforms || hasUglifyTarget ? {} : targets;\n  "),s("span",{staticClass:"hljs-comment"},[a._v("// 获取需要兼容的内容")]),a._v("\n  "),s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" compatData = getPluginList(shippedProposals, bugfixes);\n  "),s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" modulesPluginNames = getModulesPluginNames({\n    modules,\n    transformations: moduleTransformations,\n    shouldTransformESM: modules !== "),s("span",{staticClass:"hljs-string"},[a._v('"auto"')]),a._v(" || !api.caller?.(supportsStaticESM),\n    shouldTransformDynamicImport:\n      modules !== "),s("span",{staticClass:"hljs-string"},[a._v('"auto"')]),a._v(" || !api.caller?.(supportsDynamicImport),\n    shouldTransformExportNamespaceFrom: !shouldSkipExportNamespaceFrom,\n    shouldParseTopLevelAwait: !api.caller || api.caller(supportsTopLevelAwait),\n  });\n  "),s("span",{staticClass:"hljs-comment"},[a._v("// 获取目标 plugin 名称")]),a._v("\n  "),s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" pluginNames = filterItems(\n    compatData,\n    include.plugins,\n    exclude.plugins,\n    transformTargets,\n    modulesPluginNames,\n    getOptionSpecificExcludesFor({ loose }),\n    pluginSyntaxMap,\n  );\n  removeUnnecessaryItems(pluginNames, overlappingPlugins);\n  "),s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" polyfillPlugins = getPolyfillPlugins({\n    useBuiltIns,\n    corejs,\n    polyfillTargets: targets,\n    include: include.builtIns,\n    exclude: exclude.builtIns,\n    proposals,\n    shippedProposals,\n    regenerator: pluginNames.has("),s("span",{staticClass:"hljs-string"},[a._v('"transform-regenerator"')]),a._v("),\n    debug,\n  });\n  "),s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" pluginUseBuiltIns = useBuiltIns !== "),s("span",{staticClass:"hljs-keyword"},[a._v("false")]),a._v(";\n  "),s("span",{staticClass:"hljs-comment"},[a._v("// 根据 pluginNames，返回一个 plugins 配置列表")]),a._v("\n  "),s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" plugins = Array.from(pluginNames)\n    .map(pluginName => {\n      "),s("span",{staticClass:"hljs-keyword"},[a._v("if")]),a._v(" (\n        pluginName === "),s("span",{staticClass:"hljs-string"},[a._v('"proposal-class-properties"')]),a._v(" ||\n        pluginName === "),s("span",{staticClass:"hljs-string"},[a._v('"proposal-private-methods"')]),a._v(" ||\n        pluginName === "),s("span",{staticClass:"hljs-string"},[a._v('"proposal-private-property-in-object"')]),a._v("\n      ) {\n        "),s("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" [\n          getPlugin(pluginName),\n          {\n            loose: loose\n              ? "),s("span",{staticClass:"hljs-string"},[a._v('"#__internal__@babel/preset-env__prefer-true-but-false-is-ok-if-it-prevents-an-error"')]),a._v("\n              : "),s("span",{staticClass:"hljs-string"},[a._v('"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error"')]),a._v(",\n          },\n        ];\n      }\n      "),s("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" [\n        getPlugin(pluginName),\n        { spec, loose, useBuiltIns: pluginUseBuiltIns },\n      ];\n    })\n    .concat(polyfillPlugins);\n  "),s("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" { plugins };\n});\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"14820"}},[a._v("这部分内容你可以与上一讲“core-js 及垫片理念：设计一个‘最完美’的 Polyfill 方案”相结合，相信你会对前端“按需 polyfill”有一个更加清晰的认知。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14821"}},[a._v("至于 Babel 家族的其他成员，相信你也一定见过 "),s("a",{attrs:{href:"https://babeljs.io/docs/en/babel-plugin-transform-runtime","data-nodeid":"15179"}},[a._v("@babel/plugin-transform-runtime")]),a._v("，它可以"),s("strong",{attrs:{"data-nodeid":"15189"}},[a._v("重复使用 Babel 注入的 helpers 函数")]),a._v("，达到"),s("strong",{attrs:{"data-nodeid":"15190"}},[a._v("节省代码大小")]),a._v("的目的。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14822"}},[a._v("比如，对于这样一段简单的代码：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"14823"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-class"},[s("span",{staticClass:"hljs-keyword"},[a._v("class")]),a._v(" "),s("span",{staticClass:"hljs-title"},[a._v("Person")])]),a._v("{}\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"14824"}},[a._v("Babel 在编译后，得到：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"14825"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-function"},[a._v("function "),s("span",{staticClass:"hljs-title"},[a._v("_instanceof")]),s("span",{staticClass:"hljs-params"},[a._v("(left, right)")]),a._v(" ")]),a._v("{\n  "),s("span",{staticClass:"hljs-keyword"},[a._v("if")]),a._v(" (right != "),s("span",{staticClass:"hljs-keyword"},[a._v("null")]),a._v(" && typeof Symbol !== "),s("span",{staticClass:"hljs-string"},[a._v('"undefined"')]),a._v(" &&   right[Symbol.hasInstance]) {\n    "),s("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" !!right[Symbol.hasInstance](left);\n  }\n  "),s("span",{staticClass:"hljs-keyword"},[a._v("else")]),a._v(" {\n    "),s("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" left "),s("span",{staticClass:"hljs-keyword"},[a._v("instanceof")]),a._v(" right;\n  }\n}\n"),s("span",{staticClass:"hljs-function"},[a._v("function "),s("span",{staticClass:"hljs-title"},[a._v("_classCallCheck")]),s("span",{staticClass:"hljs-params"},[a._v("(instance, Constructor)")]),a._v(" ")]),a._v("{\n  "),s("span",{staticClass:"hljs-keyword"},[a._v("if")]),a._v(" (!_instanceof(instance, Constructor)) { "),s("span",{staticClass:"hljs-keyword"},[a._v("throw")]),a._v(" "),s("span",{staticClass:"hljs-keyword"},[a._v("new")]),a._v(" TypeError("),s("span",{staticClass:"hljs-string"},[a._v('"Cannot call a class as a function"')]),a._v("); }\n}\n"),s("span",{staticClass:"hljs-keyword"},[a._v("var")]),a._v(" Person = "),s("span",{staticClass:"hljs-function"},[a._v("function "),s("span",{staticClass:"hljs-title"},[a._v("Person")]),s("span",{staticClass:"hljs-params"},[a._v("()")]),a._v(" ")]),a._v("{\n  _classCallCheck("),s("span",{staticClass:"hljs-keyword"},[a._v("this")]),a._v(", Person);\n};\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"14826"}},[a._v("其中"),s("code",{attrs:{"data-backticks":"1","data-nodeid":"15194"}},[a._v("_instanceof")]),a._v("和"),s("code",{attrs:{"data-backticks":"1","data-nodeid":"15196"}},[a._v("_classCallCheck")]),a._v("都是 Babel 内置的 helpers 函数。如果每个 class 编译结果都在代码中植入这些 helpers 具体内容，对产出代码体积就会有明显恶化影响。在启用 @babel/plugin-transform-runtime 插件后，上述代码的编译结果可以变为：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"14827"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-keyword"},[a._v("var")]),a._v(" _interopRequireDefault = require("),s("span",{staticClass:"hljs-string"},[a._v('"@babel/runtime/helpers/interopRequireDefault"')]),a._v(");\n"),s("span",{staticClass:"hljs-keyword"},[a._v("var")]),a._v(" _classCallCheck2 = _interopRequireDefault(require("),s("span",{staticClass:"hljs-string"},[a._v('"@babel/runtime/helpers/classCallCheck"')]),a._v("));\n"),s("span",{staticClass:"hljs-keyword"},[a._v("var")]),a._v(" Person = "),s("span",{staticClass:"hljs-function"},[a._v("function "),s("span",{staticClass:"hljs-title"},[a._v("Person")]),s("span",{staticClass:"hljs-params"},[a._v("()")]),a._v(" ")]),a._v("{\n  ("),s("span",{staticClass:"hljs-number"},[a._v("0")]),a._v(", _classCallCheck2."),s("span",{staticClass:"hljs-keyword"},[a._v("default")]),a._v(")("),s("span",{staticClass:"hljs-keyword"},[a._v("this")]),a._v(", Person);\n};\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"14828"}},[a._v("从上述代码我们可以看到，_classCallCheck 作为模块依赖被引入文件中，基于打包工具的 cache 能力，从而减少了产出代码体积。需要注意的是，观察以上代码，_classCallCheck2 这个 helper 由 "),s("a",{attrs:{href:"https://babeljs.io/docs/en/babel-runtime","data-nodeid":"15205"}},[a._v("@babel/runtime")]),a._v(" 给出，这就又由一条线，牵出来了 Babel 家族的另一个包：@babel/runtime。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14829"}},[s("strong",{attrs:{"data-nodeid":"15219"}},[a._v("@babel/runtime")]),a._v("含有 Babel 编译所需的一些运行时 helpers 函数，"),s("strong",{attrs:{"data-nodeid":"15220"}},[a._v("供业务代码引入模块化的 Babel helpers 函数")]),a._v("，同时它提供了 "),s("a",{attrs:{href:"https://www.npmjs.com/package/regenerator-runtime","data-nodeid":"15217"}},[a._v("regenerator-runtime")]),a._v("，对 generator 和 async 函数进行编译降级。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14830"}},[a._v("总结一下：")]),a._v(" "),s("ul",{attrs:{"data-nodeid":"14831"}},[s("li",{attrs:{"data-nodeid":"14832"}},[s("p",{attrs:{"data-nodeid":"14833"}},[a._v("@babel/plugin-transform-runtime 需要和 @babel/runtime 配合使用；")])]),a._v(" "),s("li",{attrs:{"data-nodeid":"14834"}},[s("p",{attrs:{"data-nodeid":"14835"}},[a._v("@babel/plugin-transform-runtime 用于编译时，作为 devDependencies 使用；")])]),a._v(" "),s("li",{attrs:{"data-nodeid":"14836"}},[s("p",{attrs:{"data-nodeid":"14837"}},[a._v("@babel/plugin-transform-runtime 将业务代码编译，引用 @babel/runtime 提供的 helpers，达到缩减编译产出体积的目的；")])]),a._v(" "),s("li",{attrs:{"data-nodeid":"14838"}},[s("p",{attrs:{"data-nodeid":"14839"}},[a._v("@babel/runtime 用于运行时，作为 dependencies 使用。")])])]),a._v(" "),s("p",{attrs:{"data-nodeid":"14840"}},[a._v("另外，@babel/plugin-transform-runtime 和 @babel/runtime 结合还有一个作用："),s("strong",{attrs:{"data-nodeid":"15231"}},[a._v("它除了可以对产出代码瘦身以外，还能避免污染全局作用域")]),a._v("。比如一个生成器函数：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"14841"}},[s("code",{attrs:{"data-language":"java"}},[a._v("function* foo() {}\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"14842"}},[a._v("正常经过 Babel 编译后，产出：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"14843"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-keyword"},[a._v("var")]),a._v(" _marked = [foo].map(regeneratorRuntime.mark);\n"),s("span",{staticClass:"hljs-function"},[a._v("function "),s("span",{staticClass:"hljs-title"},[a._v("foo")]),s("span",{staticClass:"hljs-params"},[a._v("()")]),a._v(" ")]),a._v("{\n  "),s("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" regeneratorRuntime.wrap(\n    function foo$(_context) {\n      "),s("span",{staticClass:"hljs-keyword"},[a._v("while")]),a._v(" ("),s("span",{staticClass:"hljs-number"},[a._v("1")]),a._v(") {\n        "),s("span",{staticClass:"hljs-keyword"},[a._v("switch")]),a._v(" ((_context.prev = _context.next)) {\n          "),s("span",{staticClass:"hljs-keyword"},[a._v("case")]),a._v(" "),s("span",{staticClass:"hljs-number"},[a._v("0")]),a._v(":\n          "),s("span",{staticClass:"hljs-keyword"},[a._v("case")]),a._v(" "),s("span",{staticClass:"hljs-string"},[a._v('"end"')]),a._v(":\n            "),s("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" _context.stop();\n        }\n      }\n    },\n    _marked["),s("span",{staticClass:"hljs-number"},[a._v("0")]),a._v("],\n    "),s("span",{staticClass:"hljs-keyword"},[a._v("this")]),a._v("\n  );\n}\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"14844"}},[a._v("其中 regeneratorRuntime 需要是一个全局变量，"),s("strong",{attrs:{"data-nodeid":"15238"}},[a._v("上述编译后代码污染了全局空间")]),a._v("。结合 @babel/plugin-transform-runtime 和 @babel/runtime，可以将上述代码转换为：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"14845"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-comment"},[a._v("// 特别命名为 _regenerator 和 _regenerator2,避免污染命名空间")]),a._v("\n"),s("span",{staticClass:"hljs-keyword"},[a._v("var")]),a._v(" _regenerator = require("),s("span",{staticClass:"hljs-string"},[a._v('"@babel/runtime/regenerator"')]),a._v(");\n"),s("span",{staticClass:"hljs-keyword"},[a._v("var")]),a._v(" _regenerator2 = _interopRequireDefault(_regenerator);\n"),s("span",{staticClass:"hljs-function"},[a._v("function "),s("span",{staticClass:"hljs-title"},[a._v("_interopRequireDefault")]),s("span",{staticClass:"hljs-params"},[a._v("(obj)")]),a._v(" ")]),a._v("{\n  "),s("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" obj && obj.__esModule ? obj : { "),s("span",{staticClass:"hljs-keyword"},[a._v("default")]),a._v(": obj };\n}\n"),s("span",{staticClass:"hljs-keyword"},[a._v("var")]),a._v(" _marked = [foo].map(_regenerator2."),s("span",{staticClass:"hljs-keyword"},[a._v("default")]),a._v(".mark);\n"),s("span",{staticClass:"hljs-comment"},[a._v("// 编译 await 为自执行的 generator 模式")]),a._v("\n"),s("span",{staticClass:"hljs-function"},[a._v("function "),s("span",{staticClass:"hljs-title"},[a._v("foo")]),s("span",{staticClass:"hljs-params"},[a._v("()")]),a._v(" ")]),a._v("{\n  "),s("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" _regenerator2."),s("span",{staticClass:"hljs-keyword"},[a._v("default")]),a._v(".wrap(\n    function foo$(_context) {\n      "),s("span",{staticClass:"hljs-keyword"},[a._v("while")]),a._v(" ("),s("span",{staticClass:"hljs-number"},[a._v("1")]),a._v(") {\n        "),s("span",{staticClass:"hljs-keyword"},[a._v("switch")]),a._v(" ((_context.prev = _context.next)) {\n          "),s("span",{staticClass:"hljs-keyword"},[a._v("case")]),a._v(" "),s("span",{staticClass:"hljs-number"},[a._v("0")]),a._v(":\n          "),s("span",{staticClass:"hljs-keyword"},[a._v("case")]),a._v(" "),s("span",{staticClass:"hljs-string"},[a._v('"end"')]),a._v(":\n            "),s("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" _context.stop();\n        }\n      }\n    },\n    _marked["),s("span",{staticClass:"hljs-number"},[a._v("0")]),a._v("],\n    "),s("span",{staticClass:"hljs-keyword"},[a._v("this")]),a._v("\n  );\n}\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"14846"}},[a._v("此时，regenerator 由 "),s("code",{attrs:{"data-backticks":"1","data-nodeid":"15240"}},[a._v('require("@babel/runtime/regenerator")')]),a._v("导出，且导出结果被赋值为一个文件作用域内的 _regenerator 变量，从而避免了污染。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14847"}},[a._v("理清了这层关系，相信你在使用 Babel 家族成员时，能够更准确地从原理层面理解各项配置功能。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14848"}},[a._v("最后，我们再梳理其他几个重要的 Babel 家族成员及其能力和实现原理。")]),a._v(" "),s("ul",{attrs:{"data-nodeid":"14849"}},[s("li",{attrs:{"data-nodeid":"14850"}},[s("p",{attrs:{"data-nodeid":"14851"}},[s("a",{attrs:{href:"https://babeljs.io/docs/en/plugins","data-nodeid":"15248"}},[a._v("@babel/plugin")]),a._v("是 Babel 插件集合。")])]),a._v(" "),s("li",{attrs:{"data-nodeid":"14852"}},[s("p",{attrs:{"data-nodeid":"14853"}},[s("strong",{attrs:{"data-nodeid":"15256"}},[a._v("@babel/plugin-syntax-* 是 Babel 的语法插件")]),a._v("。它的作用是扩展 @babel/parser 的一些能力，提供给工程使用。比如 @babel/plugin-syntax-top-level-await 插件，提供了使用 top level await 新特性的能力。")])]),a._v(" "),s("li",{attrs:{"data-nodeid":"14854"}},[s("p",{attrs:{"data-nodeid":"14855"}},[s("strong",{attrs:{"data-nodeid":"15263"}},[a._v("@babel/plugin-proposal-* 用于编译转换在提议阶段的语言特性")]),a._v("。")])]),a._v(" "),s("li",{attrs:{"data-nodeid":"14856"}},[s("p",{attrs:{"data-nodeid":"14857"}},[s("strong",{attrs:{"data-nodeid":"15270"}},[a._v("@babel/plugin-transform-* 是 Babel 的转换插件")]),a._v("。比如简单的 @babel/plugin-transform-react-display-name 插件，可以自动适配 React 组件 DisplayName，比如：")])])]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"14858"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-keyword"},[a._v("var")]),a._v(" foo = React.createClass({}); "),s("span",{staticClass:"hljs-comment"},[a._v("// React <= 15")]),a._v("\n"),s("span",{staticClass:"hljs-keyword"},[a._v("var")]),a._v(" bar = createReactClass({});  "),s("span",{staticClass:"hljs-comment"},[a._v("// React 16+")]),a._v("\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"14859"}},[a._v("上述调用，经过 @babel/plugin-transform-react-display-name，可以被编译为：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"14860"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-keyword"},[a._v("var")]),a._v(" foo = React.createClass({\n  displayName: "),s("span",{staticClass:"hljs-string"},[a._v('"foo"')]),a._v("\n}); "),s("span",{staticClass:"hljs-comment"},[a._v("// React <= 15")]),a._v("\n"),s("span",{staticClass:"hljs-keyword"},[a._v("var")]),a._v(" bar = createReactClass({\n  displayName: "),s("span",{staticClass:"hljs-string"},[a._v('"bar"')]),a._v("\n}); "),s("span",{staticClass:"hljs-comment"},[a._v("// React 16+")]),a._v("\n")])]),a._v(" "),s("ul",{attrs:{"data-nodeid":"14861"}},[s("li",{attrs:{"data-nodeid":"14862"}},[s("p",{attrs:{"data-nodeid":"14863"}},[s("a",{attrs:{href:"https://babeljs.io/docs/en/babel-template","data-nodeid":"15274"}},[a._v("@babel/template")]),a._v(" 封装了基于 AST 的模板能力，可以将字符串代码转换为 AST。比如在生成一些辅助代码（helper）时会用到这个库。")])]),a._v(" "),s("li",{attrs:{"data-nodeid":"14864"}},[s("p",{attrs:{"data-nodeid":"14865"}},[a._v("@"),s("a",{attrs:{href:"https://babeljs.io/docs/en/babel-node","data-nodeid":"15279"}},[a._v("babel/node")]),a._v(" 类似 Node.js Cli，@babel/node 提供在命令行执行高级语法的环境，也就是说，相比于 Node.js Cli，它加入了对更多特性的支持。")])]),a._v(" "),s("li",{attrs:{"data-nodeid":"14866"}},[s("p",{attrs:{"data-nodeid":"14867"}},[s("a",{attrs:{href:"https://babeljs.io/docs/en/babel-register","data-nodeid":"15283"}},[a._v("@babel/register")]),a._v(" 实际上是为 require 增加了一个 hook，使用之后，所有被 Node.js 引用的文件都会先被 Babel 转码。")])])]),a._v(" "),s("p",{attrs:{"data-nodeid":"14868"}},[s("strong",{attrs:{"data-nodeid":"15289"}},[a._v("这里请注意")]),a._v("@babel/node 和 @babel/register，都是在运行时进行编译转换，因此运行时性能上会有影响。在生产环境中，我们一般不直接使用。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14869"}},[a._v("上述内容看似枯燥，涉及了一般对于业务开发者黑盒的编译产出、源码层面的实现原理、各个包直接的分工协调和组织，可能对于你来说，做到真正理解并非一夕之功。接下来，我们从更加宏观地角度来加深认识。")]),a._v(" "),s("h3",{attrs:{"data-nodeid":"14870"}},[a._v("Babel 工程生态架构设计和分层理念")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14871"}},[a._v("了解了上述内容，也许你会想问，在平时开发中出镜率极高的 babel-loader 怎么没有看到？事实上，Babel 的生态是内聚的，也是开放的。我们通过 Babel 对代码的编译过程，可以从微观上缩小为前端基建的一个环节，这个环节融入整个工程中，也需要和其他环节相互配合。而 "),s("a",{attrs:{href:"https://github.com/babel/babel-loader","data-nodeid":"15295"}},[a._v("babel-loader")]),a._v(" "),s("strong",{attrs:{"data-nodeid":"15301"}},[a._v("就是 Babel 结合 Webpack，融入整个基建环节的例子")]),a._v("。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14872"}},[a._v("在 Webpack 编译生命周期中，babel-loader 作为一个 Webpack loader，承担着文件编译职责。我们暂且将 babel-loader 放到 Babel 家族中，先来看看下面这张“全家福”。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14873"}},[s("img",{attrs:{src:"https://s0.lgstatic.com/i/image2/M01/04/5A/Cip5yF_tojyAfvQeAAMW8bbGBAY698.png",alt:"Drawing 2.png","data-nodeid":"15305"}})]),a._v(" "),s("div",{attrs:{"data-nodeid":"14874"}},[s("p",{staticStyle:{"text-align":"center"}},[a._v("Babel 家族分层模型图")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"14875"}},[a._v("如上图所示，Babel 生态基本按照：辅助层 → 基础层 → 胶水层 → 应用层，四级结构完成。其中部分环节角色的界定有些模糊，比如 @babel/highlight 也可以作为应用层工具出现。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14876"}},[s("strong",{attrs:{"data-nodeid":"15315"}},[a._v("基础层提供了基础的编译能力")]),a._v("，完成分词、解析 AST、生成产出代码的工作。基础层中，我们将一些抽象能力下沉为辅助层，这些抽象能力被基础层使用。同时，在基础层之上，我们构建了如 @babel/preset-env 等预设/插件能力，这些类似“胶水”的包，完成了代码编译降级所需补丁的构建、运行时逻辑的模块化抽象等工作。在"),s("strong",{attrs:{"data-nodeid":"15316"}},[a._v("最上层，Babel 生态提供了终端命令行")]),a._v("、Webpack loader、浏览器端编译等应用级别的能力。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14877"}},[a._v("分层的意义在于应用，下面我们从一个应用场景来具体分析，看看 Babel 工程化设计能够给我们带来什么样的启示。")]),a._v(" "),s("h4",{attrs:{"data-nodeid":"14878"}},[a._v("从 @babel/eslint-parser 看 Babel 工程化启示")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14879"}},[a._v("相信你一定认识 "),s("a",{attrs:{href:"https://github.com/eslint/eslint","data-nodeid":"15322"}},[a._v("ESLint")]),a._v("，它可以用来帮助我们"),s("strong",{attrs:{"data-nodeid":"15328"}},[a._v("审查 ECMAScript/JavaScript 代码")]),a._v("，其原理也是基于 AST 语法分析，进行规则校验。那这和我们的 Babel 有什么关联呢？")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14880"}},[a._v("试想一下，如果我们的业务代码使用了较多的试验性 ECMAScript 语言特性，那么 ESLint 如何识别这些新的语言特性，做到新特性的代码检查呢？")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14881"}},[a._v("事实上，"),s("strong",{attrs:{"data-nodeid":"15339"}},[a._v("ESLint 的解析工具只支持最终进入 ECMAScript 语言标准的特性")]),a._v("，如果想对试验性特性或者 Flow/TypeScript 进行代码检查，ESLint 提供了更换 parser 的能力。而 "),s("a",{attrs:{href:"https://github.com/babel/babel/tree/main/eslint/babel-eslint-parser","data-nodeid":"15337"}},[a._v("@babel/eslint-parser")]),a._v(" 就是配合 ESLint 检验合法 Babel 代码的解析器。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14882"}},[a._v("实现原理也很简单，ESLint 支持 "),s("a",{attrs:{href:"https://eslint.org/docs/developer-guide/working-with-custom-parsers","data-nodeid":"15343"}},[a._v("custom-parser")]),a._v("，它允许我们使用自定义的第三方编译器，比如下面是一个使用了 espree 作为一个 custom-parser 的场景：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"14883"}},[s("code",{attrs:{"data-language":"java"}},[a._v("{\n    "),s("span",{staticClass:"hljs-string"},[a._v('"parser"')]),a._v(": "),s("span",{staticClass:"hljs-string"},[a._v('"./path/to/awesome-custom-parser.js"')]),a._v("\n}\n"),s("span",{staticClass:"hljs-keyword"},[a._v("var")]),a._v(" espree = require("),s("span",{staticClass:"hljs-string"},[a._v('"espree"')]),a._v(");\n"),s("span",{staticClass:"hljs-comment"},[a._v("// awesome-custom-parser.js")]),a._v("\n"),s("span",{staticClass:"hljs-keyword"},[a._v("exports")]),a._v(".parseForESLint = function(code, options) {\n    "),s("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" {\n        ast: espree.parse(code, options),\n        services: {\n            foo: function() {\n                console.log("),s("span",{staticClass:"hljs-string"},[a._v('"foo"')]),a._v(");\n            }\n        },\n        scopeManager: "),s("span",{staticClass:"hljs-keyword"},[a._v("null")]),a._v(",\n        visitorKeys: "),s("span",{staticClass:"hljs-keyword"},[a._v("null")]),a._v("\n    };\n};\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"14884"}},[a._v("@babel/eslint-parser"),s("a",{attrs:{href:"https://github.com/babel/babel/blob/main/eslint/babel-eslint-parser/src/index.js","data-nodeid":"15348"}},[a._v("源码")]),a._v("的实现，保留了相同的模板，它通过自定的 parser，最终返回了 ESLint 所需要的 AST 内容，根据具体的 ESLint rules 进行代码审查：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"14885"}},[s("code",{attrs:{"data-language":"java"}},[a._v(" "),s("span",{staticClass:"hljs-function"},[a._v("export function "),s("span",{staticClass:"hljs-title"},[a._v("parseForESLint")]),s("span",{staticClass:"hljs-params"},[a._v("(code, options = {})")]),a._v(" ")]),a._v("{\n  "),s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" normalizedOptions = normalizeESLintConfig(options);\n  "),s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" ast = baseParse(code, normalizedOptions);\n  "),s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" scopeManager = analyzeScope(ast, normalizedOptions);\n  "),s("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" { ast, scopeManager, visitorKeys };\n}\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"14886"}},[a._v("上述代码中，ast 是 "),s("a",{attrs:{href:"https://github.com/estree/estree","data-nodeid":"15353"}},[a._v("estree")]),a._v(" 兼容的格式，可以被 ESLint 理解。"),s("strong",{attrs:{"data-nodeid":"15359"}},[a._v("visitor Keys 定义了自定义的编译 AST 能力，ScopeManager 定义了新（试验）特性自定义的作用域")]),a._v("。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14887"}},[a._v("由此可见，Babel 生态和前端工程中的各个环节都是打通开放的。它"),s("strong",{attrs:{"data-nodeid":"15365"}},[a._v("可以以 babel-loader 的形式和 Webpack 协作，也可以以 @babel/eslint-parser 的方式和 ESLint 合作")]),a._v("。现代化的前端工程是一环扣一环的，作为工程链上的任意一环，插件化能力、协作能力将是设计的重点和关键。")]),a._v(" "),s("h3",{attrs:{"data-nodeid":"14888"}},[a._v("总结")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14889"}},[a._v("作为前端开发者，你可能会被如何配置 Babel、Webpack 这些工具所困扰，出现“配置到自己的项目中，就各种报错”的问题。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14890"}},[a._v("此时，你可能花费了一天的时间，通过 Google 找到了最终的配置解法，但是解决之道却没搞清楚，得过且过，今后依然被类似的困境袭扰；你可能看过一些关于 Babel 插件和原理的文章，自以为掌握了 AST、窥探了编译，但真正手写一个分词器 Tokenizer 就一头雾水。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14891"}},[a._v("我们需要对 Babel 进行系统学习，学习目的是了解其工程化设计，方便我们在前端基建的过程中做到“最佳配置实践”，做到“不再被编译报错”所困扰。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"14892"}},[s("img",{attrs:{src:"https://s0.lgstatic.com/i/image2/M01/04/5C/CgpVE1_tolmAct9gAAFdbBBSMZI815.png",alt:"Drawing 3.png","data-nodeid":"15372"}})]),a._v(" "),s("p",{attrs:{"data-nodeid":"14893"}},[a._v("希望本讲能对大家的学习和工作带来一些启发，更多相关内容我们会在“从实战出发，从 0 到 1 构建一个符合标准的公共库”“如何理解 AST 实现和编译原理？”等小节中继续探索！")]),a._v(" "),s("hr"),a._v(" "),s("h3",{attrs:{id:"精选评论"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#精选评论"}},[a._v("#")]),a._v(" 精选评论")]),a._v(" "),s("h5",{attrs:{id:"_0929"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_0929"}},[a._v("#")]),a._v(" **0929")]),a._v(" "),s("blockquote",[s("p",[a._v("内容质量很高，想问下老师babel相关的内容如何自学啊？比如traverse如何去操作ast")])]),a._v(" "),s("h6",{attrs:{id:"讲师回复"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复"}},[a._v("#")]),a._v("     讲师回复")]),a._v(" "),s("blockquote",[s("p",[a._v("    看官网，看源码。能把官网吃透，你就是个专家了，就比我强……")])]),a._v(" "),s("h5",{attrs:{id:"伟"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#伟"}},[a._v("#")]),a._v(" **伟")]),a._v(" "),s("blockquote",[s("p",[a._v("看了后 我觉得我的webpack 太菜了")])]),a._v(" "),s("h6",{attrs:{id:"编辑回复"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编辑回复"}},[a._v("#")]),a._v("     编辑回复")]),a._v(" "),s("blockquote",[s("p",[a._v("    别担心，现在学也来得及，毕竟知识是慢慢积累来的~")])]),a._v(" "),s("h5",{attrs:{id:"宁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#宁"}},[a._v("#")]),a._v(" *宁")]),a._v(" "),s("blockquote",[s("p",[a._v("太高级了~~~")])]),a._v(" "),s("h5",{attrs:{id:"_1539"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1539"}},[a._v("#")]),a._v(" **1539")]),a._v(" "),s("blockquote",[s("p",[a._v("用了babel理论上就能让代码在所有浏览器都能跑么")])]),a._v(" "),s("h6",{attrs:{id:"讲师回复-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-2"}},[a._v("#")]),a._v("     讲师回复")]),a._v(" "),s("blockquote",[s("p",[a._v("    得看你降级到哪个兼容版本")])]),a._v(" "),s("h5",{attrs:{id:"政"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#政"}},[a._v("#")]),a._v(" **政")]),a._v(" "),s("blockquote",[s("p",[a._v("内容很棒，师傅引进门修行看个人，后面需要参考这个思路来更细化的了解各个层级和包的功能了。原来visitorsKeys 是额外引入的包，我说怎么文章内的函数体内找不到这个变量。点开源码搜到了ps想问一下：为什么拉钩这里评论区精选留言筛选这么严格？感觉没有什么人在讨论")])]),a._v(" "),s("h6",{attrs:{id:"编辑回复-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编辑回复-2"}},[a._v("#")]),a._v("     编辑回复")]),a._v(" "),s("blockquote",[s("p",[a._v("    不是审核太过严格，所有小伙伴的评论、疑问都放出来了，但可能针对每一讲的评论只会在该讲出现，小编很委屈呐~")])])])}),[],!1,null,null,null);s.default=n.exports}}]);