(window.webpackJsonp=window.webpackJsonp||[]).push([[172],{507:function(a,s,t){"use strict";t.r(s);var n=t(4),e=Object(n.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("p",{attrs:{"data-nodeid":"929"}},[a._v("前两讲我们介绍了前端开发领域常见的开发模式和封装思想，这一讲，我们将该主题升华，聊一聊软件开发灵活性和高定制性这个话题。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"930"}},[a._v("业务需求是烦琐多变的，因此开发灵活性至关重要，这直接决定了开发效率，而与灵活性相伴相生的话题就是定制性。本讲主要从设计模式和函数式思想入手，从实际代码出发，来阐释灵活性和高定制性。")]),a._v(" "),s("h3",{attrs:{"data-nodeid":"931"}},[a._v("设计模式")]),a._v(" "),s("p",{attrs:{"data-nodeid":"932"}},[a._v("设计模式——我认为这是一个“一言难尽”的概念。维基百科对设计模式的定义为：")]),a._v(" "),s("blockquote",{attrs:{"data-nodeid":"933"}},[s("p",{attrs:{"data-nodeid":"934"}},[a._v("在软件工程中，设计模式（Design Pattern）是对软件设计中普遍存在（反复出现）的各种问题，所提出的解决方案。这个术语是由埃里希·伽玛（Erich Gamma）等人在 1990 年代从建筑设计领域引入到计算机科学的。设计模式并不是直接用来完成代码的编写，而是描述在各种不同情况下，要怎么解决问题的一种方案。")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"935"}},[a._v("设计模式一般认为有 23 种，这 23 种设计模式的本质是面向对象设计原则的实际运用，是对"),s("strong",{attrs:{"data-nodeid":"1038"}},[a._v("类的封装性、继承性和多态性，以及类的关联关系和组合关系")]),a._v("的总结应用。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"936"}},[a._v("事实上，设计模式是一种经验总结，它就是一套“兵法”，最终是为了更好的代码重用性、可读性、可靠性、可维护性。我认为设计模式不能只停留在理论上，而是应该结合到实际代码当中。在平常开发中，“也许你不知道，但是已经在使用设计模式了”。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"937"}},[a._v("下面我们将从前端中最常见的两种设计模式展开讲解。")]),a._v(" "),s("h4",{attrs:{"data-nodeid":"938"}},[a._v("代理模式")]),a._v(" "),s("p",{attrs:{"data-nodeid":"939"}},[a._v("代理模式大家应该都不陌生，ES.next 提供的 Proxy 特性让我们实现代理模式变得更加容易。关于 Proxy 特性的使用这些基础内容这里不过多赘述，我们直接来看一些代理模式的应用场景。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"940"}},[a._v("一个常见的代理模式应用场景是针对计算成本比较高的函数，我们可以"),s("strong",{attrs:{"data-nodeid":"1048"}},[a._v("通过对函数进行代理，来缓存函数对应参数的计算返回结果")]),a._v("。在函数执行时，优先使用缓存值，否则返回执行计算值，如下代码：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"941"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" getCacheProxy = (fn, cache = "),s("span",{staticClass:"hljs-keyword"},[a._v("new")]),a._v(" Map()) => \n  "),s("span",{staticClass:"hljs-comment"},[a._v("// 代理函数 fn")]),a._v("\n  "),s("span",{staticClass:"hljs-keyword"},[a._v("new")]),a._v(" Proxy(fn, {\n  \t"),s("span",{staticClass:"hljs-comment"},[a._v("// 代理 fn 的调用方法")]),a._v("\n    apply(target, context, args) {\n    \t"),s("span",{staticClass:"hljs-comment"},[a._v("// 将调用参数字符串化，方便作为存储 key")]),a._v("\n      "),s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" argsString = args.join("),s("span",{staticClass:"hljs-string"},[a._v("' '")]),a._v(")\n      "),s("span",{staticClass:"hljs-comment"},[a._v("// 判断是否存在缓存，如果存在直接返回缓存值")]),a._v("\n      "),s("span",{staticClass:"hljs-keyword"},[a._v("if")]),a._v(" (cache.has(argsString)) {\n        "),s("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" cache.get(argsString)\n      }\n      "),s("span",{staticClass:"hljs-comment"},[a._v("// 执行 fn 方法，得到计算结果")]),a._v("\n      "),s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" result = fn(...args)\n      "),s("span",{staticClass:"hljs-comment"},[a._v("// 存储相关计算结果")]),a._v("\n      cache.set(argsString, result)\n      "),s("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" result\n    }\n  })\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"942"}},[a._v("利用上述实现思想，我们还可以很轻松地实现一个根据调用频率来进行截流的函数代理，如下代码实现：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"943"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" createThrottleProxy = (fn, timer) => {\n  "),s("span",{staticClass:"hljs-comment"},[a._v("// 计算时间差")]),a._v("\n  let last = Date.now() - timer\n  "),s("span",{staticClass:"hljs-comment"},[a._v("// 代理函数 fn")]),a._v("\n  "),s("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" "),s("span",{staticClass:"hljs-keyword"},[a._v("new")]),a._v(" Proxy(fn, {\n  \t "),s("span",{staticClass:"hljs-comment"},[a._v("// 代理函数调用")]),a._v("\n    apply(target, context, args) {\n    \t"),s("span",{staticClass:"hljs-comment"},[a._v("// 计算距离上次调用的时间差，如果大于 rate 则直接调用")]),a._v("\n      "),s("span",{staticClass:"hljs-keyword"},[a._v("if")]),a._v(" (Date.now() - last >= rate) {\n        fn(args)\n        "),s("span",{staticClass:"hljs-comment"},[a._v("// 记录此次调用时间")]),a._v("\n        last = Date.now()\n      }\n    }\n  })\n}\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"944"}},[a._v("我们再看一个 jQuery 中的一个例子，jQuery 中"),s("code",{attrs:{"data-backticks":"1","data-nodeid":"1051"}},[a._v("$.proxy()")]),a._v("方法接受一个已有的函数，并返回一个带有特定上下文的新函数。比如对于向一个特定对象的元素添加事件回调，如下代码：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"945"}},[s("code",{attrs:{"data-language":"java"}},[a._v("$( "),s("span",{staticClass:"hljs-string"},[a._v('"button"')]),a._v(" ).on( "),s("span",{staticClass:"hljs-string"},[a._v('"click"')]),a._v(", function () {\n  setTimeout(function () {\n    $("),s("span",{staticClass:"hljs-keyword"},[a._v("this")]),a._v(").addClass( "),s("span",{staticClass:"hljs-string"},[a._v('"active"')]),a._v(" );\n  });\n});\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"946"}},[a._v("上述代码中的"),s("code",{attrs:{"data-backticks":"1","data-nodeid":"1054"}},[a._v("$(this)")]),a._v("因为是在"),s("code",{attrs:{"data-backticks":"1","data-nodeid":"1056"}},[a._v("setTimeout")]),a._v("中执行，不再是预期之中的“当前触发事件的元素”，我们可以存储 this 指向来完成：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"947"}},[s("code",{attrs:{"data-language":"java"}},[a._v("$( "),s("span",{staticClass:"hljs-string"},[a._v('"button"')]),a._v(" ).on( "),s("span",{staticClass:"hljs-string"},[a._v('"click"')]),a._v(", function () {\n  "),s("span",{staticClass:"hljs-keyword"},[a._v("var")]),a._v(" that = $("),s("span",{staticClass:"hljs-keyword"},[a._v("this")]),a._v(")\n  setTimeout(function () {\n    that.addClass( "),s("span",{staticClass:"hljs-string"},[a._v('"active"')]),a._v(" );\n  });\n});\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"948"}},[a._v("也可以使用 jQuey 中的代理方法。如下代码：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"949"}},[s("code",{attrs:{"data-language":"java"}},[a._v("$( "),s("span",{staticClass:"hljs-string"},[a._v('"button"')]),a._v(" ).on( "),s("span",{staticClass:"hljs-string"},[a._v('"click"')]),a._v(", function () {\n    setTimeout($.proxy( unction () {\n        "),s("span",{staticClass:"hljs-comment"},[a._v("// 这里的 this 指向正确")]),a._v("\n        $("),s("span",{staticClass:"hljs-keyword"},[a._v("this")]),a._v(").addClass( "),s("span",{staticClass:"hljs-string"},[a._v('"active"')]),a._v(" );\n    }, "),s("span",{staticClass:"hljs-keyword"},[a._v("this")]),a._v("), "),s("span",{staticClass:"hljs-number"},[a._v("500")]),a._v(");\n});\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"950"}},[a._v("其实，jQuery 源码中"),s("code",{attrs:{"data-backticks":"1","data-nodeid":"1060"}},[a._v("$.proxy")]),a._v("的实现也并不困难：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"951"}},[s("code",{attrs:{"data-language":"java"}},[a._v("proxy: function( fn, context ) {\n  "),s("span",{staticClass:"hljs-comment"},[a._v("// ...")]),a._v("\n  "),s("span",{staticClass:"hljs-comment"},[a._v("// 模拟 bind 方法")]),a._v("\n  "),s("span",{staticClass:"hljs-keyword"},[a._v("var")]),a._v(" args = slice.call(arguments, "),s("span",{staticClass:"hljs-number"},[a._v("2")]),a._v("),\n    proxy = function() {\n      "),s("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" fn.apply( context, args.concat( slice.call( arguments ) ) );\n    };\n  "),s("span",{staticClass:"hljs-comment"},[a._v("// 这里的做法主要为了使得 proxy 全局唯一，以便后续删除")]),a._v("\n  proxy.guid = fn.guid = fn.guid || proxy.guid || jQuery.guid++;\n  "),s("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" proxy;\n}\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"952"}},[a._v("上述代码中我们模拟了"),s("code",{attrs:{"data-backticks":"1","data-nodeid":"1063"}},[a._v("bind")]),a._v("方法，以保证 this 上下文的准确。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"953"}},[a._v("事实上，代理模式在前端中的使用场景非常多。我们熟悉的 Vue 框架，为了完成对数据的拦截和代理，以便结合观察者模式，对数据变化进行响应，在最新版本中，也使用了 Proxy 特性，这些都是代理模式的典型应用。")]),a._v(" "),s("h4",{attrs:{"data-nodeid":"954"}},[a._v("装饰者模式")]),a._v(" "),s("p",{attrs:{"data-nodeid":"955"}},[a._v("简单来说，装饰者模式就是"),s("strong",{attrs:{"data-nodeid":"1072"}},[a._v("在不改变原对象的基础上，对其对象进行包装和拓展，使原对象能够应对更加复杂的需求")]),a._v("。这有点像高阶函数，因此在前端开发中很常见，如下面代码：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"956"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-keyword"},[a._v("import")]),a._v(" React, { Component } from "),s("span",{staticClass:"hljs-string"},[a._v("'react'")]),a._v("\n"),s("span",{staticClass:"hljs-keyword"},[a._v("import")]),a._v(" {connect} from "),s("span",{staticClass:"hljs-string"},[a._v("'react-redux'")]),a._v("\n"),s("span",{staticClass:"hljs-class"},[s("span",{staticClass:"hljs-keyword"},[a._v("class")]),a._v(" "),s("span",{staticClass:"hljs-title"},[a._v("App")]),a._v(" "),s("span",{staticClass:"hljs-keyword"},[a._v("extends")]),a._v(" "),s("span",{staticClass:"hljs-title"},[a._v("Component")]),a._v(" ")]),a._v("{\n render() {\n  "),s("span",{staticClass:"hljs-comment"},[a._v("//...")]),a._v("\n }\n}\n"),s("span",{staticClass:"hljs-function"},[a._v("export "),s("span",{staticClass:"hljs-keyword"},[a._v("default")]),a._v(" "),s("span",{staticClass:"hljs-title"},[a._v("connect")]),s("span",{staticClass:"hljs-params"},[a._v("(mapStateToProps,actionCreators)")]),s("span",{staticClass:"hljs-params"},[a._v("(App)")])]),a._v(";\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"957"}},[a._v("react-redux 类库中的"),s("code",{attrs:{"data-backticks":"1","data-nodeid":"1074"}},[a._v("connect")]),a._v("方法，对相关 React 组件进行包装，以拓展新的 Props。另外，这种方法在 ant-design 中也有非常典型的应用，如下面代码：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"958"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-class"},[s("span",{staticClass:"hljs-keyword"},[a._v("class")]),a._v(" "),s("span",{staticClass:"hljs-title"},[a._v("CustomizedForm")]),a._v(" "),s("span",{staticClass:"hljs-keyword"},[a._v("extends")]),a._v(" "),s("span",{staticClass:"hljs-title"},[a._v("React")]),a._v("."),s("span",{staticClass:"hljs-title"},[a._v("Component")]),a._v(" ")]),a._v("{}\nCustomizedForm = Form.create({})(CustomizedForm)\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"959"}},[a._v("如上代码，我们将一个 React 组件进行“装饰”，使其获得了表单组件的一些特性。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"960"}},[a._v("事实上，我们将上述介绍的两种模式相结合，很容易衍生出 AOP 面向切面编程的概念。如下代码：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"961"}},[s("code",{attrs:{"data-language":"java"}},[a._v("Function.prototype.before = function(fn) {\n  "),s("span",{staticClass:"hljs-comment"},[a._v("// 函数本身")]),a._v("\n  "),s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" self = "),s("span",{staticClass:"hljs-function"},[s("span",{staticClass:"hljs-keyword"},[a._v("this")]),a._v("\n  return "),s("span",{staticClass:"hljs-title"},[a._v("function")]),s("span",{staticClass:"hljs-params"},[a._v("()")]),a._v(" ")]),a._v("{\n  \t "),s("span",{staticClass:"hljs-comment"},[a._v("// 执行 self 函数前，需要执行的函数 fn")]),a._v("\n    fn.apply("),s("span",{staticClass:"hljs-keyword"},[a._v("new")]),a._v("(self), arguments)\n    "),s("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" self.apply("),s("span",{staticClass:"hljs-keyword"},[a._v("new")]),a._v("(self), arguments)\n  }\n}\nFunction.prototype.after = function(fn) {\n  "),s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" self = "),s("span",{staticClass:"hljs-function"},[s("span",{staticClass:"hljs-keyword"},[a._v("this")]),a._v("\n  return "),s("span",{staticClass:"hljs-title"},[a._v("function")]),s("span",{staticClass:"hljs-params"},[a._v("()")]),a._v(" ")]),a._v("{\n  \t "),s("span",{staticClass:"hljs-comment"},[a._v("// 先执行 self 函数")]),a._v("\n    self.apply("),s("span",{staticClass:"hljs-keyword"},[a._v("new")]),a._v("(self), arguments)\n    "),s("span",{staticClass:"hljs-comment"},[a._v("// 执行 self 函数后，需要执行的函数 fn")]),a._v("\n    "),s("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" fn.apply("),s("span",{staticClass:"hljs-keyword"},[a._v("new")]),a._v("(self), arguments)\n  }\n}\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"962"}},[a._v("如上代码，我们对函数原型进行了扩展，在函数调用前后分别调用了相关切面方法。一个典型的场景就是对表单提交值进行验证。如下代码：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"963"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" validate = function(){\n  "),s("span",{staticClass:"hljs-comment"},[a._v("// 表单验证逻辑")]),a._v("\n}\n"),s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" formSubmit = function() {\n  "),s("span",{staticClass:"hljs-comment"},[a._v("// 表单提交逻辑")]),a._v("\n  ajax( "),s("span",{staticClass:"hljs-string"},[a._v("'http:// xxx.com/login'")]),a._v(", param )\n}\nsubmitBtn.onclick = function() {\n  formSubmit.before( validate )\n}\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"964"}},[a._v("至此，我们对前端中常见的两种设计模式进行了分析，实际上，在前端中还处处可见观察者模式等经典设计模式的应用，我们将在下一讲中，进行更多说明。")]),a._v(" "),s("h3",{attrs:{"data-nodeid":"965"}},[a._v("函数式思想应用")]),a._v(" "),s("p",{attrs:{"data-nodeid":"966"}},[a._v("前面我们介绍了设计模式相关内容，事实上，设计模式和面向对象话题相伴相生，而面向对象和函数式思想“相互对立”，互为补充。函数式思想在前端领域同样应用颇多，这里我们简单对函数式思想的基础应用进行说明。")]),a._v(" "),s("h4",{attrs:{"data-nodeid":"967"}},[a._v("函数组合的简单应用")]),a._v(" "),s("p",{attrs:{"data-nodeid":"968"}},[a._v("纯函数是指：")]),a._v(" "),s("blockquote",{attrs:{"data-nodeid":"969"}},[s("p",{attrs:{"data-nodeid":"970"}},[a._v("一个函数如果输入参数确定，输出结果是唯一确定的，那么它就是纯函数。")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"971"}},[a._v("同时，需要强调的是"),s("strong",{attrs:{"data-nodeid":"1090"}},[a._v("纯函数不能修改外部变量，不能调用 Math.radom() 方法以及发送异步请求等")]),a._v("，因为这些操作都不具有确定性，可能会产生副作用。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"972"}},[a._v("纯函数是函数式编程中最基本的概念。另一个基本概念是——高阶函数：")]),a._v(" "),s("blockquote",{attrs:{"data-nodeid":"973"}},[s("p",{attrs:{"data-nodeid":"974"}},[a._v("高阶函数体现了“函数是第一等公民”，它是指这样的一类函数：该函数接受一个函数作为参数，返回另外一个函数。")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"975"}},[a._v("我们来看一个例子："),s("code",{attrs:{"data-backticks":"1","data-nodeid":"1094"}},[a._v("filterLowerThan10")]),a._v("这个函数接受一个数组作为参数，它会挑选出数组中数值小于 10 的项目，所有符合条件的值都会构成新数组被返回：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"976"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" filterLowerThan10 = array => {\n    let result = []\n    "),s("span",{staticClass:"hljs-keyword"},[a._v("for")]),a._v(" (let i = "),s("span",{staticClass:"hljs-number"},[a._v("0")]),a._v(", length = array.length; i < length; i++) {\n        let currentValue = array[i]\n        "),s("span",{staticClass:"hljs-keyword"},[a._v("if")]),a._v(" (currentValue < "),s("span",{staticClass:"hljs-number"},[a._v("10")]),a._v(") result.push(currentValue)\n    }\n    "),s("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" result\n}\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"977"}},[a._v("另外一个需求，挑选出数组中非数值项目，所有符合条件的值都会构成新数组被返回，如下"),s("code",{attrs:{"data-backticks":"1","data-nodeid":"1097"}},[a._v("filterNaN")]),a._v("函数：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"978"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" filterNaN = array => {\n    let result = []\n    "),s("span",{staticClass:"hljs-keyword"},[a._v("for")]),a._v(" (let i = "),s("span",{staticClass:"hljs-number"},[a._v("0")]),a._v(", length = array.length; i < length; i++) {\n        let currentValue = array[i]\n        "),s("span",{staticClass:"hljs-keyword"},[a._v("if")]),a._v(" (isNaN(currentValue)) result.push(currentValue)\n    }\n    "),s("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" result\n}\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"979"}},[a._v("上面两个函数都是比较典型的纯函数，不够优雅的一点是 filterLowerThan10 和 filterNaN"),s("strong",{attrs:{"data-nodeid":"1104"}},[a._v("都有遍历的逻辑，都存在了重复的 for 循环")]),a._v("。它们本质上都是遍历一个列表，并用给定的条件过滤列表。那么我们能否用函数式的思想，将遍历和筛选解耦呢？")]),a._v(" "),s("p",{attrs:{"data-nodeid":"980"}},[a._v("好在 JavaScript 对函数式较为友好，我们使用 Filter 函数来完成，并进行一定程度的改造，如下代码：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"981"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" lowerThan10 = value => value < "),s("span",{staticClass:"hljs-number"},[a._v("10")]),a._v("\n["),s("span",{staticClass:"hljs-number"},[a._v("12")]),a._v(", "),s("span",{staticClass:"hljs-number"},[a._v("3")]),a._v(", "),s("span",{staticClass:"hljs-number"},[a._v("4")]),a._v(", "),s("span",{staticClass:"hljs-number"},[a._v("89")]),a._v("].filter(lowerThan10)\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"982"}},[a._v("继续延伸我们的场景，如果输入比较复杂，想先过滤出小于 10 的项目，需要先保证数组中每一项都是 Number 类型，那么可以使用下面的代码：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"983"}},[s("code",{attrs:{"data-language":"java"}},[a._v("["),s("span",{staticClass:"hljs-number"},[a._v("12")]),a._v(", "),s("span",{staticClass:"hljs-string"},[a._v("'sd'")]),a._v(", "),s("span",{staticClass:"hljs-keyword"},[a._v("null")]),a._v(", undefined, {}, "),s("span",{staticClass:"hljs-number"},[a._v("23")]),a._v(", "),s("span",{staticClass:"hljs-number"},[a._v("45")]),a._v(", "),s("span",{staticClass:"hljs-number"},[a._v("3")]),a._v(", "),s("span",{staticClass:"hljs-number"},[a._v("6")]),a._v("].filter(value=> !isNaN(value) && value !== "),s("span",{staticClass:"hljs-keyword"},[a._v("null")]),a._v(").filter(lowerThan10)\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"984"}},[a._v("我们通过组合，实现了更多的场景。")]),a._v(" "),s("h4",{attrs:{"data-nodeid":"985"}},[a._v("curry 和 uncurry")]),a._v(" "),s("p",{attrs:{"data-nodeid":"986"}},[a._v("继续思考上面的例子，filterLowerThan10 还是硬编码写死了 10 这个阈值，我们用 curry 化的思想将其改造，如下代码：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"987"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" filterLowerNumber = number => {\n    "),s("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" array => {\n        let result = []\n        "),s("span",{staticClass:"hljs-keyword"},[a._v("for")]),a._v(" (let i = "),s("span",{staticClass:"hljs-number"},[a._v("0")]),a._v(", length = array.length; i < length; i++) {\n            let currentValue = array[i]\n            "),s("span",{staticClass:"hljs-keyword"},[a._v("if")]),a._v(" (currentValue < number) result.push(currentValue)\n        }\n        "),s("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" result\n    }\n}\n"),s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" filterLowerThan10 = filterLowerNumber("),s("span",{staticClass:"hljs-number"},[a._v("10")]),a._v(")\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"988"}},[a._v("上面代码中我们提到了 curry 化这个概念，简单说明：")]),a._v(" "),s("blockquote",{attrs:{"data-nodeid":"989"}},[s("p",{attrs:{"data-nodeid":"990"}},[a._v("curry 化，柯里化（currying），又译为卡瑞化或加里化，是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数且返回结果的新函数的技术。这个技术由克里斯托弗·斯特雷奇以逻辑学家哈斯凯尔·加里命名的。")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"991"}},[a._v("curry 化的优势非常明显：")]),a._v(" "),s("ul",{attrs:{"data-nodeid":"992"}},[s("li",{attrs:{"data-nodeid":"993"}},[s("p",{attrs:{"data-nodeid":"994"}},[a._v("提高复用性")])]),a._v(" "),s("li",{attrs:{"data-nodeid":"995"}},[s("p",{attrs:{"data-nodeid":"996"}},[a._v("减少重复传递不必要的参数")])]),a._v(" "),s("li",{attrs:{"data-nodeid":"997"}},[s("p",{attrs:{"data-nodeid":"998"}},[a._v("动态根据上下文创建函数")])])]),a._v(" "),s("p",{attrs:{"data-nodeid":"999"}},[a._v("其中动态根据上下文创建函数，也是一种"),s("strong",{attrs:{"data-nodeid":"1121"}},[a._v("惰性求值")]),a._v("的体现。比如这段代码：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"1000"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" addEvent = (function() {\n    "),s("span",{staticClass:"hljs-keyword"},[a._v("if")]),a._v(" (window.addEventListener) {\n        "),s("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" function (type, element, handler, capture) {\n            element.addEventListener(type, handler, capture)\n        }\n    }\n    "),s("span",{staticClass:"hljs-keyword"},[a._v("else")]),a._v(" "),s("span",{staticClass:"hljs-keyword"},[a._v("if")]),a._v(" (window.attachEvent){\n        "),s("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" function (type, element, fn) {\n            element.attachEvent("),s("span",{staticClass:"hljs-string"},[a._v("'on'")]),a._v(" + type, fn)\n        }\n    }\n})()\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"1001"}},[a._v("这是一个典型兼容 IE9 浏览器事件 API 的例子，根据兼容性的嗅探，充分利用 curry 化思想，完成了需求。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"1002"}},[a._v("那么我们如何编写一个通用化的 curry 函数呢？下面我给出一种方案：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"1003"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" curry = (fn, length) => {\n\t "),s("span",{staticClass:"hljs-comment"},[a._v("// 记录函数的行参个数")]),a._v("\n    length = length || fn."),s("span",{staticClass:"hljs-function"},[a._v("length\n    return "),s("span",{staticClass:"hljs-title"},[a._v("function")]),a._v(" "),s("span",{staticClass:"hljs-params"},[a._v("(...args)")]),a._v(" ")]),a._v("{\n    \t  "),s("span",{staticClass:"hljs-comment"},[a._v("// 当参数未满时，递归调用")]),a._v("\n        "),s("span",{staticClass:"hljs-keyword"},[a._v("if")]),a._v(" (args.length < length) {\n            "),s("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" curry(fn.bind("),s("span",{staticClass:"hljs-keyword"},[a._v("this")]),a._v(", ...args), length - args.length)\n        }\n        "),s("span",{staticClass:"hljs-comment"},[a._v("// 参数已满，执行 fn 函数")]),a._v("\n        "),s("span",{staticClass:"hljs-keyword"},[a._v("else")]),a._v(" {\n            "),s("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" fn.call("),s("span",{staticClass:"hljs-keyword"},[a._v("this")]),a._v(", ...args)\n        }\n    }\n}\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"1004"}},[a._v("如果不想使用 bind，另一种常规思路是"),s("strong",{attrs:{"data-nodeid":"1129"}},[a._v("对每次调用时产生的参数进行存储")]),a._v("：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"1005"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" curry = fn =>\n    judge = (...arg1) =>\n    \t "),s("span",{staticClass:"hljs-comment"},[a._v("// 判断参数是否已满")]),a._v("\n        arg1.length >= fn.length\n            ? fn(...arg1) "),s("span",{staticClass:"hljs-comment"},[a._v("// 执行函数")]),a._v("\n            : (...arg2) => judge(...arg1, ...arg2) "),s("span",{staticClass:"hljs-comment"},[a._v("// 将参数合并，继续递归调用")]),a._v("\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"1006"}},[a._v("对应 curry 化，还有一种反 curry 化的概念："),s("strong",{attrs:{"data-nodeid":"1135"}},[a._v("反 curry 化在于扩大函数的适用性，使本来作为特定对象所拥有的功能函数可以被任意对象使用")]),a._v("。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"1007"}},[a._v("有一个 UI 组件 Toast，如下代码简化为：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"1008"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-function"},[a._v("function "),s("span",{staticClass:"hljs-title"},[a._v("Toast")]),a._v(" "),s("span",{staticClass:"hljs-params"},[a._v("(options)")]),a._v(" ")]),a._v("{\n    "),s("span",{staticClass:"hljs-keyword"},[a._v("this")]),a._v(".message = "),s("span",{staticClass:"hljs-string"},[a._v("''")]),a._v("\n}\nToast.prototype = {\n    showMessage: function () {\n        console.log("),s("span",{staticClass:"hljs-keyword"},[a._v("this")]),a._v(".message)\n    }\n}\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"1009"}},[a._v("这样的代码，使得 Toast 实例均可使用 ShowMessage 方法，使用方式如下：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"1010"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-keyword"},[a._v("new")]),a._v(" Toast({message: "),s("span",{staticClass:"hljs-string"},[a._v("'show me'")]),a._v("}).showMessage()\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"1011"}},[a._v("如果脱离组件场景，我们不想实现 Toast 实例，而使用"),s("code",{attrs:{"data-backticks":"1","data-nodeid":"1139"}},[a._v("Toast.prototype.showMessage")]),a._v("方法，预期通过反 curry 化实现，如下代码：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"1012"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-comment"},[a._v("// 反 curry 化通用函数")]),a._v("\n"),s("span",{staticClass:"hljs-comment"},[a._v("// 核心实现思想是：先取出要执行 fn 方法的对象，标记为 obj1，同时从 arguments 中删除，在调用 fn 时，将 fn 执行上下文环境改为 obj1")]),a._v("\n"),s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" unCurry = fn => (...args) => fn.call(...args)\n"),s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" obj = {\n    message: "),s("span",{staticClass:"hljs-string"},[a._v("'uncurry test'")]),a._v("\n}\n"),s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" unCurryShowMessaage = unCurry(Toast.prototype.showMessage)\nunCurryShowMessaage(obj)\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"1013"}},[a._v("以上是正常函数实现 uncurry 的实现。我们也可以将 uncurry 挂载在函数原型上，如下代码：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"1014"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-comment"},[a._v("// 反 curry 化通用函数挂载在函数原型上")]),a._v("\nFunction.prototype.unCurry = !Function.prototype.unCurry || function () {\n    "),s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" self = "),s("span",{staticClass:"hljs-function"},[s("span",{staticClass:"hljs-keyword"},[a._v("this")]),a._v("\n    return "),s("span",{staticClass:"hljs-title"},[a._v("function")]),a._v(" "),s("span",{staticClass:"hljs-params"},[a._v("()")]),a._v(" ")]),a._v("{\n        "),s("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" Function.prototype.call.apply(self, arguments)\n    }\n}\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"1015"}},[a._v("当然，我们可以借助 bind 实现：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"1016"}},[s("code",{attrs:{"data-language":"java"}},[a._v("Function.prototype.unCurry = function() {\n  "),s("span",{staticClass:"hljs-keyword"},[a._v("return")]),a._v(" "),s("span",{staticClass:"hljs-keyword"},[a._v("this")]),a._v(".call.bind("),s("span",{staticClass:"hljs-keyword"},[a._v("this")]),a._v(")\n}\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"1017"}},[a._v("我们通过下面这个例子来理解：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"1018"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-comment"},[a._v("// 将 Array.prototype.push 反 curry 化，实现一个适用于对象的 push 方法")]),a._v("\n"),s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" push = Array.prototype.push.unCurry()\n"),s("span",{staticClass:"hljs-keyword"},[a._v("const")]),a._v(" test = { foo: "),s("span",{staticClass:"hljs-string"},[a._v("'lucas'")]),a._v(" }\npush(test, "),s("span",{staticClass:"hljs-string"},[a._v("'messi'")]),a._v(", "),s("span",{staticClass:"hljs-string"},[a._v("'ronaldo'")]),a._v(", "),s("span",{staticClass:"hljs-string"},[a._v("'neymar'")]),a._v(")\nconsole.log(test) \n"),s("span",{staticClass:"hljs-comment"},[a._v('// {0: "messi", 1: "ronaldo", 2: "neymar", foo: "lucas", length: 3}')]),a._v("\n")])]),a._v(" "),s("p",{attrs:{"data-nodeid":"1019"}},[a._v("反 curry 化的核心思想就在于："),s("strong",{attrs:{"data-nodeid":"1149"}},[a._v("利用第三方对象和上下文环境，“强行改命，为我所用”")]),a._v("。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"1020"}},[a._v("最后我们再看一个例子，我们将对象原型上的"),s("code",{attrs:{"data-backticks":"1","data-nodeid":"1151"}},[a._v("toString")]),a._v("方法“为我所用”，实现了一个更普遍适用的类型检测函数。如下代码：")]),a._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"1021"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-comment"},[a._v("// 利用反 curry 化，创建一个检测数据类型的函数 checkType")]),a._v("\nlet checkType = uncurring(Object.prototype.toString)\ncheckType("),s("span",{staticClass:"hljs-string"},[a._v("'lucas'")]),a._v("); "),s("span",{staticClass:"hljs-comment"},[a._v("// [object String]")]),a._v("\n")])]),a._v(" "),s("h3",{attrs:{"data-nodeid":"1022"}},[a._v("总结")]),a._v(" "),s("p",{attrs:{"data-nodeid":"1023"}},[a._v("这一讲我们从设计模式和函数式两大编程思想流派入手，分析了如何在编程中做到灵活性和高定制性，并通过大量的实例来强化思想，巩固认识。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"2345"}},[a._v("本讲主要内容如下：")]),a._v(" "),s("p",{attrs:{"data-nodeid":"2346"}},[s("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M00/04/4C/CioPOWAotoKAV0zTAAd4xm7pR44651.png",alt:"前端基建 金句.png","data-nodeid":"2350"}})]),a._v(" "),s("p",{attrs:{"data-nodeid":"1026"}},[a._v("事实上，前端领域中的灵活性和高定制性编码方案和其他领域相关思想是完全一致的，设计模式和函数式具有“普世意义”，我们将会在下一讲中继续延伸这类话题。")]),a._v(" "),s("p",{attrs:{"data-nodeid":"1027"}},[a._v("这里我也给大家留一个思考题：你还用过哪些设计模式的使用场景呢？欢迎在留言区和我分享你的经历。下一讲，我们将深入对象和原型，理解 JavaScript 在这个方向上的能力。请注意，下一讲我们不再过多赘述基础，而是面向进阶，需要你具有一定的知识准备。我们下一讲再见。")]),a._v(" "),s("hr"),a._v(" "),s("h3",{attrs:{id:"精选评论"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#精选评论"}},[a._v("#")]),a._v(" 精选评论")]),a._v(" "),s("h5",{attrs:{id:"聪"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#聪"}},[a._v("#")]),a._v(" *聪：")]),a._v(" "),s("blockquote",[s("p",[a._v("使用过发布订阅模式来实现React任意组件间的数据传递功能")])]),a._v(" "),s("h5",{attrs:{id:"聪-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#聪-2"}},[a._v("#")]),a._v(" *聪：")]),a._v(" "),s("blockquote",[s("p",[a._v("// 反 curry 化通用函数挂载在函数原型上Function.prototype.unCurry = !Function.prototype.unCurry || function () { const self = this return function () { return Function.prototype.call.apply(self, arguments) }}老师这个!Function.prototype.unCurry前面不需要取反吧？")])]),a._v(" "),s("h6",{attrs:{id:"讲师回复"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复"}},[a._v("#")]),a._v("     讲师回复：")]),a._v(" "),s("blockquote",[s("p",[a._v("    对，这是个 typo")])]),a._v(" "),s("h5",{attrs:{id:"青"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#青"}},[a._v("#")]),a._v(" **青：")]),a._v(" "),s("blockquote",[s("p",[a._v("请教下，最后一个例子，与使用"),s("code",[a._v("Object.prototype.toString.call()")]),a._v("有什么不同吗？反柯里化与Function.prototype.call的区别在什么地方呢？")])]),a._v(" "),s("h6",{attrs:{id:"讲师回复-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-2"}},[a._v("#")]),a._v("     讲师回复：")]),a._v(" "),s("blockquote",[s("p",[a._v("    Function.prototype.call 就是函数调用，和反柯里化没关系，只是实现反柯里化的手段")])])])}),[],!1,null,null,null);s.default=e.exports}}]);