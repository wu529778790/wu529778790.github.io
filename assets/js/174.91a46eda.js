(window.webpackJsonp=window.webpackJsonp||[]).push([[174],{510:function(t,a,s){"use strict";s.r(a);var n=s(4),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",{attrs:{"data-nodeid":"25256"}},[t._v("“对象”——这个概念在编程中非常重要，任何语言和领域的开发者都应该具有面向对象思维，才能够有效运用对象。良好的面向对象系统设计将是应用强健性、可维护性和可扩展性的关键；反之，如果面向对象环节有失误，将成为项目的灾难。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25257"}},[t._v("说到 JavaScript 面向对象，它实质是基于原型的对象系统，而不是基于类的。这是设计之初，由语言设计所决定的。随着 ES Next 标准的进化和新特性的添加，使得 JavaScript 面向对象更加贴近其他传统面向对象型语言。有幸目睹语言的发展和变迁，伴随着某种语言的成长，我认为是开发者之幸。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25258"}},[t._v("这一讲就让我们深入对象和原型，理解 JavaScript 在这个方向上的能力。请注意，今天的内容我们不再过多赘述基础，而是面向进阶，需要你具有一定的知识准备。")]),t._v(" "),a("h3",{attrs:{"data-nodeid":"25259"}},[t._v("实现 new 没有那么容易")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25260"}},[t._v("说起 JavaScript 当中的 new 关键字，有一段很有趣的历史。其实 JavaScript 创造者 Brendan Eich 实现 new 是为了获得更高的流行度，它是强行学习 Java 的一个残留产出，创造者想让 JavaScript 成为 Java 的小弟。当然，也有很多人认为这个设计掩盖了 JavaScript 中真正的原型继承，只是表面上看，更像是基于类的继承。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25261"}},[t._v("这样的误会使得很多传统 Java 开发者并不能很好理解 JavaScript。实际上，我们前端工程师应该明白，new 关键字到底做了什么事情。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25262"}},[t._v("step1：创建一个空对象，这个对象将会作为执行 new 构造函数() 之后，返回的对象实例。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25263"}},[t._v("step2：将上面创建的空对象的原型（"),a("strong",{attrs:{"data-nodeid":"25387"}},[t._v("proto")]),t._v("），指向构造函数的 prototype 属性。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25264"}},[t._v("step3：将这个空对象赋值给构造函数内部的 this，并执行构造函数逻辑。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25265"}},[t._v("step4：根据构造函数执行逻辑，返回第一步创建的对象或者构造函数的显式返回值。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25266"}},[t._v("因为 new 是 JavaScript 的关键字，我们不能直接覆盖，实现一个 newFunc 来进行模拟，预计使用方式：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"25267"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-function"},[t._v("function "),a("span",{staticClass:"hljs-title"},[t._v("Person")]),a("span",{staticClass:"hljs-params"},[t._v("(name)")]),t._v(" ")]),t._v("{\n  "),a("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".name = name\n}\n"),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" person = "),a("span",{staticClass:"hljs-keyword"},[t._v("new")]),t._v(" newFunc(Person, "),a("span",{staticClass:"hljs-string"},[t._v("'lucas'")]),t._v(")\nconsole.log(person)\n"),a("span",{staticClass:"hljs-comment"},[t._v('// {name: "lucas"}')]),t._v("\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"25268"}},[t._v("实现为：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"25269"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-function"},[t._v("function "),a("span",{staticClass:"hljs-title"},[t._v("newFunc")]),a("span",{staticClass:"hljs-params"},[t._v("(...args)")]),t._v(" ")]),t._v("{\n  "),a("span",{staticClass:"hljs-comment"},[t._v("// 取出 args 数组第一个参数，即目标构造函数")]),t._v("\n  "),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" constructor = args.shift()\n  "),a("span",{staticClass:"hljs-comment"},[t._v("// 创建一个空对象，且这个空对象继承构造函数的 prototype 属性")]),t._v("\n  "),a("span",{staticClass:"hljs-comment"},[t._v("// 即实现 obj.__proto__ === constructor.prototype")]),t._v("\n  "),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" obj = Object.create(constructor.prototype)\n  "),a("span",{staticClass:"hljs-comment"},[t._v("// 执行构造函数，得到构造函数返回结果")]),t._v("\n  "),a("span",{staticClass:"hljs-comment"},[t._v("// 注意这里我们使用 apply，将构造函数内的 this 指向为 obj")]),t._v("\n  "),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" result = constructor.apply(obj, args)\n  "),a("span",{staticClass:"hljs-comment"},[t._v("// 如果构造函数执行后，返回结果是对象类型，就直接返回，否则返回 obj 对象")]),t._v("\n  "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" (typeof result === "),a("span",{staticClass:"hljs-string"},[t._v("'object'")]),t._v(" && result != "),a("span",{staticClass:"hljs-keyword"},[t._v("null")]),t._v(") ? result : obj\n}\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"25270"}},[t._v("上述代码并不复杂，几个关键点需要注意：")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"25271"}},[a("li",{attrs:{"data-nodeid":"25272"}},[a("p",{attrs:{"data-nodeid":"25273"}},[t._v("使用 Object.create 将 obj 的 "),a("strong",{attrs:{"data-nodeid":"25398"}},[t._v("proto")]),t._v(" 指向为构造函数的原型；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"25274"}},[a("p",{attrs:{"data-nodeid":"25275"}},[t._v("使用 apply 方法，将构造函数内的 this 指向为 obj；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"25276"}},[a("p",{attrs:{"data-nodeid":"25277"}},[t._v("在 newFunc 返回时，使用三目运算符决定返回结果。")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"25278"}},[t._v("我们知道，"),a("strong",{attrs:{"data-nodeid":"25406"}},[t._v("构造函数如果有显式返回值，且返回值为对象类型")]),t._v("，那么构造函数返回结果不再是目标实例。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25279"}},[t._v("如下代码：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"25280"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-function"},[t._v("function "),a("span",{staticClass:"hljs-title"},[t._v("Person")]),a("span",{staticClass:"hljs-params"},[t._v("(name)")]),t._v(" ")]),t._v("{\n  "),a("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".name = name\n  "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" {"),a("span",{staticClass:"hljs-number"},[t._v("1")]),t._v(": "),a("span",{staticClass:"hljs-number"},[t._v("1")]),t._v("}\n}\n"),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" person = "),a("span",{staticClass:"hljs-keyword"},[t._v("new")]),t._v(" Person(Person, "),a("span",{staticClass:"hljs-string"},[t._v("'lucas'")]),t._v(")\nconsole.log(person)\n"),a("span",{staticClass:"hljs-comment"},[t._v("// {1: 1}")]),t._v("\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"25281"}},[t._v("了解这些注意点，对于理解 newFunc 的实现就不再困难了。")]),t._v(" "),a("h3",{attrs:{"data-nodeid":"25282"}},[t._v("如何优雅地实现继承")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25283"}},[t._v("实现继承式是面向对象的一个重点概念。我们前面提到过 JavaScript 的面向对象系统是基于原型的，它的继承不同于其他大多数语言。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25284"}},[t._v("社区上对于 JavaScript 继承讲解的资料不在少数，这里我不再赘述每一种继承方式的实现过程，还需要你提前了解。")]),t._v(" "),a("h4",{attrs:{"data-nodeid":"25285"}},[t._v("ES5 相对可用的继承方案")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25286"}},[t._v("我们仅总结以下 JavaScript 中实现继承的关键点。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25287"}},[t._v("如果想使 Child 继承 Parent，那么采用原型链实现继承最关键的要点是：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"25288"}},[a("code",{attrs:{"data-language":"java"}},[t._v("Child.prototype = "),a("span",{staticClass:"hljs-keyword"},[t._v("new")]),t._v(" Parent()\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"25289"}},[t._v("这样的实现，不同的 Child 实例的 "),a("strong",{attrs:{"data-nodeid":"25420"}},[t._v("proto")]),t._v(" 会引用同一 Parent 的实例。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25290"}},[t._v("构造函数实现继承的要点是：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"25291"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-function"},[t._v("function "),a("span",{staticClass:"hljs-title"},[t._v("Child")]),t._v(" "),a("span",{staticClass:"hljs-params"},[t._v("(args)")]),t._v(" ")]),t._v("{\n    "),a("span",{staticClass:"hljs-comment"},[t._v("// ...")]),t._v("\n    Parent.call("),a("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(", args)\n}\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"25292"}},[t._v("这样的实现，问题也比较大，其实只是实现了实例属性继承，"),a("strong",{attrs:{"data-nodeid":"25427"}},[t._v("Parent 原型的方法在 Child 实例中并不可用")]),t._v("。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25293"}},[t._v("组合继承的实现才基本可用，其要点是：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"25294"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-function"},[t._v("function "),a("span",{staticClass:"hljs-title"},[t._v("Child")]),t._v(" "),a("span",{staticClass:"hljs-params"},[t._v("(args1, args2)")]),t._v(" ")]),t._v("{\n    "),a("span",{staticClass:"hljs-comment"},[t._v("// ...")]),t._v("\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".args2 = args2\n    Parent.call("),a("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(", args1)\n}\nChild.prototype = "),a("span",{staticClass:"hljs-keyword"},[t._v("new")]),t._v(" Parent()\nChild.prototype.constrcutor = Child\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"25295"}},[t._v("它的问题在于，Child 实例会存在 Parent 的实例属性。因为我们在 Child 构造函数中执行了 Parent 构造函数。同时，Child."),a("strong",{attrs:{"data-nodeid":"25438"}},[t._v("proto")]),t._v(" 也会存在同样的 Parent 的实例属性，且所有 Child 实例的 "),a("strong",{attrs:{"data-nodeid":"25439"}},[t._v("proto")]),t._v(" 指向同一内存地址。同时上述实现也都没有对静态属性的继承。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25296"}},[t._v("还有一些其他不完美的继承方式，我们这里不再过多介绍。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25297"}},[t._v("下面我们给出一个比较完整的方案，它解决了上面一系列的问题，我们先看代码：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"25298"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-function"},[t._v("function "),a("span",{staticClass:"hljs-title"},[t._v("inherit")]),a("span",{staticClass:"hljs-params"},[t._v("(Child, Parent)")]),t._v(" ")]),t._v("{\n     "),a("span",{staticClass:"hljs-comment"},[t._v("// 继承原型上的属性 ")]),t._v("\n    Child.prototype = Object.create(Parent.prototype)\n     "),a("span",{staticClass:"hljs-comment"},[t._v("// 修复 constructor")]),t._v("\n    Child.prototype.constructor = Child\n    "),a("span",{staticClass:"hljs-comment"},[t._v("// 存储超类")]),t._v("\n    Child."),a("span",{staticClass:"hljs-keyword"},[t._v("super")]),t._v(" = Parent\n    "),a("span",{staticClass:"hljs-comment"},[t._v("// 静态属性继承")]),t._v("\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" (Object.setPrototypeOf) {\n        "),a("span",{staticClass:"hljs-comment"},[t._v("// setPrototypeOf es6")]),t._v("\n        Object.setPrototypeOf(Child, Parent)\n    } "),a("span",{staticClass:"hljs-keyword"},[t._v("else")]),t._v(" "),a("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" (Child.__proto__) {\n        "),a("span",{staticClass:"hljs-comment"},[t._v("// __proto__ es6 引入，但是部分浏览器早已支持")]),t._v("\n        Child.__proto__ = Parent\n    } "),a("span",{staticClass:"hljs-keyword"},[t._v("else")]),t._v(" {\n        "),a("span",{staticClass:"hljs-comment"},[t._v("// 兼容 IE10 等陈旧浏览器")]),t._v("\n        "),a("span",{staticClass:"hljs-comment"},[t._v("// 将 Parent 上的静态属性和方法拷贝一份到 Child 上，不会覆盖 Child 上的方法")]),t._v("\n        "),a("span",{staticClass:"hljs-keyword"},[t._v("for")]),t._v(" ("),a("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" k in Parent) {\n            "),a("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" (Parent.hasOwnProperty(k) && !(k in Child)) {\n                Child[k] = Parent[k]\n            }\n        }\n    }\n}\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"25299"}},[t._v("具体原理已经包含在了注释当中。需要指出的是，上述静态属性继承仍然存在一个问题：在陈旧浏览器中，属性和方法的继承我们是静态拷贝的，继承完后续父类的改动不会自动同步到子类。这是不同于正常面向对象思想的，但是这种组合式继承，已经相对完美、优雅。")]),t._v(" "),a("h4",{attrs:{"data-nodeid":"25300"}},[t._v("继承 Date")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25301"}},[t._v("值得一提的一个小细节是：前面几种继承方式"),a("strong",{attrs:{"data-nodeid":"25449"}},[t._v("无法实现对 Date 对象的继承")]),t._v("。我们来进行测试：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("DateConstructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bar'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("inherit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DateConstructor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DateConstructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("getMyTime")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTime")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" date "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DateConstructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMyTime")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",{attrs:{"data-nodeid":"25303"}},[t._v("将会得到报错："),a("code",{attrs:{"data-backticks":"1","data-nodeid":"25451"}},[t._v("Uncaught TypeError: this is not a Date object.")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"25304"}},[t._v("究其原因，是因为 JavaScript 的日期对象只能通过 JavaScript Date 作为构造函数来实例化得到。因此 v8 引擎实现代码中就一定有所限制，如果发现调用 getTime() 方法的对象不是 Date 构造函数构造出来的实例，则抛出错误。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25305"}},[t._v("那么如何实现对 Date 的继承呢？")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("DateConstructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" dateObj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setPrototypeOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dateObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DateConstructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    dateObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bar'")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" dateObj\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setPrototypeOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DateConstructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DateConstructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("getMyTime")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTime")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTime")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" date "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DateConstructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMyTime")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",{attrs:{"data-nodeid":"25307"}},[t._v("我们来分析一下代码，调用构造函数 DateConstructor 返回的对象 dateObj 有：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"25308"}},[a("code",{attrs:{"data-language":"java"}},[t._v("dateObj.__proto__ === DateConstructor.prototype\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"25309"}},[t._v("而我们通过：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"25310"}},[a("code",{attrs:{"data-language":"java"}},[t._v("Object.setPrototypeOf(DateConstructor.prototype, Date.prototype)\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"25311"}},[t._v("实现了：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"25312"}},[a("code",{attrs:{"data-language":"java"}},[t._v("DateConstructor.prototype.__proto__ === Date.prototype\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"25313"}},[t._v("所以连起来就是：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"25314"}},[a("code",{attrs:{"data-language":"java"}},[t._v("date.__proto__.__proto__ === Date.prototype\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"25315"}},[t._v("继续分析，DateConstructor 构造函数里，返回的 dateObj 是一个真正的 Date 对象，因为：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"25316"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" dateObj = "),a("span",{staticClass:"hljs-keyword"},[t._v("new")]),t._v("(Function.prototype.bind.apply(Date, [Date].concat(Array.prototype.slice.call(arguments))))()"),a("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" dateObj = "),a("span",{staticClass:"hljs-keyword"},[t._v("new")]),t._v("(Function.prototype.bind.apply(Date, [Date].concat(Array.prototype.slice.call(arguments))))()\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"25317"}},[t._v("它终归还是由 Date 构造函数实例化出来的，因此它有权调用 Date 原型上的方法，而不会被引擎限制。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25318"}},[t._v("整个实现过程通过"),a("strong",{attrs:{"data-nodeid":"25469"}},[t._v("更改原型关系")]),t._v("，在构造函数里调用原生构造函数 Date，并返回其实例的方法，“欺骗了”浏览器。当然这样的做法比较取巧，其"),a("strong",{attrs:{"data-nodeid":"25470"}},[t._v("副作用是更改了原型关系")]),t._v("，这样也会干扰浏览器某些优化操作。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25319"}},[t._v("那么有没有更加“体面”的方式呢？")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25320"}},[t._v("其实随着 ES6 class 的推出，我们完全可以直接使用 extends 关键字了：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"25321"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-class"},[a("span",{staticClass:"hljs-keyword"},[t._v("class")]),t._v(" "),a("span",{staticClass:"hljs-title"},[t._v("DateConstructor")]),t._v(" "),a("span",{staticClass:"hljs-keyword"},[t._v("extends")]),t._v(" "),a("span",{staticClass:"hljs-title"},[t._v("Date")]),t._v(" ")]),t._v("{\n    constructor() {\n        "),a("span",{staticClass:"hljs-keyword"},[t._v("super")]),t._v("()\n        "),a("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".foo ="),a("span",{staticClass:"hljs-string"},[t._v("'bar'")]),t._v("\n    }\n    getMyTime() {\n        "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" "),a("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".getTime()\n    }\n}\nlet date = "),a("span",{staticClass:"hljs-keyword"},[t._v("new")]),t._v(" DateConstructor()\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"25322"}},[t._v("上面的方法可以完美执行：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"25323"}},[a("code",{attrs:{"data-language":"java"}},[t._v("date.getMyTime()\n"),a("span",{staticClass:"hljs-comment"},[t._v("// 1558921640586")]),t._v("\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"25324"}},[t._v("直接在支持 ES6 class 的浏览器中使用完全没有问题，可是我们项目大部分都是使用 Babel 进行编译。按照 Babel 编译 class 的方法，运行其产出后，仍然会得到报错“Uncaught TypeError: this is not a Date object.”，因此我们可以得知：Babel 并没有对继承 Date 进行特殊处理，无法做到兼容。")]),t._v(" "),a("h3",{attrs:{"data-nodeid":"25325"}},[t._v("jQuery 中的对象思想")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25326"}},[t._v("可能你会有这样的问题：“所有的面试官都那么注重面向对象，可是我在工作中很少涉及啊？面向对象到底有什么用？”")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25327"}},[t._v("对于这个问题我想说，“如果你没有开发大型复杂项目的经验，不具备封装抽象的思想，也许确实用不到面向对象，也很难解释为什么要有面向对象的设计和考察。”接下来，我就从 jQuery 源码架构设计入手，分析一下基本的原型以及原型链知识如何在 jQuery 源码中发挥作用。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25328"}},[t._v("“什么，这都哪一年了你还在说 jQuery？”")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25329"}},[t._v("其实优秀的思想是永远不过时的，研究清楚 jQuery 的设计思想，你仍然会会受益匪浅。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25330"}},[t._v("我们从一个问题开始：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"25331"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" pNodes = $("),a("span",{staticClass:"hljs-string"},[t._v("'p'")]),t._v(")\n"),a("span",{staticClass:"hljs-comment"},[t._v("// 我们得到一个数组")]),t._v("\n"),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" divNodes= $("),a("span",{staticClass:"hljs-string"},[t._v("'div'")]),t._v(")\n"),a("span",{staticClass:"hljs-comment"},[t._v("// 我们得到一个数组")]),t._v("\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"25332"}},[t._v("但是我们又可以：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"25333"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" pNodes = $("),a("span",{staticClass:"hljs-string"},[t._v("'p'")]),t._v(")\npNodes.addClass("),a("span",{staticClass:"hljs-string"},[t._v("'className'")]),t._v(")\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"25334"}},[t._v("数组上可是没有 addClass 方法的吧？")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25335"}},[t._v("这个问题先放一边。我们想一想"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"25484"}},[t._v("$")]),t._v("是什么？你的第一反应可能是一个函数，因此我们可以这样调用执行：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"25336"}},[a("code",{attrs:{"data-language":"java"}},[t._v("$("),a("span",{staticClass:"hljs-string"},[t._v("'p'")]),t._v(")\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"25337"}},[t._v("但是你一定又见过这样的使用：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"25338"}},[a("code",{attrs:{"data-language":"java"}},[t._v("$.ajax()\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"25339"}},[t._v("那么"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"25488"}},[t._v("$")]),t._v("又是一个对象，它有 Ajax 的静态方法。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25340"}},[t._v("类似：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"25341"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-comment"},[t._v("// 构造函数")]),t._v("\nfunction $() {\n}\n$.ajax = function () {\n    "),a("span",{staticClass:"hljs-comment"},[t._v("// ...")]),t._v("\n}\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"25342"}},[t._v("实际上，我们翻看 "),a("a",{attrs:{href:"https://github.com/jquery/jquery/","data-nodeid":"25494"}},[t._v("jQuery 源码架构")]),t._v("会发现（具体内容有删减和改动）：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"25343"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" jQuery = (function(){\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" $\n    "),a("span",{staticClass:"hljs-comment"},[t._v("// ...")]),t._v("\n    $ = function(selector, context) {\n        "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" function (selector, context) {\n            "),a("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" dom = []\n            dom.__proto__ = $.fn\n            "),a("span",{staticClass:"hljs-comment"},[t._v("// ...")]),t._v("\n            "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" dom\n        }\n    }\n    $.fn = {\n        addClass: function() {\n            "),a("span",{staticClass:"hljs-comment"},[t._v("// ...")]),t._v("\n        },\n        "),a("span",{staticClass:"hljs-comment"},[t._v("// ...")]),t._v("\n    }\n    $.ajax = function() {\n        "),a("span",{staticClass:"hljs-comment"},[t._v("// ...")]),t._v("\n    }\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" $\n})()\nwindow.jQuery = jQuery\nwindow.$ === undefined && (window.$ = jQuery)\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"25344"}},[t._v("我们顺着源码分析，当调用"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"25497"}},[t._v("$('p')")]),t._v("时，最终返回的是 dom，而 dom."),a("strong",{attrs:{"data-nodeid":"25509"}},[t._v("proto")]),t._v(" 指向了"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"25503"}},[t._v("$.fn")]),t._v("，"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"25505"}},[t._v("$.fn")]),t._v("是包含了多种方法的对象集合。因此返回的结果（dom）可以在其原型链上找到 addClass 这样的方法。同理，"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"25507"}},[t._v("$('span')")]),t._v("也不例外，任何实例都不例外。")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"25345"}},[a("code",{attrs:{"data-language":"java"}},[t._v("$("),a("span",{staticClass:"hljs-string"},[t._v("'span'")]),t._v(").__proto__ === $.fn\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"25346"}},[t._v("同时 Ajax 方法直接挂载在构造函数"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"25511"}},[t._v("$")]),t._v("上，它是一个"),a("strong",{attrs:{"data-nodeid":"25517"}},[t._v("静态属性")]),t._v("方法。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25347"}},[t._v("请你仔细体会整个 jQuery 的架构，其实翻译成 ES class 就很好理解了（不完全对等）：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"25348"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-class"},[a("span",{staticClass:"hljs-keyword"},[t._v("class")]),t._v(" $ ")]),t._v("{\n  "),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[t._v("static")]),t._v(" "),a("span",{staticClass:"hljs-title"},[t._v("ajax")]),a("span",{staticClass:"hljs-params"},[t._v("()")]),t._v(" ")]),t._v("{\n    "),a("span",{staticClass:"hljs-comment"},[t._v("// ...")]),t._v("\n  }\n  constructor(selector, context) {\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".selector = selector\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".context = context\n    "),a("span",{staticClass:"hljs-comment"},[t._v("// ...")]),t._v("\n  }\n  addClass() {\n    "),a("span",{staticClass:"hljs-comment"},[t._v("//  ...")]),t._v("\n  }\n}\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"25349"}},[t._v("这个应用虽然并不复杂，但还是很微妙地表现出来了面向对象的精妙设计。")]),t._v(" "),a("h3",{attrs:{"data-nodeid":"25350"}},[t._v("类继承和原型继承的区别")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25351"}},[t._v("上面我们已经了解了 JavaScript 中的原型继承，那么它和传统面向对象语言的类继承有什么不同呢？这就涉及编程语言范畴了，传统的面向对象语言的类继承，会引发一些问题：")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"25352"}},[a("li",{attrs:{"data-nodeid":"25353"}},[a("p",{attrs:{"data-nodeid":"25354"}},[t._v("紧耦合问题")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"25355"}},[a("p",{attrs:{"data-nodeid":"25356"}},[t._v("脆弱基类问题")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"25357"}},[a("p",{attrs:{"data-nodeid":"25358"}},[t._v("层级僵化问题")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"25359"}},[a("p",{attrs:{"data-nodeid":"25360"}},[t._v("必然重复性问题")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"25361"}},[a("p",{attrs:{"data-nodeid":"25362"}},[t._v("大猩猩—香蕉问题")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"25363"}},[t._v("以上这些内容属于纯理论，下面我借用 Eric Elliott 的著名文章“"),a("a",{attrs:{href:"https://medium.com/javascript-scene/master-the-javascript-interview-what-s-the-difference-between-class-prototypal-inheritance-e4cd0a7562e9?utm_source=tuicool&utm_medium=referral","data-nodeid":"25530"}},[t._v("Difference between class prototypal inheritance")]),t._v("”，来展开说明类继承和原型继承的优劣。我们先看下图：")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25554"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M00/04/83/CioPOWAs1oqAK7n6AAD_bt3FABw414.png",alt:"2021217-163948.png","data-nodeid":"25557"}})]),t._v(" "),a("p",{attrs:{"data-nodeid":"25365"}},[t._v("通过上图，我们看出一些问题（单一继承、紧耦合以及层级分类问题），对于类 8，只想继承五边形的属性，却得到了继承链上其他并不需要的属性，比如五角星，正方形属性。这就是大猩猩/香蕉问题，“我只想要一个香蕉，但是你给我了整个森林”。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25366"}},[t._v("对于类 9，对比其父类，我只需要把五角星属性修改成四角星，但是五角星继承自基类 1，如果要去修改，那就会影响整个继承树（脆弱基类/层级僵化问题）；好吧，我不去修改，那就需要给类 9 新建一个基类（必然重复性问题）。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25367"}},[t._v("那么基于原型的继承如何解决上述问题呢？")]),t._v(" "),a("p",{staticClass:"te-preview-highlight",attrs:{"data-nodeid":"26154"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M00/04/83/CioPOWAs1quAXIdzAC9wcK4g428951.gif",alt:"2021217-163944.gif","data-nodeid":"26157"}})]),t._v(" "),a("p",{attrs:{"data-nodeid":"25369"}},[t._v("采用原型继承，其实"),a("strong",{attrs:{"data-nodeid":"25546"}},[t._v("本质是对象组合")]),t._v("，可以避免复杂纵深的层级关系。当类 1 需要四角星特性的时候，只需要组合新特性即可，不会影响到其他实例。")]),t._v(" "),a("h3",{attrs:{"data-nodeid":"25370"}},[t._v("总结")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25371"}},[t._v("面向对象是一个永远说不完的话题，更是一个永远不会过时的话题，具备良好的面向对象架构能力，对于开发者来说至关重要。同时由于 JavaScript 面向对象的特殊性，它区别于其他语言，显得“与众不同”。我们在了解 JavaScript 原型、原型链知识的前提下，对比其他语言的思想，就变得非常重要和有意义了。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25372"}},[t._v("本讲内容总结如下：")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25373"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M00/03/02/Cgp9HWAeXoaAKvD-AAG_qfSV0Ls210.png",alt:"Drawing 2.png","data-nodeid":"25552"}})]),t._v(" "),a("p",{attrs:{"data-nodeid":"25374"}},[t._v("从下一讲开始，我们将深入数据结构这个话题。数据结构是算法的基础，其本身也包含了算法的部分内容。如果你想要掌握算法，一定要先有一个巩固的数据结构基础。下一讲我们将用 JavaScript 实现几个常见的数据结构，帮助你在不同的场景中，找到最为适合的数据结构处理问题。")]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"精选评论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#精选评论"}},[t._v("#")]),t._v(" 精选评论")]),t._v(" "),a("h5",{attrs:{id:"庆"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#庆"}},[t._v("#")]),t._v(" **庆")]),t._v(" "),a("blockquote",[a("p",[t._v("jQuery源码架构那里的, $ = function(selector, context) { return function (selector, context) { var dom = [] dom."),a("strong",[t._v("proto")]),t._v(" = $.fn // ... return dom } }，这里是不是有点问题，如果这么写，需要$('p')('p')才能获得返回值呀??")])]),t._v(" "),a("h6",{attrs:{id:"讲师回复"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复"}},[t._v("#")]),t._v("     讲师回复")]),t._v(" "),a("blockquote",[a("p",[t._v("    对，需要自执行一下，感谢指出")])]),t._v(" "),a("h5",{attrs:{id:"超"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#超"}},[t._v("#")]),t._v(" **超")]),t._v(" "),a("blockquote",[a("p",[t._v("new 的实现那块，如果函数返回值是个的对象或者函数，会返回其值，已在浏览器验证，所有 还要加个条件 typeof result === 'function'")])]),t._v(" "),a("h6",{attrs:{id:"讲师回复-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-2"}},[t._v("#")]),t._v("     讲师回复")]),t._v(" "),a("blockquote",[a("p",[t._v("    所有代码只是表达核心思想，对边缘 case 不会一一列举，比如这种类型判断。如果有必要支出的话，很关键，会直接提出")])])])}),[],!1,null,null,null);a.default=e.exports}}]);