(window.webpackJsonp=window.webpackJsonp||[]).push([[166],{500:function(t,a,s){"use strict";s.r(a);var d=s(4),n=Object(d.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",{attrs:{"data-nodeid":"1133"}},[t._v("前几讲内容，我们主要围绕 JavaScript 和项目相关工程化方案展开。实际上，在前端基础建设中，样式方案的处理也必不可少。这一讲，就让我们设计一个工程化主题切换功能，并梳理现代前端样式的解决方案。")]),t._v(" "),a("h3",{attrs:{"data-nodeid":"1134"}},[t._v("设计一个主题切换工程架构")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1135"}},[t._v("随着 iOS 13 引入 Dark Mode（深色模式），各大应用和网站也都开始支持深色模式。相比传统的页面配色方案，深色模式具有较好的降噪性，也能让用户的眼睛看内容更舒适。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1136"}},[t._v("那么对于前端来说，如何高效地支持深色模式呢？这里的高效就是指"),a("strong",{attrs:{"data-nodeid":"1249"}},[t._v("工程化、自动化方案")]),t._v("，不需要开发中 hard coding。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1137"}},[t._v("在介绍具体方案前，我们先来了解一个必备概念和工程化神器——PostCSS。")]),t._v(" "),a("h4",{attrs:{"data-nodeid":"1138"}},[t._v("PostCSS 原理和相关插件能力")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1139"}},[t._v("简单来说， PostCSS 是一款编译 CSS 的工具。")]),t._v(" "),a("blockquote",{attrs:{"data-nodeid":"1140"}},[a("p",{attrs:{"data-nodeid":"1141"}},[t._v("PostCSS is a tool for transforming styles with JS plugins. These plugins can lint your CSS, support variables and mixins, transpile future CSS syntax, inline images, and more.")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"1142"}},[t._v("如上介绍，postCSS 具有良好的"),a("strong",{attrs:{"data-nodeid":"1263"}},[t._v("插件性")]),t._v("，其插件也是使用 JavaScript 编写的，非常有利于开发者扩展。基于前几节介绍的 Babel 思想，对比 JavaScript 的编译器，我们不难猜出 PostCSS 的工作原理："),a("strong",{attrs:{"data-nodeid":"1264"}},[t._v("PostCSS 接收一个 CSS 文件，并提供了插件机制，提供给开发者分析、修改 CSS 的规则，具体实现方式也是基于 AST 技术")]),t._v("。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1143"}},[t._v("而我们这一讲介绍的工程化主题切换架构，也离不开 PostCSS 的基础能力。我们马上来设计一个相关结构能力。")]),t._v(" "),a("h4",{attrs:{"data-nodeid":"1144"}},[t._v("架构思路总结")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1145"}},[t._v("主题切换——社区上介绍的方案往往通过 CSS 变量（CSS 自定义属性）来实现，关于 CSS 变量的介绍，相对基础，这里我们只贴出知识链接："),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_custom_properties","data-nodeid":"1270"}},[t._v("CSS 自定义属性")]),t._v("。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1146"}},[t._v("这无疑是一个很好的思路，但是作为架构来说，"),a("strong",{attrs:{"data-nodeid":"1277"}},[t._v("使用 CSS 自定义属性——只是其中一个环节")]),t._v("。站在更高、更中台化的视觉思考，我们还需要设计：")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"1147"}},[a("li",{attrs:{"data-nodeid":"1148"}},[a("p",{attrs:{"data-nodeid":"1149"}},[t._v("如何维护不同主题色值；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1150"}},[a("p",{attrs:{"data-nodeid":"1151"}},[t._v("谁来维护不同主题色值；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1152"}},[a("p",{attrs:{"data-nodeid":"1153"}},[t._v("研发和设计之间，如何保持不同主题色值的同步沟通；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1154"}},[a("p",{attrs:{"data-nodeid":"1155"}},[t._v("如何最小化前端工程师的开发量，不需要 hard coding 两份颜色数值；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1156"}},[a("p",{attrs:{"data-nodeid":"1157"}},[t._v("如何做到一键切换时的性能最优；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1158"}},[a("p",{attrs:{"data-nodeid":"1159"}},[t._v("如何配合 JavaScript 状态管理，同步主题切换的信号。")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"1160"}},[t._v("基于以上考虑，以一个超链接样式为例，我们希望做到在开发时，编写：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"1161"}},[a("code",{attrs:{"data-language":"java"}},[t._v("a {\n  color: cc(GBK05A);\n}\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"1162"}},[t._v("这样的代码，就能一劳永逸——直接支持两套（light/dark）主题模式。也就是说，在应用编译时，上述代码预期被编译为下面这样的代码：")]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[t._v("a")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("color")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" #646464"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n"),a("span",{pre:!0,attrs:{class:"token selector"}},[t._v("html[data-theme='dark'] a")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("color")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" #808080"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",{attrs:{"data-nodeid":"1164"}},[t._v("我们来看看在编译时，构建环节发生了什么：")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"1165"}},[a("li",{attrs:{"data-nodeid":"1166"}},[a("p",{attrs:{"data-nodeid":"1167"}},[a("code",{attrs:{"data-backticks":"1","data-nodeid":"1287"}},[t._v("cc(GBK05A)")]),t._v("这样的声明，被编译为"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"1289"}},[t._v("#646464")]),t._v("；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1168"}},[a("p",{attrs:{"data-nodeid":"1169"}},[t._v("也就是说，"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"1292"}},[t._v("cc")]),t._v("是一个 CSS function，而"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"1294"}},[t._v("GBK05A")]),t._v("是一组色值，分别包含了 light 和 dark 两种主题的颜色；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1170"}},[a("p",{attrs:{"data-nodeid":"1171"}},[t._v("同时在 HTML 根节点上，添加属性选择器"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"1297"}},[t._v("data-theme='dark'")]),t._v("，并添加"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"1299"}},[t._v("a")]),t._v("标签 color 色值样式为"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"1301"}},[t._v("#808080")]),t._v("。")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"1172"}},[t._v("我们设想，用户点击“切换主题”按钮时，首先"),a("strong",{attrs:{"data-nodeid":"1316"}},[t._v("通过 JavaScript 将 HTML 根节点标签添加")]),a("code",{attrs:{"data-backticks":"1","data-nodeid":"1307"}},[t._v("data-theme")]),t._v("为"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"1309"}},[t._v("dark")]),t._v("的属性值，这时"),a("strong",{attrs:{"data-nodeid":"1317"}},[t._v("CSS 选择器")]),a("code",{attrs:{"data-backticks":"1","data-nodeid":"1314"}},[t._v("html[data-theme='dark'] a")]),t._v("将起作用，实现了样式的切换。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1173"}},[t._v("结合下图理解：")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1174"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image2/M01/06/EE/Cip5yGAGm3eACd70AAyNczVBKYI564.png",alt:"Drawing 0.png","data-nodeid":"1321"}})]),t._v(" "),a("p",{attrs:{"data-nodeid":"1175"}},[t._v("回到我们的架构设计中，如何在构建时完成 CSS 的样式编译转换呢？答案指向了 PostCSS。我们来盘点一下具体架构步骤。")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"1176"}},[a("li",{attrs:{"data-nodeid":"1177"}},[a("p",{attrs:{"data-nodeid":"1178"}},[t._v("首先编写一个名为 postcss-theme-colors 的 PostCSS 插件，实现上述编译过程。")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1179"}},[a("p",{attrs:{"data-nodeid":"1180"}},[t._v("维护一个色值，结合上例（这里以 YML 格式为例）就是：")])])]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"1181"}},[a("code",{attrs:{"data-language":"java"}},[t._v("GBK05A: [BK05, BK06]\nBK05: "),a("span",{staticClass:"hljs-string"},[t._v("'#808080'")]),t._v("\nBK06: "),a("span",{staticClass:"hljs-string"},[t._v("'#999999'")]),t._v("\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"1182"}},[t._v("postcss-theme-colors 需要：")]),t._v(" "),a("ol",{attrs:{"data-nodeid":"1183"}},[a("li",{attrs:{"data-nodeid":"1184"}},[a("p",{attrs:{"data-nodeid":"1185"}},[t._v("识别"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"1327"}},[t._v("cc()")]),t._v("方法；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1186"}},[a("p",{attrs:{"data-nodeid":"1187"}},[t._v("读取色值；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1188"}},[a("p",{attrs:{"data-nodeid":"1189"}},[t._v("通过色值，对"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"1331"}},[t._v("cc()")]),t._v("方法求值，得到两种颜色，分别对应 dark 和 light 模式；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1190"}},[a("p",{attrs:{"data-nodeid":"1191"}},[t._v("原地编译 CSS 中的颜色为 light 模式色值；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1192"}},[a("p",{attrs:{"data-nodeid":"1193"}},[t._v("同时 dark 模式色值写到 HTML 节点上。")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"1194"}},[t._v("这里需要补充的是，为了将 dark 模式色值按照"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"1336"}},[t._v("html[data-theme='dark']")]),t._v("方式写到 HTML 节点上，我们使用了另外两个 PostCSS 插件完成：")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"1195"}},[a("li",{attrs:{"data-nodeid":"1196"}},[a("p",{attrs:{"data-nodeid":"1197"}},[a("a",{attrs:{href:"https://www.npmjs.com/package/postcss-nested","data-nodeid":"1340"}},[t._v("PostCSS Nested")])])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1198"}},[a("p",{attrs:{"data-nodeid":"1199"}},[a("a",{attrs:{href:"https://www.npmjs.com/package/postcss-nesting","data-nodeid":"1343"}},[t._v("PostCSS Nesting")])])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"1200"}},[t._v("整体架构设计，总结为下图：")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1201"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image2/M01/07/BE/CgpVE2AJHHCAbXrZAAH5kg-FP4Q349.png",alt:"Lark20210121-141646.png","data-nodeid":"1347"}})]),t._v(" "),a("div",{attrs:{"data-nodeid":"1202"}},[a("p",{staticStyle:{"text-align":"center"}},[t._v("PostCSS 架构转换设计")])]),t._v(" "),a("h3",{attrs:{"data-nodeid":"1203"}},[t._v("主题色切换架构实现")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1204"}},[t._v("有了架构，这部分我们就来实现架构环节中的重点环节。首先，我们需要了解 PostCSS 插件体系。")]),t._v(" "),a("h4",{attrs:{"data-nodeid":"1205"}},[t._v("PostCSS 插件体系")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1206"}},[t._v("PostCSS 具有天生的插件化体系，开发者一般很容易上手插件开发：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"1207"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" postcss = require("),a("span",{staticClass:"hljs-string"},[t._v("'postcss'")]),t._v(");\n"),a("span",{staticClass:"hljs-keyword"},[t._v("module")]),t._v("."),a("span",{staticClass:"hljs-keyword"},[t._v("exports")]),t._v(" = postcss.plugin("),a("span",{staticClass:"hljs-string"},[t._v("'pluginname'")]),t._v(", function (opts) {\n  opts = opts || {};\n  "),a("span",{staticClass:"hljs-comment"},[t._v("// Work with options here")]),t._v("\n  "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" function (css, result) {\n    "),a("span",{staticClass:"hljs-comment"},[t._v("// Transform the CSS AST")]),t._v("\n  };\n})\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"1208"}},[t._v("上面代码是一个典型的 PostCSS 插件编写模版。一个 PostCSS 就是一个 Node.js 模块，开发者调用"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"1353"}},[t._v("postcss.plugin")]),t._v("（源码链接定义在"),a("a",{attrs:{href:"https://github.com/postcss/postcss/blob/main/lib/postcss.js#L28","data-nodeid":"1357"}},[t._v("postcss.plugin")]),t._v("中 ）工厂方法返回一个插件实体，形如：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"1209"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" {\n    postcssPlugin: "),a("span",{staticClass:"hljs-string"},[t._v("'PLUGIN_NAME'")]),t._v(",\n    "),a("span",{staticClass:"hljs-comment"},[t._v("/*\n    Root (root, postcss) {\n      // Transform CSS AST here\n    }\n    */")]),t._v("\n    "),a("span",{staticClass:"hljs-comment"},[t._v("/*\n    Declaration (decl, postcss) {\n      // The faster way to find Declaration node\n    }\n    */")]),t._v("\n    "),a("span",{staticClass:"hljs-comment"},[t._v("/*\n    Declaration: {\n      color: (decl, postcss) {\n        // The fastest way find Declaration node if you know property name\n      }\n    }\n    */")]),t._v("\n  }\n}\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"1210"}},[t._v("在编写 PostCSS 插件时，我们可以直接使用"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"1360"}},[t._v("postcss.plugin")]),t._v("方法完成实际开发。接下来，我们就开始动手实现 postcss-theme-colors。")]),t._v(" "),a("h4",{attrs:{"data-nodeid":"1211"}},[t._v("动手实现 postcss-theme-colors")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1212"}},[t._v("上述内容，在 PostCSS 插件设计中，我们看到了清晰的 AST 设计痕迹，经过之前小节的学习，我们应该对于 AST 不再陌生。根据插件代码骨架，我们加入具体实现逻辑，代码如下：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"1213"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" postcss = require("),a("span",{staticClass:"hljs-string"},[t._v("'postcss'")]),t._v(")\n"),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" defaults = {\n  function: "),a("span",{staticClass:"hljs-string"},[t._v("'cc'")]),t._v(",\n  groups: {},\n  colors: {},\n  useCustomProperties: "),a("span",{staticClass:"hljs-keyword"},[t._v("false")]),t._v(",\n  darkThemeSelector: "),a("span",{staticClass:"hljs-string"},[t._v("'html[data-theme=\"dark\"]'")]),t._v(",\n  nestingPlugin: "),a("span",{staticClass:"hljs-keyword"},[t._v("null")]),t._v(",\n}\n"),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" resolveColor = (options, theme, group, defaultValue) => {\n  "),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" [lightColor, darkColor] = options.groups[group] || []\n  "),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" color = theme === "),a("span",{staticClass:"hljs-string"},[t._v("'dark'")]),t._v(" ? darkColor : "),a("span",{staticClass:"hljs-function"},[t._v("lightColor\n  "),a("span",{staticClass:"hljs-title"},[t._v("if")]),t._v(" "),a("span",{staticClass:"hljs-params"},[t._v("(!color)")]),t._v(" ")]),t._v("{\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" defaultValue\n  }\n  "),a("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" (options.useCustomProperties) {\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" color.startsWith("),a("span",{staticClass:"hljs-string"},[t._v("'--'")]),t._v(") ? `"),a("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v("(${color})` : `"),a("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v("(--${color})`\n  }\n  "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" options.colors[color] || defaultValue\n}\n"),a("span",{staticClass:"hljs-keyword"},[t._v("module")]),t._v("."),a("span",{staticClass:"hljs-keyword"},[t._v("exports")]),t._v(" = postcss.plugin("),a("span",{staticClass:"hljs-string"},[t._v("'postcss-theme-colors'")]),t._v(", options => {\n  options = Object.assign({}, defaults, options)\n  "),a("span",{staticClass:"hljs-comment"},[t._v("// 获取色值函数（默认为 cc()）")]),t._v("\n  "),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" reGroup = "),a("span",{staticClass:"hljs-keyword"},[t._v("new")]),t._v(" RegExp(`\\\\b${options.function}\\\\(([^)]+)\\\\)`, "),a("span",{staticClass:"hljs-string"},[t._v("'g'")]),t._v(")\n  "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" (style, result) => {\n    "),a("span",{staticClass:"hljs-comment"},[t._v("// 判断 PostCSS 工作流程中，是否使用了某些 plugins")]),t._v("\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" hasPlugin = name =>\n      name.replace(/^postcss-/, "),a("span",{staticClass:"hljs-string"},[t._v("''")]),t._v(") === options.nestingPlugin ||\n      result.processor.plugins.some(p => p.postcssPlugin === name)\n    "),a("span",{staticClass:"hljs-comment"},[t._v("// 获取最终 CSS 值")]),t._v("\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" getValue = (value, theme) => {\n      "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" value.replace(reGroup, (match, group) => {\n        "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" resolveColor(options, theme, group, match)\n      })\n    }\n    "),a("span",{staticClass:"hljs-comment"},[t._v("// 遍历 CSS 声明")]),t._v("\n    style.walkDecls(decl => {\n      "),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" value = decl.value\n      "),a("span",{staticClass:"hljs-comment"},[t._v("// 如果不含有色值函数调用，则提前退出")]),t._v("\n      "),a("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" (!value || !reGroup.test(value)) {\n        "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v("\n      }\n      "),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" lightValue = getValue(value, "),a("span",{staticClass:"hljs-string"},[t._v("'light'")]),t._v(")\n      "),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" darkValue = getValue(value, "),a("span",{staticClass:"hljs-string"},[t._v("'dark'")]),t._v(")\n      "),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" darkDecl = decl.clone({value: darkValue})\n      let darkRule\n      "),a("span",{staticClass:"hljs-comment"},[t._v("// 使用插件，生成 dark 样式")]),t._v("\n      "),a("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" (hasPlugin("),a("span",{staticClass:"hljs-string"},[t._v("'postcss-nesting'")]),t._v(")) {\n        darkRule = postcss.atRule({\n          name: "),a("span",{staticClass:"hljs-string"},[t._v("'nest'")]),t._v(",\n          params: `${options.darkThemeSelector} &`,\n        })\n      } "),a("span",{staticClass:"hljs-keyword"},[t._v("else")]),t._v(" "),a("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" (hasPlugin("),a("span",{staticClass:"hljs-string"},[t._v("'postcss-nested'")]),t._v(")) {\n        darkRule = postcss.rule({\n          selector: `${options.darkThemeSelector} &`,\n        })\n      } "),a("span",{staticClass:"hljs-keyword"},[t._v("else")]),t._v(" {\n        decl.warn(result, `Plugin(postcss-nesting or postcss-nested) not found`)\n      }\n      "),a("span",{staticClass:"hljs-comment"},[t._v("// 添加 dark 样式到目标 HTML 节点中")]),t._v("\n      "),a("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" (darkRule) {\n        darkRule.append(darkDecl)\n        decl.after(darkRule)\n      }\n      "),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" lightDecl = decl.clone({value: lightValue})\n      decl.replaceWith(lightDecl)\n    })\n  }\n})\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"1214"}},[t._v("上面代码我加入了相关注释，整体逻辑并不难理解。理解了这部分源码，使用方式也就呼之欲出了：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"1215"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" colors = {\n  C01: "),a("span",{staticClass:"hljs-string"},[t._v("'#eee'")]),t._v(",\n  C02: "),a("span",{staticClass:"hljs-string"},[t._v("'#111'")]),t._v(",\n}\n"),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" groups = {\n  G01: ["),a("span",{staticClass:"hljs-string"},[t._v("'C01'")]),t._v(", "),a("span",{staticClass:"hljs-string"},[t._v("'C02'")]),t._v("],\n}\npostcss([\n  require("),a("span",{staticClass:"hljs-string"},[t._v("'postcss-theme-colors'")]),t._v(")({colors, groups}),\n]).process(css)\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"1216"}},[t._v("通过上述操作，我们实现了 postcss-theme-colors 插件，整体架构也就完成了大半。接下来，我们将继续完善，最终打造出一个更符合基础建设要求的方案。")]),t._v(" "),a("h4",{attrs:{"data-nodeid":"1217"}},[t._v("架构平台化——色组 & 色值平台设计")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1218"}},[t._v("上面的使用示例中，我们采用了 hard coding 的方式，如下代码：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"1219"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" colors = {\n  C01: "),a("span",{staticClass:"hljs-string"},[t._v("'#eee'")]),t._v(",\n  C02: "),a("span",{staticClass:"hljs-string"},[t._v("'#111'")]),t._v(",\n}\n"),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" groups = {\n  G01: ["),a("span",{staticClass:"hljs-string"},[t._v("'C01'")]),t._v(", "),a("span",{staticClass:"hljs-string"},[t._v("'C02'")]),t._v("],\n}\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"1220"}},[t._v("声明了"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"1371"}},[t._v("colors")]),t._v("和"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"1373"}},[t._v("groups")]),t._v("两个常量，并传递给 postcss-theme-colors 插件。"),a("strong",{attrs:{"data-nodeid":"1380"}},[t._v("其中")]),a("code",{attrs:{"data-backticks":"1","data-nodeid":"1378"}},[t._v("groups")]),t._v("变量声明了色组的概念，比如 group1 命名为 G01，它对应了 C01（日间色），C02（夜间色）两个色值。这样的好处显而易见。")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"1221"}},[a("li",{attrs:{"data-nodeid":"1222"}},[a("p",{attrs:{"data-nodeid":"1223"}},[t._v("我们将 postcss-theme-colors 插件和色值声明解藕， postcss-theme-colors 插件并不关系颜色，而是接受"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"1382"}},[t._v("colors")]),t._v("和"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"1384"}},[t._v("groups")]),t._v("变量。")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1224"}},[a("p",{attrs:{"data-nodeid":"1225"}},[t._v("色值和色组解耦：")]),t._v(" "),a("ol",{attrs:{"data-nodeid":"1226"}},[a("li",{attrs:{"data-nodeid":"1227"}},[a("p",{attrs:{"data-nodeid":"1228"}},[a("code",{attrs:{"data-backticks":"1","data-nodeid":"1387"}},[t._v("colors")]),t._v("维护具体色值；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1229"}},[a("p",{attrs:{"data-nodeid":"1230"}},[a("code",{attrs:{"data-backticks":"1","data-nodeid":"1389"}},[t._v("groups")]),t._v("维护具体色组。")])])])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"1231"}},[t._v("这样一来，如前文一个超链接样式声明：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"1232"}},[a("code",{attrs:{"data-language":"java"}},[t._v("a {\n  color: cc(GBK05A);\n}\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"1233"}},[t._v("如上代码，我们在业务开发中，直接声明了“使用 GBK05A 这个色组”。"),a("strong",{attrs:{"data-nodeid":"1397"}},[t._v("业务开发者不需要关心这个色组在 light/dark 模式下分别对应哪些色值。而设计团队可以专门维护色组和色值，最终只提供给开发者色组即可")]),t._v("。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1234"}},[t._v("在此基础上，我们完全可以抽象出一个色组 & 色值平台，方便设计团队更新内容。这个平台可以以 JSON 或者 YML 任何形式存储色值色组对应关系，方便各个团队协作。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1235"}},[t._v("在前文提到的主题切换设计架构图的基础上，我们扩充其为平台化的解决方案：")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1236"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image2/M01/07/BE/CgpVE2AJHIOAU_CfAAIVxX-eQtQ102.png",alt:"Lark20210121-141643.png","data-nodeid":"1404"}})]),t._v(" "),a("h3",{attrs:{"data-nodeid":"1237"}},[t._v("总结")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1238"}},[t._v("这一讲我们没有聚焦具体 CSS 样式的用法，而是从更高的角度，梳理了现代化前端基础建设当中的样式相关工程方案。并从“主题切换”这一话题，联动了 PostCSS、Webpack，甚至前端状态管理流程。")]),t._v(" "),a("p",{staticClass:"te-preview-highlight",attrs:{"data-nodeid":"1415"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image2/M01/07/C1/Cip5yGAJKOSASM3OAAatGP55avo761.png",alt:"Lark20210121-150848.png","data-nodeid":"1418"}})]),t._v(" "),a("p",{attrs:{"data-nodeid":"1240"}},[t._v("这里，我想给大家留几个思考问题，"),a("a",{attrs:{href:"https://github.com/postcss/postcss-custom-properties","data-nodeid":"1413"}},[t._v("postcss-custom-properties")]),t._v(" 有什么作用，它又是如何实现的？基于 CSS 变量新特性，我们可以如何优化本讲中的 postcss-theme-colors 插件？（答案已经在源代码中了。）")]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"精选评论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#精选评论"}},[t._v("#")]),t._v(" 精选评论")]),t._v(" "),a("h5",{attrs:{id:"宇"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#宇"}},[t._v("#")]),t._v(" **宇")]),t._v(" "),a("blockquote",[a("p",[t._v("楼下两位对 开发 编译 部署 runtime的理解还不够熟悉吧，不要把runtime做的事情和编译混为一谈。用户选择颜色，再根据算法推导出配色然后更新自己的主题这种需求，完全是runtime层面的，然后让后端存一下就可以了。如果去更新配色平台的group，再次打包有什么意义呢，你源码里已经hard code了，难不成用户操作还要修改源码，用户操作该影响的永远是内存或者数据库。这种场景搞不清的我自创了一个原则：只和自己相关就runtime，和所有人相关才可以编译")])]),t._v(" "),a("h5",{attrs:{id:"林"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#林"}},[t._v("#")]),t._v(" **林")]),t._v(" "),a("blockquote",[a("p",[t._v('老师好，我发现darkRule.append(darkDecl)，">decl.after(darkRule)这两个语句一起调用，会出现Maximum call stack size exceeded，可否贴一下最后生成的样式是怎样的？')])]),t._v(" "),a("h6",{attrs:{id:"讲师回复"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复"}},[t._v("#")]),t._v("     讲师回复")]),t._v(" "),a("blockquote",[a("p",[t._v("    需要有终止判断条件，你可以写 demo")])]),t._v(" "),a("h5",{attrs:{id:"宇-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#宇-2"}},[t._v("#")]),t._v(" **宇")]),t._v(" "),a("blockquote",[a("p",[t._v("用户选择颜色发生在运行时，静态编译解决不了，运行时就用状态去维护就好了")])]),t._v(" "),a("h5",{attrs:{id:"_0058"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0058"}},[t._v("#")]),t._v(" **0058")]),t._v(" "),a("blockquote",[a("p",[t._v("算法推导的情况 我觉得可以利用node平台，根据选择的色值，更新groups，再次打包，替换原本的style样式")])]),t._v(" "),a("h5",{attrs:{id:"伦"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#伦"}},[t._v("#")]),t._v(" **伦")]),t._v(" "),a("blockquote",[a("p",[t._v("这种方案应该是事先已经确认好主题色的值，所以才能在打包的时候处理，如果像那种由用户直接在颜色面板选择，再利用算法推导出整体配色的需求，就不太适合了。")])]),t._v(" "),a("h5",{attrs:{id:"潘"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#潘"}},[t._v("#")]),t._v(" 潘")]),t._v(" "),a("blockquote",[a("p",[t._v("不错")])]),t._v(" "),a("h5",{attrs:{id:"林-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#林-2"}},[t._v("#")]),t._v(" **林")]),t._v(" "),a("blockquote",[a("p",[t._v("😁")])]),t._v(" "),a("h5",{attrs:{id:"用户8230"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用户8230"}},[t._v("#")]),t._v(" **用户8230")]),t._v(" "),a("blockquote",[a("p",[t._v("get")])])])}),[],!1,null,null,null);a.default=n.exports}}]);