(window.webpackJsonp=window.webpackJsonp||[]).push([[161],{498:function(s,a,t){"use strict";t.r(a);var e=t(4),r=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",{attrs:{"data-nodeid":"1485"}},[s._v("即便你不知道 "),a("a",{attrs:{href:"https://github.com/zloirock/core-js","data-nodeid":"1597"}},[s._v("core-js")]),s._v("，也一定在项目中直接或间接地使用过它。core-js 是一个 JavaScript 标准库，它包含了 ECMAScript 2020 在内的多项特性的 polyfills，以及 ECMAScript 在 proposals 阶段的特性、WHATWG/W3C 新特性等。因此它是一个现代化前端项目的“标准套件”。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"1486"}},[s._v("除了 core-js 本身的重要性，它的实现理念、设计方式都值得我们学习。事实上，core-js 是一扇大门：")]),s._v(" "),a("ul",{attrs:{"data-nodeid":"1487"}},[a("li",{attrs:{"data-nodeid":"1488"}},[a("p",{attrs:{"data-nodeid":"1489"}},[s._v("通过 core-js，我们可以窥见"),a("strong",{attrs:{"data-nodeid":"1605"}},[s._v("前端工程化")]),s._v("的方方面面；")])]),s._v(" "),a("li",{attrs:{"data-nodeid":"1490"}},[a("p",{attrs:{"data-nodeid":"1491"}},[s._v("core-js 又和 Babel 深度绑定，因此学习 core-js，也能帮助开发者"),a("strong",{attrs:{"data-nodeid":"1611"}},[s._v("更好地理解 babel 生态")]),s._v("，进而加深对前端生态的理解；")])]),s._v(" "),a("li",{attrs:{"data-nodeid":"1492"}},[a("p",{attrs:{"data-nodeid":"1493"}},[s._v("通过对 core-js 的解析，我们正好可以梳理前端一个极具特色的概念——"),a("strong",{attrs:{"data-nodeid":"1617"}},[s._v("polyfill（垫片/补丁）")]),s._v("。")])])]),s._v(" "),a("p",{attrs:{"data-nodeid":"1494"}},[s._v("这一讲，就让我们深入谈谈以上内容。")]),s._v(" "),a("h3",{attrs:{"data-nodeid":"1495"}},[s._v("core-js 工程一览")]),s._v(" "),a("p",{attrs:{"data-nodeid":"1496"}},[s._v("core-js 是一个由 "),a("a",{attrs:{href:"https://github.com/lerna/lerna","data-nodeid":"1623"}},[s._v("Lerna")]),s._v(" 搭建的 Monorepo 风格的项目，在它的 "),a("a",{attrs:{href:"https://github.com/zloirock/core-js/tree/master/packages","data-nodeid":"1627"}},[s._v("packages")]),s._v(" 中，我们能看到五个相关包：")]),s._v(" "),a("ul",{attrs:{"data-nodeid":"1497"}},[a("li",{attrs:{"data-nodeid":"1498"}},[a("p",{attrs:{"data-nodeid":"1499"}},[s._v("core-js")])]),s._v(" "),a("li",{attrs:{"data-nodeid":"1500"}},[a("p",{attrs:{"data-nodeid":"1501"}},[s._v("core-js-pure")])]),s._v(" "),a("li",{attrs:{"data-nodeid":"1502"}},[a("p",{attrs:{"data-nodeid":"1503"}},[s._v("core-js-compact")])]),s._v(" "),a("li",{attrs:{"data-nodeid":"1504"}},[a("p",{attrs:{"data-nodeid":"1505"}},[s._v("core-js-builder")])]),s._v(" "),a("li",{attrs:{"data-nodeid":"1506"}},[a("p",{attrs:{"data-nodeid":"1507"}},[s._v("core-js-bundle")])])]),s._v(" "),a("p",{attrs:{"data-nodeid":"1508"}},[s._v("我们先从 core-js 入手。"),a("strong",{attrs:{"data-nodeid":"1639"}},[s._v("core-js 实现的基础垫片能力，是整个 core-js 的逻辑核心")]),s._v("。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"1509"}},[s._v("比如我们可以按照如下代码引入全局 polyfills：")]),s._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"1510"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-keyword"},[s._v("import")]),s._v(" "),a("span",{staticClass:"hljs-string"},[s._v("'core-js'")]),s._v(";\n")])]),s._v(" "),a("p",{attrs:{"data-nodeid":"1511"}},[s._v("或者按照：")]),s._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"1512"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-keyword"},[s._v("import")]),s._v(" "),a("span",{staticClass:"hljs-string"},[s._v("'core-js/features/array/from'")]),s._v(";\n")])]),s._v(" "),a("p",{attrs:{"data-nodeid":"1513"}},[s._v("的方式，按需在业务项目的入口引入某些 polyfills。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"1514"}},[s._v("core-js 为什么有这么多的 packages 呢？实际上，它们各司其职，又紧密配合，接下来我们来具体分析。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"1515"}},[a("strong",{attrs:{"data-nodeid":"1648"}},[s._v("core-js-pure 提供了不污染全局变量的垫片能力")]),s._v("，比如我们可以按照：")]),s._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"1516"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-keyword"},[s._v("import")]),s._v(" _from from "),a("span",{staticClass:"hljs-string"},[s._v("'core-js-pure/features/array/from'")]),s._v(";\n"),a("span",{staticClass:"hljs-keyword"},[s._v("import")]),s._v(" _flat from "),a("span",{staticClass:"hljs-string"},[s._v("'core-js-pure/features/array/flat'")]),s._v(";\n")])]),s._v(" "),a("p",{attrs:{"data-nodeid":"1517"}},[s._v("的方式，来实现独立的导出命名空间，进而避免全局变量的污染。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"1518"}},[a("strong",{attrs:{"data-nodeid":"1660"}},[s._v("core-js-compact 维护了按照")]),a("a",{attrs:{href:"https://github.com/browserslist/browserslist","data-nodeid":"1655"}},[s._v("browserslist")]),a("strong",{attrs:{"data-nodeid":"1661"}},[s._v("规范的垫片需求数据")]),s._v("，来帮助我们找到“符合目标环境”的 polyfills 需求集合，比如以下代码：")]),s._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"1519"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" {\n  list, "),a("span",{staticClass:"hljs-comment"},[s._v("// array of required modules")]),s._v("\n  targets, "),a("span",{staticClass:"hljs-comment"},[s._v("// object with targets for each module")]),s._v("\n} = require("),a("span",{staticClass:"hljs-string"},[s._v("'core-js-compat'")]),s._v(")({\n  targets: "),a("span",{staticClass:"hljs-string"},[s._v("'> 2.5%'")]),s._v("\n});\n")])]),s._v(" "),a("p",{attrs:{"data-nodeid":"1520"}},[s._v("就可以筛选出全球使用份额大于 2.5% 的浏览器范围，并提供在这个范围下需要支持的垫片能力。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"1521"}},[a("strong",{attrs:{"data-nodeid":"1667"}},[s._v("core-js-builder 可以结合 core-js-compact 以及 core-js，并利用 webpack 能力，根据需求打包出 core-js 代码")]),s._v("。比如：")]),s._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"1522"}},[a("code",{attrs:{"data-language":"java"}},[s._v("require("),a("span",{staticClass:"hljs-string"},[s._v("'core-js-builder'")]),s._v(")({\n  targets: "),a("span",{staticClass:"hljs-string"},[s._v("'> 0.5%'")]),s._v(",\n  filename: "),a("span",{staticClass:"hljs-string"},[s._v("'./my-core-js-bundle.js'")]),s._v(",\n}).then(code => {})."),a("span",{staticClass:"hljs-keyword"},[s._v("catch")]),s._v("(error => {});\n")])]),s._v(" "),a("p",{attrs:{"data-nodeid":"1523"}},[s._v("将会把符合需求的 core-js 垫片打包到"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"1669"}},[s._v("my-core-js-bundle.js")]),s._v("文件当中。整个流程可以用代码演示为：")]),s._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"1524"}},[a("code",{attrs:{"data-language":"java"}},[s._v("require("),a("span",{staticClass:"hljs-string"},[s._v("'./packages/core-js-builder'")]),s._v(")({ filename: "),a("span",{staticClass:"hljs-string"},[s._v("'./packages/core-js-bundle/index.js'")]),s._v(" }).then(done)."),a("span",{staticClass:"hljs-keyword"},[s._v("catch")]),s._v("(error => {\n  "),a("span",{staticClass:"hljs-comment"},[s._v("// eslint-disable-next-line no-console")]),s._v("\n  console.error(error);\n  process.exit("),a("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(");\n});\n")])]),s._v(" "),a("p",{attrs:{"data-nodeid":"1525"}},[s._v("总之，根据分包的设计，我们能发现，"),a("strong",{attrs:{"data-nodeid":"1676"}},[s._v("core-js 将自身能力充分解耦，提供出的多个包都可以被其他项目所依赖")]),s._v("。比如：")]),s._v(" "),a("ul",{attrs:{"data-nodeid":"1526"}},[a("li",{attrs:{"data-nodeid":"1527"}},[a("p",{attrs:{"data-nodeid":"1528"}},[s._v("core-js-compact 可以被 Babel 生态使用，由 Babel 分析出根据环境需要按需加载的垫片；")])]),s._v(" "),a("li",{attrs:{"data-nodeid":"1529"}},[a("p",{attrs:{"data-nodeid":"1530"}},[s._v("core-js-builder 可以被 Node.js 服务使用，构建出不同场景的垫片包。")])])]),s._v(" "),a("p",{attrs:{"data-nodeid":"1531"}},[s._v("宏观上的设计，体现了工程复用能力。下面我们通过一个微观 polyfill 案例，从一个具体的垫片实现，进一步加深理解。")]),s._v(" "),a("h3",{attrs:{"data-nodeid":"1532"}},[s._v("如何复用一个 Polyfill 实现")]),s._v(" "),a("p",{attrs:{"data-nodeid":"1533"}},[a("a",{attrs:{href:"https://tc39.es/ecma262/#sec-array.prototype.every","data-nodeid":"1683"}},[s._v("Array.prototype.every")]),s._v(" 是一个常见且常用的数组原型上的方法。该方法用于测试一个数组内所有元素是否都能通过某个指定函数的测试，并最终返回一个布尔值来表示测试是否通过。它的浏览器兼容性"),a("a",{attrs:{href:"https://www.caniuse.com/?search=array.prototype.every","data-nodeid":"1687"}},[s._v("如下图")]),s._v("所示：")]),s._v(" "),a("p",{attrs:{"data-nodeid":"1534"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image/M00/8C/4F/Ciqc1F_q7bKAcYXcAALU37lw2JY310.png",alt:"Drawing 0.png","data-nodeid":"1691"}})]),s._v(" "),a("p",{attrs:{"data-nodeid":"1535"}},[s._v("Array.prototype.every 的函数签名如下：")]),s._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"1536"}},[a("code",{attrs:{"data-language":"java"}},[s._v("arr.every(callback(element[, index[, array]])[, thisArg])\n")])]),s._v(" "),a("p",{attrs:{"data-nodeid":"1537"}},[s._v("对于一个有经验的前端程序员来说，如果浏览器不支持 Array.prototype.every，手写实现一个 Array.prototype.every 的 polyfill 并不困难，下面是 "),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/every","data-nodeid":"1696"}},[s._v("MDN")]),s._v(" 的一个实现：")]),s._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"1538"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (!Array.prototype.every) {\n  Array.prototype.every = function(callbackfn, thisArg) {\n    "),a("span",{staticClass:"hljs-string"},[s._v("'use strict'")]),s._v(";\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" T, k;\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" ("),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(" == "),a("span",{staticClass:"hljs-keyword"},[s._v("null")]),s._v(") {\n      "),a("span",{staticClass:"hljs-keyword"},[s._v("throw")]),s._v(" "),a("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" TypeError("),a("span",{staticClass:"hljs-string"},[s._v("'this is null or not defined'")]),s._v(");\n    }\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" O = Object("),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(");\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" len = O.length >>> "),a("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(";\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (typeof callbackfn !== "),a("span",{staticClass:"hljs-string"},[s._v("'function'")]),s._v(") {\n      "),a("span",{staticClass:"hljs-keyword"},[s._v("throw")]),s._v(" "),a("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" TypeError();\n    }\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (arguments.length > "),a("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(") {\n      T = thisArg;\n    }\n    k = "),a("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(";\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("while")]),s._v(" (k < len) {\n      "),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" kValue;\n      "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (k in O) {\n        kValue = O[k];\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" testResult = callbackfn.call(T, kValue, k, O);\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (!testResult) {\n          "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),a("span",{staticClass:"hljs-keyword"},[s._v("false")]),s._v(";\n        }\n      }\n      k++;\n    }\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),a("span",{staticClass:"hljs-keyword"},[s._v("true")]),s._v(";\n  };\n}\n")])]),s._v(" "),a("p",{attrs:{"data-nodeid":"1539"}},[s._v("核心思路很好理解：我们通过遍历数组，对数组的每一项调用 CALLBACK 求值进行返回是否通过测试。但是站在工程化的角度，从 core-js 这样一个大型项目的视角出发，就不是这么简单了。比如，我们知道 core-js-pure 不同于 core-js，它提供了"),a("strong",{attrs:{"data-nodeid":"1707"}},[s._v("不污染命名空间")]),s._v("的引用方式，因此上述 Array.prototype.every 的 polyfill 核心逻辑实现，就需要被 core-js-pure 和 core-js 同时引用，只要"),a("strong",{attrs:{"data-nodeid":"1708"}},[s._v("区分最后导出的方式")]),s._v("即可，那么按照这个思路，我们如何实现最大限度的复用呢？")]),s._v(" "),a("p",{attrs:{"data-nodeid":"1540"}},[s._v("实际上，Array.prototype.every 的 polyfill 核心逻辑实现在"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"1710"}},[s._v("./packages/core-js/modules/es.array.every.js")]),s._v("中，"),a("a",{attrs:{href:"https://github.com/zloirock/core-js/blob/master/packages/core-js/modules/es.array.every.js","data-nodeid":"1714"}},[s._v("源码")]),s._v("如下：")]),s._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"1541"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-string"},[s._v("'use strict'")]),s._v(";\n"),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" $ = require("),a("span",{staticClass:"hljs-string"},[s._v("'../internals/export'")]),s._v(");\n"),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" $every = require("),a("span",{staticClass:"hljs-string"},[s._v("'../internals/array-iteration'")]),s._v(").every;\n"),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" arrayMethodIsStrict = require("),a("span",{staticClass:"hljs-string"},[s._v("'../internals/array-method-is-strict'")]),s._v(");\n"),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" arrayMethodUsesToLength = require("),a("span",{staticClass:"hljs-string"},[s._v("'../internals/array-method-uses-to-length'")]),s._v(");\n"),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" STRICT_METHOD = arrayMethodIsStrict("),a("span",{staticClass:"hljs-string"},[s._v("'every'")]),s._v(");\n"),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" USES_TO_LENGTH = arrayMethodUsesToLength("),a("span",{staticClass:"hljs-string"},[s._v("'every'")]),s._v(");\n$({ target: "),a("span",{staticClass:"hljs-string"},[s._v("'Array'")]),s._v(", proto: "),a("span",{staticClass:"hljs-keyword"},[s._v("true")]),s._v(", forced: !STRICT_METHOD || !USES_TO_LENGTH }, {\n  every: "),a("span",{staticClass:"hljs-function"},[s._v("function "),a("span",{staticClass:"hljs-title"},[s._v("every")]),a("span",{staticClass:"hljs-params"},[s._v("(callbackfn "),a("span",{staticClass:"hljs-comment"},[s._v("/* , thisArg */")]),s._v(")")]),s._v(" ")]),s._v("{\n    "),a("span",{staticClass:"hljs-comment"},[s._v("// 调用 $every 方法")]),s._v("\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" $every("),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(", callbackfn, arguments.length > "),a("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(" ? arguments["),a("span",{staticClass:"hljs-number"},[s._v("1")]),s._v("] : undefined);\n  }\n});\n")])]),s._v(" "),a("p",{attrs:{"data-nodeid":"1542"}},[s._v("对应"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"1717"}},[s._v("$every")]),a("a",{attrs:{href:"https://github.com/zloirock/core-js/blob/master/packages/core-js/internals/array-iteration.js#L58","data-nodeid":"1720"}},[s._v("源码")]),s._v("：")]),s._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"1543"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" bind = require("),a("span",{staticClass:"hljs-string"},[s._v("'../internals/function-bind-context'")]),s._v(");\n"),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" IndexedObject = require("),a("span",{staticClass:"hljs-string"},[s._v("'../internals/indexed-object'")]),s._v(");\n"),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" toObject = require("),a("span",{staticClass:"hljs-string"},[s._v("'../internals/to-object'")]),s._v(");\n"),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" toLength = require("),a("span",{staticClass:"hljs-string"},[s._v("'../internals/to-length'")]),s._v(");\n"),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" arraySpeciesCreate = require("),a("span",{staticClass:"hljs-string"},[s._v("'../internals/array-species-create'")]),s._v(");\n"),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" push = [].push;\n"),a("span",{staticClass:"hljs-comment"},[s._v("// 对 `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` 等方法进行接模拟和接入")]),s._v("\n"),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" createMethod = function (TYPE) {\n  "),a("span",{staticClass:"hljs-comment"},[s._v("// 通过魔法数字来表示具体需要对哪种方法进行模拟")]),s._v("\n  "),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" IS_MAP = TYPE == "),a("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(";\n  "),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" IS_FILTER = TYPE == "),a("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(";\n  "),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" IS_SOME = TYPE == "),a("span",{staticClass:"hljs-number"},[s._v("3")]),s._v(";\n  "),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" IS_EVERY = TYPE == "),a("span",{staticClass:"hljs-number"},[s._v("4")]),s._v(";\n  "),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" IS_FIND_INDEX = TYPE == "),a("span",{staticClass:"hljs-number"},[s._v("6")]),s._v(";\n  "),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" NO_HOLES = TYPE == "),a("span",{staticClass:"hljs-number"},[s._v("5")]),s._v(" || IS_FIND_INDEX;\n  "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" function ($"),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(", callbackfn, that, specificCreate) {\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" O = toObject($"),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(");\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" self = IndexedObject(O);\n    "),a("span",{staticClass:"hljs-comment"},[s._v("// 通过 bind 方法创建一个 boundFunction，保留 this 指向")]),s._v("\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" boundFunction = bind(callbackfn, that, "),a("span",{staticClass:"hljs-number"},[s._v("3")]),s._v(");\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" length = toLength(self.length);\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" index = "),a("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(";\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" create = specificCreate || arraySpeciesCreate;\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" target = IS_MAP ? create($"),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(", length) : IS_FILTER ? create($"),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(", "),a("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(") : undefined;\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" value, result;\n    "),a("span",{staticClass:"hljs-comment"},[s._v("// 遍历循环并执行回调方法")]),s._v("\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v(" (;length > index; index++) "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (NO_HOLES || index in self) {\n      value = self[index];\n      result = boundFunction(value, index, O);\n      "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (TYPE) {\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (IS_MAP) target[index] = result; "),a("span",{staticClass:"hljs-comment"},[s._v("// map")]),s._v("\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("else")]),s._v(" "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (result) "),a("span",{staticClass:"hljs-keyword"},[s._v("switch")]),s._v(" (TYPE) {\n          "),a("span",{staticClass:"hljs-keyword"},[s._v("case")]),s._v(" "),a("span",{staticClass:"hljs-number"},[s._v("3")]),s._v(": "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),a("span",{staticClass:"hljs-keyword"},[s._v("true")]),s._v(";              "),a("span",{staticClass:"hljs-comment"},[s._v("// some")]),s._v("\n          "),a("span",{staticClass:"hljs-keyword"},[s._v("case")]),s._v(" "),a("span",{staticClass:"hljs-number"},[s._v("5")]),s._v(": "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" value;             "),a("span",{staticClass:"hljs-comment"},[s._v("// find")]),s._v("\n          "),a("span",{staticClass:"hljs-keyword"},[s._v("case")]),s._v(" "),a("span",{staticClass:"hljs-number"},[s._v("6")]),s._v(": "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" index;             "),a("span",{staticClass:"hljs-comment"},[s._v("// findIndex")]),s._v("\n          "),a("span",{staticClass:"hljs-keyword"},[s._v("case")]),s._v(" "),a("span",{staticClass:"hljs-number"},[s._v("2")]),s._v(": push.call(target, value); "),a("span",{staticClass:"hljs-comment"},[s._v("// filter")]),s._v("\n        } "),a("span",{staticClass:"hljs-keyword"},[s._v("else")]),s._v(" "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (IS_EVERY) "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),a("span",{staticClass:"hljs-keyword"},[s._v("false")]),s._v(";  "),a("span",{staticClass:"hljs-comment"},[s._v("// every")]),s._v("\n      }\n    }\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" IS_FIND_INDEX ? -"),a("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(" : IS_SOME || IS_EVERY ? IS_EVERY : target;\n  };\n};\n"),a("span",{staticClass:"hljs-keyword"},[s._v("module")]),s._v("."),a("span",{staticClass:"hljs-keyword"},[s._v("exports")]),s._v(" = {\n  forEach: createMethod("),a("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("),\n  map: createMethod("),a("span",{staticClass:"hljs-number"},[s._v("1")]),s._v("),\n  filter: createMethod("),a("span",{staticClass:"hljs-number"},[s._v("2")]),s._v("),\n  some: createMethod("),a("span",{staticClass:"hljs-number"},[s._v("3")]),s._v("),\n  every: createMethod("),a("span",{staticClass:"hljs-number"},[s._v("4")]),s._v("),\n  find: createMethod("),a("span",{staticClass:"hljs-number"},[s._v("5")]),s._v("),\n  findIndex: createMethod("),a("span",{staticClass:"hljs-number"},[s._v("6")]),s._v(")\n};\n")])]),s._v(" "),a("p",{attrs:{"data-nodeid":"1544"}},[s._v("同样是使用了遍历的方式，并由"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"1723"}},[s._v("../internals/function-bind-context")]),s._v("提供 this 绑定能力，用魔法常量处理"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"1725"}},[s._v("forEach、map、filter、some、every、find、findIndex")]),s._v("这些数组原型方法的不同方法。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"1545"}},[s._v("重点来了，在 core-js 中，作者通过"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"1728"}},[s._v("../internals/export")]),s._v("方法导出实现原型，"),a("a",{attrs:{href:"https://github.com/zloirock/core-js/blob/master/packages/core-js/internals/export.js","data-nodeid":"1732"}},[s._v("源码")]),s._v("如下：")]),s._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"1546"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-keyword"},[s._v("module")]),s._v("."),a("span",{staticClass:"hljs-keyword"},[s._v("exports")]),s._v(" = function (options, source) {\n  "),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" TARGET = options.target;\n  "),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" GLOBAL = options.global;\n  "),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" STATIC = options.stat;\n  "),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" FORCED, target, key, targetProperty, sourceProperty, descriptor;\n  "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (GLOBAL) {\n    target = global;\n  } "),a("span",{staticClass:"hljs-keyword"},[s._v("else")]),s._v(" "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (STATIC) {\n    target = global[TARGET] || setGlobal(TARGET, {});\n  } "),a("span",{staticClass:"hljs-keyword"},[s._v("else")]),s._v(" {\n    target = (global[TARGET] || {}).prototype;\n  }\n  "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (target) "),a("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v(" (key in source) {\n    sourceProperty = source[key];\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (options.noTargetGet) {\n      descriptor = getOwnPropertyDescriptor(target, key);\n      targetProperty = descriptor && descriptor.value;\n    } "),a("span",{staticClass:"hljs-keyword"},[s._v("else")]),s._v(" targetProperty = target[key];\n    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? "),a("span",{staticClass:"hljs-string"},[s._v("'.'")]),s._v(" : "),a("span",{staticClass:"hljs-string"},[s._v("'#'")]),s._v(") + key, options.forced);\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (!FORCED && targetProperty !== undefined) {\n      "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (typeof sourceProperty === typeof targetProperty) "),a("span",{staticClass:"hljs-keyword"},[s._v("continue")]),s._v(";\n      copyConstructorProperties(sourceProperty, targetProperty);\n    }\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (options.sham || (targetProperty && targetProperty.sham)) {\n      createNonEnumerableProperty(sourceProperty, "),a("span",{staticClass:"hljs-string"},[s._v("'sham'")]),s._v(", "),a("span",{staticClass:"hljs-keyword"},[s._v("true")]),s._v(");\n    }\n    redefine(target, key, sourceProperty, options);\n  }\n};\n")])]),s._v(" "),a("p",{attrs:{"data-nodeid":"1547"}},[s._v("对应我们的 Array.prototype.every"),a("a",{attrs:{href:"https://github.com/zloirock/core-js/blob/master/packages/core-js/modules/es.array.every.js","data-nodeid":"1737"}},[s._v("源码")]),s._v("，参数为："),a("code",{attrs:{"data-backticks":"1","data-nodeid":"1739"}},[s._v("target: 'Array', proto: true")]),s._v("，表明 coe-js 需要在数组 Array 的原型上，以“污染数组原型”的方式来扩展方法。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"1548"}},[s._v("而 core-js-pure 则单独维护了一份 export 镜像"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"1742"}},[s._v("../internals/export")]),s._v("，其"),a("a",{attrs:{href:"https://github.com/zloirock/core-js/blob/master/packages/core-js-pure/override/internals/export.js","data-nodeid":"1746"}},[s._v("源码")]),s._v("我在这里不做过多讲解，你可以在本节内容学习后进一步查看。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"1549"}},[s._v("同时，core-js-pure 包中的 Override 文件，实际上是在构建阶段，复制了 packages/core-js/ 内的核心逻辑（"),a("a",{attrs:{href:"https://github.com/zloirock/core-js/blob/master/Gruntfile.js#L73","data-nodeid":"1751"}},[s._v("源码在这里")]),s._v("），同时提供了复写这些核心 polyfills 逻辑的能力，也是通过构建流程，进行 core-js-pure/override 替换覆盖：")]),s._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"1550"}},[a("code",{attrs:{"data-language":"java"}},[s._v("{\n\texpand: "),a("span",{staticClass:"hljs-keyword"},[s._v("true")]),s._v(",\n\tcwd: "),a("span",{staticClass:"hljs-string"},[s._v("'./packages/core-js-pure/override/'")]),s._v(",\n\tsrc: "),a("span",{staticClass:"hljs-string"},[s._v("'**'")]),s._v(",\n\tdest: "),a("span",{staticClass:"hljs-string"},[s._v("'./packages/core-js-pure'")]),s._v(",\n}\n")])]),s._v(" "),a("p",{attrs:{"data-nodeid":"1551"}},[s._v("这是一种非常巧妙的“利用构建能力，实现复用”的方案。但我认为，既然是 Monorepo 风格的仓库，也许一种更好的设计是将"),a("strong",{attrs:{"data-nodeid":"1758"}},[s._v("core-js 核心 polyfills 再单独拆到一个包中，core-js 和 core-js-pure 分别进行引用")]),s._v("——这种方式更能利用 Monorepo 能力，且减少了构建过程中的魔法处理。")]),s._v(" "),a("h3",{attrs:{"data-nodeid":"1552"}},[s._v("寻找最佳 Polyfill 方案")]),s._v(" "),a("p",{attrs:{"data-nodeid":"1553"}},[s._v("前文多次提到了 polyfill/垫片/补丁（下文混用这三种说法），这里我们正式对 polyfill 进行一个定义：")]),s._v(" "),a("blockquote",{attrs:{"data-nodeid":"1554"}},[a("p",{attrs:{"data-nodeid":"1555"}},[s._v("A polyfill, or polyfiller, is a piece of code (or plugin) that provides the technology that you, the developer, expect the browser to provide natively. Flattening the API landscape if you will.")])]),s._v(" "),a("p",{attrs:{"data-nodeid":"1556"}},[s._v("简单来说，"),a("strong",{attrs:{"data-nodeid":"1767"}},[s._v("polyfill 就是用社区上提供的一段代码，让我们在不兼容某些新特性的浏览器上，使用该新特性")]),s._v("。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"1557"}},[s._v("随着前端的发展，尤其是 ECMAScript 的迅速成长以及浏览器的频繁更新换代，前端使用 polyfills 技术的情况屡见不鲜。"),a("strong",{attrs:{"data-nodeid":"1778"}},[s._v("那么如何能在工程中，寻找并设计一个“最完美”的 polyfill 方案呢？"),a("strong",{attrs:{"data-nodeid":"1777"}},[s._v("注意，这里的完美指的是")]),s._v("侵入性最小，工程化、自动化程度最高，业务影响最低")]),s._v("。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"1558"}},[s._v("第一种方案："),a("strong",{attrs:{"data-nodeid":"1784"}},[s._v("手动打补丁")]),s._v("。这种方式最为简单直接，也能天然做到“按需打补丁”，但是这不是一种工程化的解决方式，方案原始而难以维护，同时对于 polyfill 的实现要求较高。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"1559"}},[s._v("于是，es5-shim 和 es6-shim 等“轮子”出现了，它们伴随着前端开发走过了一段艰辛岁月。但 es5-shim 和 es6-shim 这种笨重的方案很快被 babel-polyfill 取代，babel-polyfill 融合了 core-js 和 regenerator-runtime。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"1560"}},[s._v("但如果粗暴地使用 babel-polyfill 一次性全量导入到项目中，不和 @babel/preset-env 等方案结合，babel-polyfill 会将其所包含的所有补丁都应用在项目当中，这样直接造成了项目 size 过大的问题，且存在污染全局变量的潜在问题。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"1561"}},[s._v("于是，"),a("strong",{attrs:{"data-nodeid":"1792"}},[s._v("babel-polyfill 结合 @babel/preset-env + useBuiltins（entry） + preset-env targets 的方案")]),s._v("如今更为流行，@babel/preset-env 定义了 Babel 所需插件预设，同时由 Babel 根据 preset-env targets 配置的支持环境，自动按需加载 polyfills，使用方式如下：")]),s._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"1562"}},[a("code",{attrs:{"data-language":"java"}},[s._v("{\n  "),a("span",{staticClass:"hljs-string"},[s._v('"presets"')]),s._v(": [\n    ["),a("span",{staticClass:"hljs-string"},[s._v('"@babel/env"')]),s._v(", {\n      useBuiltIns: "),a("span",{staticClass:"hljs-string"},[s._v("'entry'")]),s._v(",\n      targets: { chrome: "),a("span",{staticClass:"hljs-number"},[s._v("44")]),s._v(" }\n    }]\n  ]\n}\n")])]),s._v(" "),a("p",{attrs:{"data-nodeid":"1563"}},[s._v("这样我们在工程代码入口处的：")]),s._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"1564"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-keyword"},[s._v("import")]),s._v(" "),a("span",{staticClass:"hljs-string"},[s._v("'@babel/polyfill'")]),s._v(";\n")])]),s._v(" "),a("p",{attrs:{"data-nodeid":"1565"}},[s._v("会被编译为：")]),s._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"1566"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-keyword"},[s._v("import")]),s._v(" "),a("span",{staticClass:"hljs-string"},[s._v('"core-js/XXXX/XXXX"')]),s._v(";\n"),a("span",{staticClass:"hljs-keyword"},[s._v("import")]),s._v(" "),a("span",{staticClass:"hljs-string"},[s._v('"core-js/XXXX/XXXXX"')]),s._v(";\n")])]),s._v(" "),a("p",{attrs:{"data-nodeid":"1567"}},[s._v("这样的方式省力省心。也是 core-js 和 Babel 深度绑定并结合的典型案例。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"1568"}},[s._v("上文提到了 babel-polyfill 融合了 core-js 和 regenerator-runtime，既然如此，我们也可以不使用 babel-polyfill，而直接使用 core-js。这里我根据 "),a("a",{attrs:{href:"https://www.npmtrends.com/babel-polyfill-vs-core-js-vs-es5-shim-vs-es6-shim","data-nodeid":"1799"}},[s._v("babel-polyfill vs core-js vs es5-shim vs es6-shim")]),s._v(" 的使用频率情况，进行比对，如下图所示：")]),s._v(" "),a("p",{attrs:{"data-nodeid":"1569"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image/M00/8C/4F/Ciqc1F_q7dKAanOXAAHwZCycIb4392.png",alt:"Drawing 1.png","data-nodeid":"1803"}})]),s._v(" "),a("div",{attrs:{"data-nodeid":"1570"}},[a("p",{staticStyle:{"text-align":"center"}},[s._v("babel-polyfill vs core-js vs es5-shim vs es6-shim 使用频率对比图")])]),s._v(" "),a("p",{attrs:{"data-nodeid":"1571"}},[s._v("我们看到，"),a("strong",{attrs:{"data-nodeid":"1809"}},[s._v("core-js 使用最多")]),s._v("，这是因为它既可以在项目中单独使用，也可以和 Babel 绑定，作为更低层的依赖出现。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"1572"}},[s._v("我们再思考一个问题：如果某个业务代码中，并没有用到配置环境填充的 polyfills，那么这些 polyfills 的引入依然出现了引用浪费的情况。实际上环境需要是一回事儿，代码是否需要却是另一回事儿。比如，我的 MPA（多页面应用）项目需要提供 Promise Polyfill，但是某个业务页面中，并没有使用 Promise 特性，理想情况并不需要在当前页面中引入 Promise Polyfill bundle。")]),s._v(" "),a("p",{staticClass:"te-preview-highlight",attrs:{"data-nodeid":"2612"}},[s._v("针对这个问题，@babel/preset-env + useBuiltins（usage） + preset-env targets 方案就出现了，"),a("strong",{attrs:{"data-nodeid":"2622"}},[s._v("注意这里的 useBuiltins 配置为 usage，它可以真正根据代码情况，分析 AST（抽象语法树）进行更细粒度的按需引用")]),s._v("。但是这种基于静态编译的按需加载补丁也是相对的，因为 JavaScript 是一种弱规则的动态语言，比如这样的代码："),a("code",{attrs:{"data-backticks":"1","data-nodeid":"2618"}},[s._v("foo.includes(() => {//...})")]),s._v("，我们无法判断出这里的 "),a("code",{attrs:{"data-backticks":"1","data-nodeid":"2620"}},[s._v("includes")]),s._v(" 是数组原型方法还是字符串原型方法，因此一般做法只能将数组原型方法和字符串原型方法同时打包为 polyfill bundle。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"1574"}},[s._v("除了在打包构建阶段植入 polyfill 以外，另外一个思路是“在线动态打补丁”，这种方案以 "),a("a",{attrs:{href:"https://polyfill.io/v3/","data-nodeid":"1824"}},[s._v("Polyfill.io")]),s._v(" 为代表，它提供了 CDN 服务，使用者可以按照所需环境，"),a("a",{attrs:{href:"https://polyfill.io/v3/url-builder/","data-nodeid":"1828"}},[s._v("生成打包链接")]),s._v("：")]),s._v(" "),a("p",{attrs:{"data-nodeid":"1575"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image/M00/8C/5A/Ciqc1F_r6aWAUh6OAAGLnnSGGnY780.png",alt:"Lark20201230-104425.png","data-nodeid":"1832"}})]),s._v(" "),a("p",{attrs:{"data-nodeid":"1576"}},[s._v("如"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"1834"}},[s._v("https://polyfill.io/v3/polyfill.min.js?features=es2015")]),s._v("，在业务中我们可以直接引入 polyfills bundle：")]),s._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"1577"}},[a("code",{attrs:{"data-language":"java"}},[s._v('<script src="https://polyfill.io/v3/polyfill.min.js?features=es2015"><\/script>\n')])]),s._v(" "),a("p",{attrs:{"data-nodeid":"1578"}},[a("strong",{attrs:{"data-nodeid":"1840"}},[s._v("在高版本浏览器上，可能会返回空内容，因为该浏览器已经支持了 ES2015 特性。如果在低版本浏览器上，将会得到真实的 polyfills bundle")]),s._v("。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"1579"}},[s._v("从工程化的角度来说，"),a("strong",{attrs:{"data-nodeid":"1846"}},[s._v("一个趋于完美的 polyfill 设计应该满足的核心原则是按需加载补丁")]),s._v("，这个按需加载主要包括两方面：")]),s._v(" "),a("ul",{attrs:{"data-nodeid":"1580"}},[a("li",{attrs:{"data-nodeid":"1581"}},[a("p",{attrs:{"data-nodeid":"1582"}},[s._v("按照用户终端环境")])]),s._v(" "),a("li",{attrs:{"data-nodeid":"1583"}},[a("p",{attrs:{"data-nodeid":"1584"}},[s._v("按照业务代码使用情况")])])]),s._v(" "),a("p",{attrs:{"data-nodeid":"1585"}},[s._v("因为按需加载补丁，意味着更小的 bundle size，直接决定了应用的性能。")]),s._v(" "),a("h3",{attrs:{"data-nodeid":"1586"}},[s._v("总结")]),s._v(" "),a("p",{attrs:{"data-nodeid":"1587"}},[s._v("从对前端项目的影响来讲，core-js 不只是一个 polyfill 仓库；从前端技术设计的角度来看，core-js 也能让我们获得更多启发和灵感。这一讲我们分析了 core-js 的设计实现，并由此延展出了工程中 polyfill 设计的方方面面。但依然留下了几个问题：")]),s._v(" "),a("ul",{attrs:{"data-nodeid":"1588"}},[a("li",{attrs:{"data-nodeid":"1589"}},[a("p",{attrs:{"data-nodeid":"1590"}},[s._v("core-js 和 Babel 生态绑定在一起，它们到底有什么联系，如何实现密切配合？")])]),s._v(" "),a("li",{attrs:{"data-nodeid":"1591"}},[a("p",{attrs:{"data-nodeid":"1592"}},[s._v("core-js 如何和 @babel/preset-env + useBuiltins（usage）配合，并利用 AST 技术，实现代码级别的按需引入？")])])]),s._v(" "),a("p",{attrs:{"data-nodeid":"1593"}},[s._v("前端基础建设和工程化，每一个环节都相互关联，我们将会在“梳理混乱的 Babel，不再被编译报错困扰”一讲中，继续进行更多探索。")]),s._v(" "),a("hr"),s._v(" "),a("h3",{attrs:{id:"精选评论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#精选评论"}},[s._v("#")]),s._v(" 精选评论")]),s._v(" "),a("h5",{attrs:{id:"xcc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xcc"}},[s._v("#")]),s._v(" xcc：")]),s._v(" "),a("blockquote",[a("p",[s._v("大佬讲的真好。虽然很多问题接触过，不过自己不会站在那个高度看待问题")])]),s._v(" "),a("h6",{attrs:{id:"编辑回复"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编辑回复"}},[s._v("#")]),s._v("     编辑回复：")]),s._v(" "),a("blockquote",[a("p",[s._v("    经验是积累出来的，继续学习，相信你会有更多收获！")])]),s._v(" "),a("h5",{attrs:{id:"浩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浩"}},[s._v("#")]),s._v(" *浩：")]),s._v(" "),a("blockquote",[a("p",[s._v("感觉前端是一个大杂烩，有好多东西需要学，好多都看不懂啊😂")])]),s._v(" "),a("h6",{attrs:{id:"编辑回复-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编辑回复-2"}},[s._v("#")]),s._v("     编辑回复：")]),s._v(" "),a("blockquote",[a("p",[s._v("    多学习学习就好喽~")])]),s._v(" "),a("h5",{attrs:{id:"浩-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浩-2"}},[s._v("#")]),s._v(" *浩：")]),s._v(" "),a("blockquote",[a("p",[s._v("是真的牛逼")])]),s._v(" "),a("h5",{attrs:{id:"俊"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#俊"}},[s._v("#")]),s._v(" *俊：")]),s._v(" "),a("blockquote",[a("p",[s._v("lucas 给大家开了个门，门里面的东西得大家用手一个个摸，期待后面的东西")])]),s._v(" "),a("h5",{attrs:{id:"tvinsh"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tvinsh"}},[s._v("#")]),s._v(" Tvinsh：")]),s._v(" "),a("blockquote",[a("p",[s._v("真棒")])])])}),[],!1,null,null,null);a.default=r.exports}}]);