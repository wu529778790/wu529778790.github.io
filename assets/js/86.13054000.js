(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{421:function(e,a,t){"use strict";t.r(a);var i=t(4),r=Object(i.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("ul",[a("li",[e._v("浏览器缓存")]),e._v(" "),a("li",[e._v("浏览器本地存储")])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://gcore.jsdelivr.net/gh/wu529778790/image/blog/20210902163320.png",alt:"20210902163320"}})]),e._v(" "),a("h2",{attrs:{id:"浏览器缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存"}},[e._v("#")]),e._v(" 浏览器缓存")]),e._v(" "),a("p",[e._v("首先通过 Cache-Control 验证强缓存是否可用")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("如果强缓存可用，直接使用")])]),e._v(" "),a("li",[a("p",[e._v("否则进入协商缓存，即发送 HTTP 请求，服务器通过请求头中的 If-Modified-Since 或者 If-None-Match 字段检查资源是否更新")]),e._v(" "),a("ol",[a("li",[e._v("若资源更新，返回资源和 200 状态码")]),e._v(" "),a("li",[e._v("否则，返回 304，告诉浏览器直接从缓存获取资源")])])])]),e._v(" "),a("p",[a("code",[e._v("强制缓存优先于协商缓存进行，若强制缓存(Expires 和 Cache-Control)生效则直接使用缓存，若不生效则进行协商缓存(Last-Modified / If-Modified-Since 和 Etag / If-None-Match)，协商缓存由服务器决定是否使用缓存，若协商缓存失效，那么代表该请求的缓存失效，返回 200，重新返回资源和缓存标识，再存入浏览器缓存中；生效则返回 304，继续使用缓存")])]),e._v(" "),a("h3",{attrs:{id:"强缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#强缓存"}},[e._v("#")]),e._v(" 强缓存")]),e._v(" "),a("p",[e._v("强缓存：不会向服务器发送请求，直接从缓存中获取，在控制台中可以看到该请求返回 200 状态码，并且 size 显示 from disk Cache 或 from memory Cache .强缓存可以通过设置两种 HTTP Header 实现：Expires 和 Cache Control")]),e._v(" "),a("h4",{attrs:{id:"expires"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#expires"}},[e._v("#")]),e._v(" Expires")]),e._v(" "),a("p",[e._v("缓存过期时间，用来指定资源到期的时间，是服务器端的具体的时间点。也就是说，Expires=max-age + 请求时间，需要和 Last-modified 结合使用。Expires 是 Web 服务器响应消息头字段，在响应 http 请求时告诉浏览器在过期时间前浏览器可以直接从浏览器缓存取数据，而无需再次请求。")]),e._v(" "),a("p",[e._v("Expires 是 HTTP/1 的产物，受限于本地时间，如果修改了本地时间，可能会造成缓存失效。Expires: Wed, 22 Oct 2018 08:41:00 GMT 表示资源会在 Wed, 22 Oct 2018 08:41:00 GMT 后过期，需要再次请求。")]),e._v(" "),a("h4",{attrs:{id:"cache-control"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cache-control"}},[e._v("#")]),e._v(" Cache-Control")]),e._v(" "),a("p",[e._v("在 HTTP/1.1 中，Cache-Control 是最重要的规则，主要用于控制网页缓存。比如当 Cache-Control:max-age=300 时，则代表在这个请求正确返回时间（浏览器也会记录下来）的 5 分钟内再次加载资源，就会命中强缓存。")]),e._v(" "),a("p",[e._v("Cache-Control 可以在请求头或者响应头中设置，并且可以组合使用多种指令：")]),e._v(" "),a("ul",[a("li",[e._v("public：所有内容都将被缓存（客户端和代理服务器都可缓存）")]),e._v(" "),a("li",[e._v("private：所有内容只有客户端可以缓存")]),e._v(" "),a("li",[e._v("no-cache：客户端缓存内容，是否使用缓存则需要经过协商缓存来验证决定")]),e._v(" "),a("li",[e._v("no-store：所有内容都不会被缓存，即不使用强制缓存，也不使用协商缓存")]),e._v(" "),a("li",[e._v("max-age：max-age=xxx (xxx is numeric)表示缓存内容将在 xxx 秒后失效")]),e._v(" "),a("li",[e._v("s-maxage（单位为 s)：同 max-age 作用一样，只在代理服务器中生效（比如 CDN 缓存）")]),e._v(" "),a("li",[e._v("max-stale：能容忍的最大过期时间")]),e._v(" "),a("li",[e._v("min-fresh：能够容忍的最小新鲜度")])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://gcore.jsdelivr.net/gh/wu529778790/image/blog/20210902163938.png",alt:"20210902163938"}})]),e._v(" "),a("h4",{attrs:{id:"expires-和-cache-control-两者对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#expires-和-cache-control-两者对比"}},[e._v("#")]),e._v(" Expires 和 Cache-Control 两者对比")]),e._v(" "),a("p",[e._v("区别就在于 Expires 是 http1.0 的产物，Cache-Control 是 http1.1 的产物，两者同时存在的话，Cache-Control 优先级高于 Expires；在某些不支持 HTTP1.1 的环境下，Expires 就会发挥用处。所以 Expires 其实是过时的产物，现阶段它的存在只是一种兼容性的写法。\n强缓存判断是否缓存的依据来自于是否超出某个时间或者某个时间段，而不关心服务器端文件是否已经更新，这可能会导致加载文件不是服务器端最新的内容，那我们如何获知服务器端内容是否已经发生了更新呢？此时我们需要用到协商缓存策略。")]),e._v(" "),a("h2",{attrs:{id:"协商缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[e._v("#")]),e._v(" 协商缓存")]),e._v(" "),a("p",[e._v("协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程")]),e._v(" "),a("p",[e._v("协商缓存生效，返回 304 和 Not Modified")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://gcore.jsdelivr.net/gh/wu529778790/image/blog/20210902164051.png",alt:"20210902164051"}})]),e._v(" "),a("p",[e._v("协商缓存失效，返回 200 和请求结果")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://gcore.jsdelivr.net/gh/wu529778790/image/blog/20210902164229.png",alt:"20210902164229"}})]),e._v(" "),a("p",[e._v("1.Last-Modified 和 If-Modified-Since")]),e._v(" "),a("p",[e._v("浏览器在第一次访问资源时，服务器返回资源的同时，在 response header 中添加 Last-Modified 的 header，值是这个资源在服务器上的最后修改时间，浏览器接收后缓存文件和 header；")]),e._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[e._v("Last-Modified: Fri, 22 Jul 2016 01:47:00 GMT\n")])])]),a("p",[e._v("浏览器下一次请求这个资源，浏览器检测到有 Last-Modified 这个 header，于是添加 If-Modified-Since 这个 header，值就是 Last-Modified 中的值；服务器再次收到这个资源请求，会根据 If-Modified-Since 中的值与服务器中这个资源的最后修改时间对比，如果没有变化，返回 304 和空的响应体，直接从缓存读取，如果 If-Modified-Since 的时间小于服务器中这个资源的最后修改时间，说明文件有更新，于是返回新的资源文件和 200")]),e._v(" "),a("p",[e._v("但是 Last-Modified 存在一些弊端：")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("如果本地打开缓存文件，即使没有对文件进行修改，但还是会造成 Last-Modified 被修改，服务端不能命中缓存导致发送相同的资源")])]),e._v(" "),a("li",[a("p",[e._v("因为 Last-Modified 只能以秒计时，如果在不可感知的时间内修改完成文件，那么服务端会认为资源还是命中了，不会返回正确的资源\n既然根据文件修改时间来决定是否缓存尚有不足，能否可以直接根据文件内容是否修改来决定缓存策略？所以在 HTTP / 1.1 出现了 ETag 和 If-None-Match")]),e._v(" "),a("p",[e._v("2.ETag 和 If-None-Match")])])]),e._v(" "),a("p",[e._v("Etag 是服务器响应请求时，返回当前资源文件的一个唯一标识(由服务器生成)，只要资源有变化，Etag 就会重新生成。浏览器在下一次加载资源向服务器发送请求时，会将上一次返回的 Etag 值放到 request header 里的 If-None-Match 里，服务器只需要比较客户端传来的 If-None-Match 跟自己服务器上该资源的 ETag 是否一致，就能很好地判断资源相对客户端而言是否被修改过了。如果服务器发现 ETag 匹配不上，那么直接以常规 GET 200 回包形式将新的资源（当然也包括了新的 ETag）发给客户端；如果 ETag 是一致的，则直接返回 304 知会客户端直接使用本地缓存即可。")]),e._v(" "),a("p",[e._v("3.两者之间对比：")]),e._v(" "),a("ul",[a("li",[e._v("首先在精确度上，Etag 要优于 Last-Modified。")])]),e._v(" "),a("p",[e._v("Last-Modified 的时间单位是秒，如果某个文件在 1 秒内改变了多次，那么他们的 Last-Modified 其实并没有体现出来修改，但是 Etag 每次都会改变确保了精度；如果是负载均衡的服务器，各个服务器生成的 Last-Modified 也有可能不一致。")]),e._v(" "),a("ul",[a("li",[e._v("第二在性能上，Etag 要逊于 Last-Modified，毕竟 Last-Modified 只需要记录时间，而 Etag 需要服务器通过算法来计算出一个 hash 值。")]),e._v(" "),a("li",[e._v("第三在优先级上，服务器校验优先考虑 Etag")])]),e._v(" "),a("p",[e._v("如果什么缓存策略都没设置，那么浏览器会怎么处理?")]),e._v(" "),a("p",[e._v("浏览器会采用一个启发式的算法，通常会取响应头中的 Date 减去 Last-Modified 值的 10% 作为缓存时间")]),e._v(" "),a("h2",{attrs:{id:"实际场景应用缓存策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实际场景应用缓存策略"}},[e._v("#")]),e._v(" 实际场景应用缓存策略")]),e._v(" "),a("p",[e._v("1.频繁变动的资源")]),e._v(" "),a("ul",[a("li",[e._v("Cache-Control: no-cache")])]),e._v(" "),a("p",[e._v("对于频繁变动的资源，首先需要使用 Cache-Control: no-cache 使浏览器每次都请求服务器，然后配合 ETag 或者 Last-Modified 来验证资源是否有效。这样的做法虽然不能节省请求数量，但是能显著减少响应数据大小。")]),e._v(" "),a("p",[e._v("2.不常变化的资源")]),e._v(" "),a("ul",[a("li",[e._v("Cache-Control: max-age=31536000")])]),e._v(" "),a("p",[e._v("通常在处理这类资源时，给它们的 Cache-Control 配置一个很大的 max-age=31536000 (一年)，这样浏览器之后请求相同的 URL 会命中强制缓存。而为了解决更新的问题，就需要在文件名(或者路径)中添加 hash， 版本号等动态字符，之后更改动态字符，从而达到更改引用 URL 的目的，让之前的强制缓存失效 (其实并未立即失效，只是不再使用了而已)。\n在线提供的类库 (如 jquery-3.3.1.min.js, lodash.min.js 等) 均采用这个模式。")]),e._v(" "),a("h2",{attrs:{id:"缓存位置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存位置"}},[e._v("#")]),e._v(" 缓存位置")]),e._v(" "),a("ul",[a("li",[e._v("Service Worker")]),e._v(" "),a("li",[e._v("Memory Cache")]),e._v(" "),a("li",[e._v("Disk Cache")]),e._v(" "),a("li",[e._v("Push Cache")])]),e._v(" "),a("p",[e._v("Service Worker 借鉴了 Web Worker 的 思路，即让 JS 运行在主线程之外，由于它脱离了浏览器的窗体，因此无法直接访问 DOM。虽然如此，但它仍然能帮助我们完成很多有用的功能，比如离线缓存、消息推送和网络代理等功能。其中的离线缓存就是 Service Worker Cache。")]),e._v(" "),a("p",[e._v("Service Worker 同时也是 PWA 的重要实现机制，关于它的细节和特性，我们将会在后面的 PWA 的分享中详细介绍。")]),e._v(" "),a("h2",{attrs:{id:"浏览器本地存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器本地存储"}},[e._v("#")]),e._v(" 浏览器本地存储")]),e._v(" "),a("ul",[a("li",[e._v("cookie 并不适合存储，而且存在非常多的缺陷。")]),e._v(" "),a("li",[e._v("Web Storage 包括 localStorage 和 sessionStorage, 默认不会参与和服务器的通信。")]),e._v(" "),a("li",[e._v("IndexedDB 为运行在浏览器上的非关系型数据库，为大型数据的存储提供了接口。")])]),e._v(" "),a("h2",{attrs:{id:"参考链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考链接"}},[e._v("#")]),e._v(" 参考链接")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/ljianshu/Blog/issues/23",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/ljianshu/Blog/issues/23"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.cn/post/6844904021308735502",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://juejin.cn/post/6844904021308735502"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=r.exports}}]);