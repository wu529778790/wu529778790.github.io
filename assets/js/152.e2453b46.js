(window.webpackJsonp=window.webpackJsonp||[]).push([[152],{488:function(t,a,s){"use strict";s.r(a);var e=s(4),d=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",{attrs:{"data-nodeid":"25200"}},[t._v("这一讲我将从整体上梳理前端开发的演进历史，并从渲染方案架构升级的案例出发，带你了解现代化开发的方向。这部分内容并不涉及具体技术细节，更多的是作为本专栏的导读，带你体会现代化前端架构和基建的背景以及目前前端开发的大环境。")]),t._v(" "),a("h3",{attrs:{"data-nodeid":"25201"}},[t._v("前端技术发展轨迹")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25202"}},[t._v("过去十多年，前端技术发展日新月异，互联网风口也从 PC 时代过渡到移动时代甚至智能时代。其间，前端岗位从无到有，再到如今扮演了至关重要的角色。相应地，前端基建和架构也慢慢浮出水面，呈现百花齐放的场景，技术环节自然也愈发复杂。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25203"}},[t._v("我们先从前端的技术发展轨迹说起，如下图所示：")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25204"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image2/M01/00/66/Cip5yF_W_2uASczcAADjzoYuwcY422.png",alt:"图片1.png","data-nodeid":"25316"}})]),t._v(" "),a("div",{attrs:{"data-nodeid":"25205"}},[a("p",{staticStyle:{"text-align":"center"}},[t._v("前端技术的发展轨迹图")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"25206"}},[t._v("在静态网页 + 后端 MVC 技术架构时期，严格来说，并没有专职前端工程师的职位。Web 工程师主要集中在后端方向，通过 Model 模型层进行数据的存储和读取、Controller 控制层对数据进行处理并实现业务逻辑需求，最终在 View 视图层展示数据。这时候，"),a("strong",{attrs:{"data-nodeid":"25322"}},[t._v("每次请求都对应了一个静态页面的生成过程，我们把这种技术时代称为 Web1.0")]),t._v("。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25207"}},[t._v("接着，随着"),a("strong",{attrs:{"data-nodeid":"25328"}},[t._v("2005 年 Ajax 技术的出现，标志了 Web1.0 到 Web2.0 的重要演进")]),t._v("。此时，出现了真正意义上的前后端分离概念，这也使得前端工程师开始占据开发岗位的一席之地。前端通过 Ajax 技术获取数据，进行页面的展现和交互，而后端往往通过 Restful 接口，和前端进行协作。这个时期，前端需要大量地处理数据，因此前端 MVC 框架得到了发展。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25208"}},[t._v("比如，早期极具代表性的 Backbone.js 框架，架构风格非常明显，我们可以看一下如下代码：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("M")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Backbone"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Model"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("extend")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n　　defaults"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lucas"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n　　"),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("initialize")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n　　　　"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"change"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n　　　　　　console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"change"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n　　　　"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n　　"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" model "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("M")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",{attrs:{"data-nodeid":"25210"}},[a("strong",{attrs:{"data-nodeid":"25337"}},[t._v("这里的")]),a("code",{attrs:{"data-backticks":"1","data-nodeid":"25333"}},[t._v("Backbone.Model")]),t._v("实际上不仅包含了数据"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"25335"}},[t._v('{name: "lucas"}')]),t._v("，其实也包含了数据变更时的监听事件。对应 View 层代码：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"25211"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" V = Backbone.View.extend({\n　　initialize: function() {\n　　　　"),a("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".listenTo("),a("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".model, "),a("span",{staticClass:"hljs-string"},[t._v('"change"')]),t._v(", "),a("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".show)\n　　},\n　　show: funtion(model) {\n　　　　$("),a("span",{staticClass:"hljs-string"},[t._v('"#id"')]),t._v(").append("),a("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".model.name)\n　　}\n})\n"),a("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" m= "),a("span",{staticClass:"hljs-keyword"},[t._v("new")]),t._v(" M()\n"),a("span",{staticClass:"hljs-keyword"},[t._v("var")]),t._v(" v = "),a("span",{staticClass:"hljs-keyword"},[t._v("new")]),t._v(" V({model: m})\nm.set("),a("span",{staticClass:"hljs-string"},[t._v('"name"')]),t._v(", "),a("span",{staticClass:"hljs-string"},[t._v('"hi"')]),t._v(")\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"25212"}},[t._v("Backbone.js 的出现是革命性的。但是以上述代码为例，"),a("strong",{attrs:{"data-nodeid":"25343"}},[t._v("如果业务足够复杂的话，上述状态机一般的代码就会成为负担，代码量也变得非常臃肿，难以维护")]),t._v("。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25213"}},[t._v("随着前端处理数据理念的革新，一种更新潮的 MVVM（View + ViewModel + Model）模式框架就出现了，MVVM 和 MVC 最大的区别在于：MVVM 采用双向绑定（Data Binding）或自动渲染更新。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25214"}},[t._v("也就是说，View 层的变动，可以自动反映在 ViewModel 层。Angular 和 Vue 都采用这种模式。虽然 React 官方声称自己只是一个 View 层类库，但是 React 搭配数据状态管理生态，也符合 MVVM 模式。当然 React 并不是双向绑定风格的解决方案，自动渲染更新也代表了一种潮流和方向。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25215"}},[t._v("整体看来，架构层面 MVC 风格向 MVVM 风格的演进，不仅简化了数据与视图的依赖，还解决了数据频繁更新的问题。再加上虚拟 DOM 理念，为开发者屏蔽了 DOM 操作，业界框架方案逐渐稳定，这种低耦合模式也代表了现代化的设计理念。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25216"}},[t._v("这个时期，前后端分离技术发展到了顶峰，前端框架也互相学习借鉴，直到如今的"),a("strong",{attrs:{"data-nodeid":"25352"}},[t._v("Vue/React/Angular 三足鼎立")]),t._v("的局面。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25217"}},[t._v("这个时代的稳定性一直持续到 Node.js 的崛起，随着 Node.js 的出现，稳固的技术体系瞬间被打破。通过 Node.js，除了前端工具链、工程化得以发展，前端也实现 BFF（Backend For Frontend）层，这样的架构设计好处显而易见：")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"25218"}},[a("li",{attrs:{"data-nodeid":"25219"}},[a("p",{attrs:{"data-nodeid":"25220"}},[t._v("前端工程师可以"),a("strong",{attrs:{"data-nodeid":"25359"}},[t._v("自行编写后端服务，实现数据的适配")]),t._v("，应用场景包括接口的整合编排、字段裁剪；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"25221"}},[a("p",{attrs:{"data-nodeid":"25222"}},[t._v("前端工程师可以实现"),a("strong",{attrs:{"data-nodeid":"25365"}},[t._v("SSR（服务端渲染直出）技术")]),t._v("，达到提升首屏性能以及 SEO 友好的目的；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"25223"}},[a("p",{attrs:{"data-nodeid":"25224"}},[t._v("前端工程师可以实现各种"),a("strong",{attrs:{"data-nodeid":"25371"}},[t._v("后端领域服务")]),t._v("。")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"25225"}},[t._v("为了“紧跟技术潮流”的发展，Vue 和 React 等当红框架依靠虚拟 DOM 技术，推出同构方案。SSR 架构模式横空出世，成了前端技术演进的新方向。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25226"}},[t._v("但是 Node.js 技术不是银弹，SSR 架构也不是毫无成本。前端工程师落地 Node.js 技术，就要关心服务器的运维、部署、发布、监控。有没有一种“just work”的技术，使得我们能够更轻松地专注前端业务代码的开发，直接上手 Node.js 呢？")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25227"}},[t._v("为了解决上述问题，"),a("strong",{attrs:{"data-nodeid":"25379"}},[t._v("Serverless 理念")]),t._v("应运而生。简单来说，我们可以将服务器的运维功能都交给 Serverless 平台进行管理，研发人员只需要专注于实现云函数即可完成功能开发。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25228"}},[t._v("你看，短短十多年，前端技术发展和演进史已经非常精彩。其实这段演进当中，也有诸多值得关注的里程碑和代表技术理念，比如以下几点。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25229"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image/M00/8A/CE/Ciqc1F_ayhyANkK4AADjomKGK_s552.png",alt:"前端发展和演进史.png","data-nodeid":"25383"}})]),t._v(" "),a("p",{attrs:{"data-nodeid":"25230"}},[a("strong",{attrs:{"data-nodeid":"25396"}},[t._v("1. 以 GraphQL 技术为代表的数据源聚合和字段裁剪方案")]),a("br"),t._v(" "),a("strong",{attrs:{"data-nodeid":"25397"}},[t._v("2. 以组件化架构为代表的 UI 搭建技术")]),t._v("，在 UI 搭建技术里面，我们也可以总结出一个微观技术方向：")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"25231"}},[a("li",{attrs:{"data-nodeid":"25232"}},[a("p",{attrs:{"data-nodeid":"25233"}},[t._v("以原子组件为基准的组件化方案（Ant Design、Element）")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"25234"}},[a("p",{attrs:{"data-nodeid":"25235"}},[t._v("以模板库为代表（Ant Design Pro）的一体化组件化方案")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"25236"}},[a("p",{attrs:{"data-nodeid":"25237"}},[t._v("以 No code/Low code 为代表的配置化解决方案")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"25238"}},[a("p",{attrs:{"data-nodeid":"25239"}},[t._v("以机器学习智能化为代表的搭建方案（设计图 → 代码直出）")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"25240"}},[a("strong",{attrs:{"data-nodeid":"25419"}},[t._v("3. 以微前端为代表的、前端应用聚合为单体应用的工程方案")]),a("br"),t._v(" "),a("strong",{attrs:{"data-nodeid":"25420"}},[t._v("4. 以 PWA、小程序、快应用等为代表的平台化方案")]),a("br"),t._v(" "),a("strong",{attrs:{"data-nodeid":"25421"}},[t._v("5. 以 PhoneGap → Ionic → React Native → Flutter 等演进方向为代表的移动端跨端方案")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"25241"}},[t._v("总之，前端技术发展从没有一刻停歇，而在技术架构演进的过程中，需要前端开发者不断保持进步和学习。其中，对于基础建设和架构设计的学习，将会是最核心、最重要的学习方向和目标。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25242"}},[t._v("下面，我们简单了解一下现代技术架构。")]),t._v(" "),a("h3",{attrs:{"data-nodeid":"25243"}},[t._v("现代化的前端技术架构解读")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25244"}},[a("strong",{attrs:{"data-nodeid":"25429"}},[t._v("一方面，前端领域的现代技术架构，永远无法脱离应用终端和宿主")]),t._v("。这其中：前端不再局限于 PC 和移动智能手机端，智能手表、眼镜会是新的平台方向，同时文件系统、相机、PWA 和硬件传感器等新型 API 都已经应用在 Web 前端当中。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25245"}},[a("strong",{attrs:{"data-nodeid":"25438"}},[t._v("第二方面，现代 JavaScript 也发展成为一种真正成熟的语言，并且还将会持续引入新的特性和功能")]),t._v("。同时"),a("strong",{attrs:{"data-nodeid":"25439"}},[t._v("TypeScript，甚至 Elm、PureScript 和 ReasonML 将会得到更多关注")]),t._v("。因此，一套现代化的前端方案，必然要处理语言的发展和宿主的碎片化、滞后性这一矛盾，也必然会有一个更厚重的编译。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25246"}},[t._v("第三方面，网络基础设施永远都在变得更快、更稳定，流媒体和视频点播成为日常，"),a("strong",{attrs:{"data-nodeid":"25445"}},[t._v("前端的用户体验和富媒体技术愈发成为应用的关键")]),t._v("。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25247"}},[t._v("基于上述背景，现代化前端技术架构的特点呼之欲出：")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"25248"}},[a("li",{attrs:{"data-nodeid":"25249"}},[a("p",{attrs:{"data-nodeid":"25250"}},[t._v("组件化是基本 UI 架构；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"25251"}},[a("p",{attrs:{"data-nodeid":"25252"}},[t._v("依托于 SSR 同构技术以及心智负担的最小化，框架层面提供的虚拟 DOM 会成为生态标配；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"25253"}},[a("p",{attrs:{"data-nodeid":"25254"}},[t._v("数据状态管理方案将会以职责单一、minimal necessary 为目标，以组合性、函数式为理念，而不以双向数据流和单向数据流的区分为重点；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"25255"}},[a("p",{attrs:{"data-nodeid":"25256"}},[t._v("前端向传统后端领域进军是必然，一个 CSR/SSR 可切换的协作方案可以把前端优势特点放大到最大。")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"25257"}},[t._v("总之，基础建设和工程化建设、代码设计和架构之道，也将围绕以上几个特点给出答案。我们的课程也会围绕这些方向展开。")]),t._v(" "),a("h3",{attrs:{"data-nodeid":"25258"}},[t._v("从 CSR → SSR → NSR → ESR 渲染方案演进看前端架构演进方向")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25259"}},[t._v("上面我们从宏观的角度阐述了前端技术架构方向。这一部分，我会以前端渲染架构为例，从真实的技术环节、更立体地说明架构演进。我将以 CSR → SSR → NSR → ESR 方案来进行讲解。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25260"}},[a("strong",{attrs:{"data-nodeid":"25458"}},[t._v("CSR：Client Side Rendering")]),t._v("，浏览器端渲染也许是大家最为熟悉的渲染架构。这种渲染架构很好理解，如下图所示：")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25261"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image/M00/84/91/Ciqc1F_TbNGAE7ADAAMPSImvmcM224.png",alt:"Drawing 1.png","data-nodeid":"25461"}})]),t._v(" "),a("p",{attrs:{"data-nodeid":"25262"}},[t._v("CSR 渲染架构图（图片来源："),a("a",{attrs:{href:"https://developers.google.com/web/updates/2019/02/rendering-on-the-web","data-nodeid":"25465"}},[t._v("https://developers.google.com/web/updates/2019/02/rendering-on-the-web")]),t._v("）")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25263"}},[t._v("CSR 渲染架构的特点非常明显：")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"25264"}},[a("li",{attrs:{"data-nodeid":"25265"}},[a("p",{attrs:{"data-nodeid":"25266"}},[t._v("实现了前后端架构分离，实现了前后端职责分离；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"25267"}},[a("p",{attrs:{"data-nodeid":"25268"}},[t._v("TTFB 时间最小，但由于客户端和服务端会有多次交互（获取静态资源、获取数据）才能进行渲染，实际首屏效果以及 FCP/FMP 时间不够理想。")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"25269"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image/M00/84/9C/CgqCHl_TbNeABkBtAABufch6K5o021.png",alt:"Drawing 2.png","data-nodeid":"25472"}})]),t._v(" "),a("p",{attrs:{"data-nodeid":"25270"}},[t._v("CSR 渲染时序图（图片来源："),a("a",{attrs:{href:"https://developers.google.com/web/updates/2019/02/rendering-on-the-web","data-nodeid":"25476"}},[t._v("https://developers.google.com/web/updates/2019/02/rendering-on-the-web")]),t._v("）")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25271"}},[t._v("我们可以通过代码分离等技术弥补实际内容渲染的滞后，但从渲染架构上讲，CSR 却有着基因上的弊端。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25272"}},[a("strong",{attrs:{"data-nodeid":"25483"}},[t._v("SSR：Server Side Rendering")]),t._v("，在服务端完成页面模板、数据预取、填充，并且在服务端就可以将完整的 HTML 内容返回给浏览器。如下图：")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25273"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image/M00/84/91/Ciqc1F_TbN6AbhWeAAMt7v_XiOk193.png",alt:"Drawing 3.png","data-nodeid":"25486"}})]),t._v(" "),a("p",{attrs:{"data-nodeid":"25274"}},[t._v("SSR 渲染架构图（图片来源："),a("a",{attrs:{href:"https://developers.google.com/web/updates/2019/02/rendering-on-the-web","data-nodeid":"25490"}},[t._v("https://developers.google.com/web/updates/2019/02/rendering-on-the-web")]),t._v("）")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25275"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image/M00/84/9C/CgqCHl_TbOSANVS_AABr6t8iQEQ369.png",alt:"Drawing 4.png","data-nodeid":"25494"}})]),t._v(" "),a("p",{attrs:{"data-nodeid":"25276"}},[t._v("SSR 渲染时序图（图片来源："),a("a",{attrs:{href:"https://developers.google.com/web/updates/2019/02/rendering-on-the-web","data-nodeid":"25498"}},[t._v("https://developers.google.com/web/updates/2019/02/rendering-on-the-web")]),t._v("）")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25277"}},[t._v("实际上，SSR 还涉及更多内容：我们在服务端预取了数据，并返回了数据和 HTML 内容。理想情况下，不需要在客户端再次请求数据，而是直接消费数据即可。因此我们"),a("strong",{attrs:{"data-nodeid":"25505"}},[t._v("可以将 SSR 和 CSR 相结合，即实现一个基于 hydration（注水） 的 SSR 和 CSR 结合方案")]),t._v("。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25278"}},[t._v("先来解释一下 hydration，这个概念和同构应用中数据的获取和消费有关。在服务器端渲染时，首先服务端请求接口拿到数据，处理并准备好数据状态（如果使用 Redux，就进行 store 的更新）。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25279"}},[t._v("为了减少客户端的请求，我们需要保留住这个状态。一般做法是在服务器端返回 HTML 字符串的时候，将数据 JSON.stringify 一并返回，这个过程，叫作脱水（dehydrate）；在客户端，就不再需要进行数据的请求了，可以直接使用服务端下发下来的数据，这个过程叫注水（hydrate）。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25280"}},[t._v("用代码来表示，我们将数据放到 window 变量上：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"25281"}},[a("code",{attrs:{"data-language":"java"}},[t._v('ctx.body = `\n  <!DOCTYPE html>\n  <html lang="en">\n    <head>\n      <meta charset="UTF-8">\n    </head>\n    <body>\n        <script>\n        window.context = {\n          initialState: ${JSON.stringify(store.getState())}\n        }\n      <\/script>\n      <div id="app">\n          // ...\n      </div>\n    </body>\n  </html>\n`\n')])]),t._v(" "),a("p",{attrs:{"data-nodeid":"25282"}},[t._v("对应客户端：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"25283"}},[a("code",{attrs:{"data-language":"java"}},[t._v("export "),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" getClientStore = () => {\n  "),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" defaultState = JSON.parse(window.context.state)\n  "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" createStore(reducer, defaultState, applyMiddleware(thunk))\n}\nReactDOM.hydrate(<App date={getClientStore().getState()} />, document.getElementById("),a("span",{staticClass:"hljs-string"},[t._v("'root'")]),t._v("))\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"25284"}},[t._v("而基于 hydration 的 SSR 方案，如下图代码：")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25285"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image/M00/88/88/Ciqc1F_W__SALwrUAAYHEKkIYNQ282.png",alt:"图片2.png","data-nodeid":"25513"}})]),t._v(" "),a("p",{attrs:{"data-nodeid":"25286"}},[t._v("我们可以将上述渲染架构方案用下面这张图来总结：")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25287"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image/M00/84/91/Ciqc1F_TbPWAd6HsAABr6t8iQEQ624.png",alt:"Drawing 6.png","data-nodeid":"25517"}})]),t._v(" "),a("p",{attrs:{"data-nodeid":"25288"}},[t._v("SSR 渲染架构方案图（图片来源："),a("a",{attrs:{href:"https://developers.google.com/web/updates/2019/02/rendering-on-the-web","data-nodeid":"25521"}},[t._v("https://developers.google.com/web/updates/2019/02/rendering-on-the-web")]),t._v("）")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25289"}},[t._v("其实，如果将性能优化做到极致，SSR 还可以发展为：Streaming server rendering（流式 SSR 渲染）或 Progressive Rehydration（渐进式 SSR 渲染）。")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"25290"}},[a("li",{attrs:{"data-nodeid":"25291"}},[a("p",{attrs:{"data-nodeid":"25292"}},[t._v("流式 SSR 渲染，允许服务端通过 stream 的方式向浏览器发送 HTML 内容。在 React 中，我们可以使用"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"25525"}},[t._v("renderToNodeStream()")]),t._v("方法来完成流式 SSR 渲染。")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"25293"}},[a("p",{attrs:{"data-nodeid":"25294"}},[t._v("渐进式 SSR 渲染可以允许在 hydrating 没有完全结束前，部分已经渲染并注水完成的页面内容，可以优先完成交互响应。React 专门将"),a("a",{attrs:{href:"https://github.com/facebook/react/pull/14717","data-nodeid":"25530"}},[t._v("Partial Hydration")]),t._v("开了一个 PR 来讨论。")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"25295"}},[t._v("在 SSR 技术下，还有类似 Bigpipe 的 Partial Rehydration 技术以及借助 Service Worker 完成的 Trisomorphic Rendering 技术，这里我们不再一一讨论。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25296"}},[t._v("说完 SSR，我们再来看一些更新潮的渲染技术：NSR 和 ESR 渲染方案最近几年也正在逐渐落地实施。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25297"}},[a("strong",{attrs:{"data-nodeid":"25542"}},[t._v("NSR：Native Side Rendering")]),t._v("，这是一种在 hybrid 中特有的渲染技术。简单说就是"),a("strong",{attrs:{"data-nodeid":"25543"}},[t._v("通过 Native 渲染生成 HTML 数据，并且缓存在客户端")]),t._v("。这样一来，对于一个 hybrid WebView 的用户访问，会优先从离线包中加载离线页面模板，再通过前端 Ajax/或客户端能力请求数据，最终完成页面完整的展示。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25298"}},[t._v("这样做的好处显而易见：我们将服务器的渲染工作放在了一个个独立的移动设备中，并借助离线存储技术，实现了页面的预加载，同时又不会增加额外的服务器压力。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25299"}},[a("strong",{attrs:{"data-nodeid":"25549"}},[t._v("ESR：Edge Side Rendering")]),t._v("，边缘渲染则更加激进。ESR 其实借助了最近几年较火的“边缘计算”能力。")]),t._v(" "),a("blockquote",{attrs:{"data-nodeid":"25300"}},[a("p",{attrs:{"data-nodeid":"25301"}},[t._v("边缘计算，是指在靠近物或数据源头的一侧，采用网络、计算、存储、应用核心能力为一体的开放平台，就近提供最近端服务。其应用程序在边缘侧发起，产生更快的网络服务响应，满足行业在实时业务、应用智能、安全与隐私保护等方面的基本需求。边缘计算处于物理实体和工业连接之间，或处于物理实体的顶端。而云端计算，仍然可以访问边缘计算的历史数据。")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"25302"}},[t._v("ESR 渲染利用了 CDN 能力。ESR"),a("strong",{attrs:{"data-nodeid":"25556"}},[t._v("会在 CDN 上缓存页面的静态部分，这样在用户访问页面时，可以快速返回给用户静态内容，同时在 CDN 节点上也发起动态部分内容请求，在动态内容获取之后，利用流的方式，继续返回给用户")]),t._v("。该项技术在阿里中已经有了试水，但真正更广泛地落地和实施，有待后续验证和观察。总之借助边缘计算能力，前端渲染架构的想象空间会被无限放大。")]),t._v(" "),a("h3",{attrs:{"data-nodeid":"25303"}},[t._v("总结")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25304"}},[t._v("这一讲我们纵览了近十多年的前端技术发展以及相关技术方案的演进过程，并以渲染架构为例，重点剖析了从传统 CSR 到 SSR、NSR 再到 ESR 的思路。这一系列发展过程有的以基础设施（比如网络发展）为红利，有的以语言或框架演进为背书。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"25305"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image2/M01/00/67/Cip5yF_XAB6AM-sFAAZim-NM1GE633.png",alt:"导读.png","data-nodeid":"25561"}})]),t._v(" "),a("p",{attrs:{"data-nodeid":"25306"}},[t._v("无论技术发展的脚步多快，无论什么样的技术架构，都离不开基础建设和架构设计。就让我们以当前“最先进”的理念，进入最核心的基础建设和架构设计的学习吧！")]),t._v(" "),a("hr",{attrs:{"data-nodeid":"25307"}}),t._v(" "),a("p",{attrs:{"data-nodeid":"25308"}},[a("a",{attrs:{href:"https://shenceyun.lagou.com/t/mka","data-nodeid":"25567"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image2/M01/00/66/CgpVE1_W_x2AaW0rAAdqMM6w3z0145.png",alt:"大前端引流.png","data-nodeid":"25566"}})])]),t._v(" "),a("p",{staticClass:"te-preview-highlight",attrs:{"data-nodeid":"25309"}},[t._v("对标阿里P7技术需求 + 每月大厂内推，6 个月助你斩获名企高薪 Offer。"),a("a",{attrs:{href:"https://shenceyun.lagou.com/t/mka","data-nodeid":"25571"}},[t._v("点此链接，快来领取！")])]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"精选评论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#精选评论"}},[t._v("#")]),t._v(" 精选评论")]),t._v(" "),a("h5",{attrs:{id:"野"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#野"}},[t._v("#")]),t._v(" *野")]),t._v(" "),a("blockquote",[a("p",[t._v("看了这篇文章后对SSR有了新的认识，以前项目中使用next做服务端渲染，其实改进之处在于可以借助hydration做到初次请求在服务端完成用来提高客户端渲染效率；NSR使用离线资源渲染HTML首屏减少网络请求的方案很棒，还有边缘计算，把一些低复杂度的运算放在前端完成也算是边缘计算了吧；serverless终归还是后端向的云函数，我想开发成本大概未必比开发后端服务更低吧，只是减少了部署运维的成本")])]),t._v(" "),a("h5",{attrs:{id:"霄"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#霄"}},[t._v("#")]),t._v(" *霄")]),t._v(" "),a("blockquote",[a("p",[t._v("二刷，再看完提供的 rendering on the web （也没有完全吸收理解）的外链后，对各种渲染方案有了感性的理解，之后亟待实践，另外对 SSR 那张图反复思考总结：get bundle.js 是在服务端发起，所以利用 stream 在 bundle.js 没处理完但 Data 已经全部获取即可先把拼装好的静态页面返回浏览器（所以图中是 Data 完毕接着 FCP）以便尽快呈现能容给用户，再等服务端处理完所有 bundle.js ，同时由于流式处理数据服务端也是一边获取解析一边传送给客户端。所以 bundle.js 是先经过服务端请求，服务端流式获取再流式响应给客户端。不知道我的理解对不对，不对的话请老师指正并解释下这张图。")])]),t._v(" "),a("h6",{attrs:{id:"讲师回复"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复"}},[t._v("#")]),t._v("     讲师回复")]),t._v(" "),a("blockquote",[a("p",[t._v("    没毛病，你的理解很到位")])]),t._v(" "),a("h5",{attrs:{id:"宇"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#宇"}},[t._v("#")]),t._v(" **宇")]),t._v(" "),a("blockquote",[a("p",[t._v("edge computing！去年看到国外好多phd职位找这个方向的，最近很火啊")])]),t._v(" "),a("h5",{attrs:{id:"_1880"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1880"}},[t._v("#")]),t._v(" **1880")]),t._v(" "),a("blockquote",[a("p",[t._v("虽然看得有些懵逼，了解一下总是有好处的，至少知道还有好多东西需要学习！😂😂😂")])]),t._v(" "),a("h6",{attrs:{id:"编辑回复"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编辑回复"}},[t._v("#")]),t._v("     编辑回复")]),t._v(" "),a("blockquote",[a("p",[t._v("    多学习、多积累，加油！")])]),t._v(" "),a("h5",{attrs:{id:"阳"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#阳"}},[t._v("#")]),t._v(" **阳")]),t._v(" "),a("blockquote",[a("p",[t._v("这篇文章感触颇多，我们从最初的CSR（浏览端渲染），到SSR（服务端渲染），再到NSR（缓存在客户端渲染），到目前的发展的ESR（边缘渲染）渲染架构，让我对渲染架构有了一个宏观的认知。我觉着如果了解这些渲染架构，再应用在项目中，对前端性能有很大的帮助。")])]),t._v(" "),a("h5",{attrs:{id:"亮"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#亮"}},[t._v("#")]),t._v(" *亮")]),t._v(" "),a("blockquote",[a("p",[t._v("边缘计算有哪些运用使用上了")])]),t._v(" "),a("h6",{attrs:{id:"讲师回复-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-2"}},[t._v("#")]),t._v("     讲师回复")]),t._v(" "),a("blockquote",[a("p",[t._v("    阿里号称有使用，可以找一下相关介绍，但是目前还不算成熟")])]),t._v(" "),a("h5",{attrs:{id:"强"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#强"}},[t._v("#")]),t._v(" *强")]),t._v(" "),a("blockquote",[a("p",[t._v("有种一口气想看完的感觉，期待～")])]),t._v(" "),a("h5",{attrs:{id:"目地说12333"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#目地说12333"}},[t._v("#")]),t._v(" **目地说12333")]),t._v(" "),a("blockquote",[a("p",[t._v("涨知识了~")])])])}),[],!1,null,null,null);a.default=d.exports}}]);