(window.webpackJsonp=window.webpackJsonp||[]).push([[182],{520:function(t,a,s){"use strict";s.r(a);var e=s(4),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",{attrs:{"data-nodeid":"31022"}},[t._v("前几讲我们分别介绍了 Node.js 在同构项目以及性能守卫服务中的应用。结合当下热点，这一讲我们继续深入讲解 Node.js 另外一个重要的应用场景：企业级 BFF 网关。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"31023"}},[t._v("网关这个话题可以和微服务、Serverless 等概念相结合，想象空间无限大，同时我们又要深入网关实现代码，抽丝剥茧。下面我们就开始今天内容的学习，请你做好准备。")]),t._v(" "),a("h3",{attrs:{"data-nodeid":"31024"}},[t._v("BFF 网关介绍和优缺点梳理")]),t._v(" "),a("p",{attrs:{"data-nodeid":"31025"}},[t._v("首先，我们对 BFF 网关做一个定义。BFF 即 Backend For Frontend，翻译过来就是服务于前端的后端。这个概念最早在"),a("a",{attrs:{href:"https://samnewman.io/patterns/architectural/bff/?fileGuid=xxQTRXtVcqtHK6j8","data-nodeid":"31196"}},[t._v("Pattern: Backends For Frontends")]),t._v("中提出，它不是一种技术，而是一种"),a("strong",{attrs:{"data-nodeid":"31206"}},[t._v("逻辑分层")]),t._v("：在后端普遍采用微服务的技术背景下，"),a("strong",{attrs:{"data-nodeid":"31207"}},[t._v("作为适配层能够更好地为前端服务，而传统业务后端只需要关注自己的微服务")]),t._v("即可。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"31026"}},[t._v("我们结合下图进行拆解：")]),t._v(" "),a("p",{attrs:{"data-nodeid":"34120"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M01/21/5E/Cgp9HWBURl6AGdLyAAGLpDcAPtI043.png",alt:"Drawing 0.png","data-nodeid":"34124"}})]),t._v(" "),a("div",{attrs:{"data-nodeid":"34121"}},[a("p",{staticStyle:{"text-align":"center"}},[t._v("BFF 网关拆解图")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"31029"}},[t._v("如图所示，我们把用户体验适配和 API 网关聚合层合称为广义的 BFF 层，在 BFF 层的上游是各种后端业务微服务，在 BFF 下游就是各端应用。从职责上看，BFF 层向下给端提供 HTTP 接口，向上通过调用 HTTP 或 RPC 获取数据进行加工，最终完成整个 BFF 层的闭环。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"31030"}},[t._v("对比传统的架构，我们可以得出 BFF 层设计的优势：")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"31031"}},[a("li",{attrs:{"data-nodeid":"31032"}},[a("p",{attrs:{"data-nodeid":"31033"}},[a("strong",{attrs:{"data-nodeid":"31219"}},[t._v("降低沟通成本")]),t._v("，领域模型与页面数据更好地解耦；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"31034"}},[a("p",{attrs:{"data-nodeid":"31035"}},[t._v("提供"),a("strong",{attrs:{"data-nodeid":"31225"}},[t._v("更好的用户体验")]),t._v("，比如可以做到多端应用适配，根据不同端，提供更精简的数据。")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"31036"}},[t._v("但是 BFF 层需要谁来开发呢？这就引出了 BFF 的一些痛点：")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"31037"}},[a("li",{attrs:{"data-nodeid":"31038"}},[a("p",{attrs:{"data-nodeid":"31039"}},[a("strong",{attrs:{"data-nodeid":"31231"}},[t._v("需要解决分工问题")]),t._v("，作为衔接前与后的环节，需要界定前后端职责，明确开发归属；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"31040"}},[a("p",{attrs:{"data-nodeid":"31041"}},[a("strong",{attrs:{"data-nodeid":"31236"}},[t._v("链路复杂")]),t._v("，引入 BFF 层之后，流程变得更加烦琐；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"31042"}},[a("p",{attrs:{"data-nodeid":"31043"}},[a("strong",{attrs:{"data-nodeid":"31241"}},[t._v("资源浪费")]),t._v("，BFF 层会带来一定额外资源的占用，需要有较好的弹性伸缩扩容机制。")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"31044"}},[t._v("通过分析 BFF 层的优缺点，我们可以明确打造一个 BFF 网关需要考虑的问题。而对于前端开发者来说，使用 Node.js 实现一个 BFF 网关则是一项当仁不让的工作。我们继续往下看。")]),t._v(" "),a("h3",{attrs:{"data-nodeid":"31045"}},[t._v("打造 BFF 网关需要考虑的问题")]),t._v(" "),a("h4",{attrs:{"data-nodeid":"31046"}},[t._v("数据处理")]),t._v(" "),a("p",{attrs:{"data-nodeid":"31047"}},[t._v("这里的数据处理，主要包括了：")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"31048"}},[a("li",{attrs:{"data-nodeid":"31049"}},[a("p",{attrs:{"data-nodeid":"31050"}},[t._v("数据聚合和裁剪")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"31051"}},[a("p",{attrs:{"data-nodeid":"31052"}},[t._v("序列化格式转换")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"31053"}},[a("p",{attrs:{"data-nodeid":"31054"}},[t._v("协议转换")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"31055"}},[a("p",{attrs:{"data-nodeid":"31056"}},[t._v("Node.js 调用 RPC")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"31057"}},[t._v("在微服务体系结构中，各个微服务的数据实体可能并不统一和规范，如果没有 BFF 层的统一处理，在端上进行不同数据格式的聚合会是一件非常痛苦的事情。因此，数据裁剪和聚合对于 BFF 网关来说就变得尤为重要了。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"31058"}},[t._v("同时，"),a("strong",{attrs:{"data-nodeid":"31256"}},[t._v("不同端可能也会需要不同的数据序列化格式")]),t._v("。比如，某个微服务使用 JSON，而某个客户只能使用 XML，那么 JSON 转换为 XML 的工作，也应当合理地在 BFF 网关层实现。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"31059"}},[t._v("再比如微服务架构一般允许多语言协议传输，比如客户端需要通过 HTTP REST 进行所有的通信，而某个微服务内部使用了 gRPC 或 GraphQL，其中的语言协议转换，也需要在 BFF 网关层解决。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"31060"}},[t._v("还需要你了解的是，在传统开发模式中，前端通过 Node.js 实现 BFF 的模式：前端请求 BFF 提供的接口，BFF 直接通过 HTTP Client 或者 cURL 方式透传给微服务——这种模式有其优势，但是可以做到精益求精。相比 BFF 不做任何逻辑处理，"),a("strong",{attrs:{"data-nodeid":"31263"}},[t._v("Node.js 是一个 Proxy，我们可以思考如何让 Node.js 调用 RPC")]),t._v("，以最大限度地发挥 BFF 层能力。")]),t._v(" "),a("h4",{attrs:{"data-nodeid":"31061"}},[t._v("流量处理")]),t._v(" "),a("p",{attrs:{"data-nodeid":"31062"}},[t._v("这里的流量处理主要是指：")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"31063"}},[a("li",{attrs:{"data-nodeid":"31064"}},[a("p",{attrs:{"data-nodeid":"31065"}},[t._v("请求分发能力、代理能力；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"31066"}},[a("p",{attrs:{"data-nodeid":"31067"}},[t._v("可用性保障。")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"31068"}},[t._v("在 BFF 层网关中，我们需要执行一些代理操作，比如将请求路由到特定服务。"),a("strong",{attrs:{"data-nodeid":"31274"}},[t._v("在 Node.js 中，我们可以使用")]),a("code",{attrs:{"data-backticks":"1","data-nodeid":"31272"}},[t._v("http-proxy")]),t._v("来简单代理特定服务。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"31069"}},[t._v("我们需要考虑"),a("strong",{attrs:{"data-nodeid":"31280"}},[t._v("网关层如何维护分发路由")]),t._v("这个关键问题。简单来说，我们可以 hard coding 写在代码里，同时也可以实现网关层的服务发现。比如，在 URL 规范化的基础上，网关层进行请求匹配时，可以只根据 URL 内容对应不同的 namespace 进而对应到不同的微服务。当然也可以使用中心化配置，通过配置来维护网关层路由分发。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"31070"}},[t._v("除此之外，网关层也要考虑条件路由，即对具有特定内容（或者一定流量比例）的请求进行筛选并分发到特定实例组上，这种条件路由能力是实现灰度发布、蓝绿发布、AB Test 等功能的基础。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"31071"}},[t._v("另外，BFF 网关直面用户，因此这一层也需要有良好的限速、隔离、熔断降级、负载均衡和缓存能力。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"31072"}},[t._v("关于这些内容，我们会在后半部分代码环节中进一步体现。")]),t._v(" "),a("h4",{attrs:{"data-nodeid":"31073"}},[t._v("安全问题")]),t._v(" "),a("p",{attrs:{"data-nodeid":"31074"}},[t._v("鉴于 BFF 层承上启下的位置，BFF 要考虑数据流向的安全性，需要完成必要的校验逻辑。其原则是：")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"31075"}},[a("li",{attrs:{"data-nodeid":"31076"}},[a("p",{attrs:{"data-nodeid":"31077"}},[t._v("BFF 层不需要完成全部的校验逻辑，部分业务校验应该留在微服务中完成；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"31078"}},[a("p",{attrs:{"data-nodeid":"31079"}},[t._v("BFF 需要完成必要的检查，比如请求头检查和必要的数据消毒；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"31080"}},[a("p",{attrs:{"data-nodeid":"31081"}},[t._v("合理使用 Content-Security-Policy；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"31082"}},[a("p",{attrs:{"data-nodeid":"31083"}},[t._v("使用 HTTPS/HSTS；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"31084"}},[a("p",{attrs:{"data-nodeid":"31085"}},[t._v("设置监控报警以及调用链追踪能力。")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"31086"}},[t._v("同时，在使用 Node.js 做 BFF 层时，需要开发者"),a("strong",{attrs:{"data-nodeid":"31300"}},[t._v("时刻注意依赖包的安全性")]),t._v("，可以考虑在 CI/CD 环节使用"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"31296"}},[t._v("nsp")]),t._v("、"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"31298"}},[t._v("npm audit")]),t._v("等工具进行安全审计。")]),t._v(" "),a("h4",{attrs:{"data-nodeid":"31087"}},[t._v("权限与校验设计")]),t._v(" "),a("p",{attrs:{"data-nodeid":"31088"}},[t._v("在上面提到的安全问题中，一个关键的设计就是 BFF 层的用户权限校验。这里我们单独展开说明。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"31089"}},[t._v("对于大多数微服务基础架构来说，需要将身份验证和权限校验等共享逻辑放入网关层，这样不仅能够帮助后端开发者缩小服务的体积，也能让后端开发者更专注于自身领域。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"31090"}},[t._v("在网关中，一般我们需要支持基于 cookie 或 token 的身份验证。关于身份验证的话题这里我们不详细展开，值得一提的是，需要开发者关注 SSO 单点登录的设计。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"31091"}},[t._v("关于权限问题，一般主流采用 ACL 或 RBAC 的方式，这就需要开发者系统学习权限设计知识。简单来说，"),a("strong",{attrs:{"data-nodeid":"31310"}},[t._v("ACL 即访问控制列表，它的核心在于用户直接和权限挂钩。RBAC 的核心是用户只和角色关联，而角色对应了权限")]),t._v("，这样设计的优势在于：对用户而言，只需分配角色即可以实现权限管理，而某角色可以拥有各种各样的权限并可以继承。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"31092"}},[t._v("ACL 和 RBAC 相比，缺点在于由于用户和权限直接挂钩，导致在授予时的复杂性；虽然可以利用组（角色）来简化这个复杂性，但 RBAC 仍然会导致系统不好理解，而且在判断用户是否有该权限时比较困难，一定程度上影响了效率。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"31093"}},[t._v("总之，设计一个良好的 BFF 网关，要求开发者具有较强的综合能力。下面，我们就来实现一个精简的网关系统，该网关只保留了最核心的能力，以性能为重要目标，同时支持能力扩展。")]),t._v(" "),a("h3",{attrs:{"data-nodeid":"31094"}},[t._v("实现一个 lucas-gateway")]),t._v(" "),a("p",{attrs:{"data-nodeid":"31095"}},[t._v("如何设计一个扩展性良好的 BFF 层，以灵活支持上述需要考量的问题呢？我们来看几个关键的思路。")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"31096"}},[a("li",{attrs:{"data-nodeid":"31097"}},[a("p",{attrs:{"data-nodeid":"31098"}},[a("strong",{attrs:{"data-nodeid":"31319"}},[t._v("插件化")]),t._v("：一个良好的 BFF 层设计可以内置或可插拔多种插件，比如 Logger 等，也可以接受第三方插件。")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"31099"}},[a("p",{attrs:{"data-nodeid":"31100"}},[a("strong",{attrs:{"data-nodeid":"31324"}},[t._v("中间件化")]),t._v("：SSO、限流、熔断等策略可以通过中间件形式实现，类似插件，中间件也可以进行定制和扩展。")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"31101"}},[t._v("下面我们就实战实现一个 BFF 网关，请随我一起深入代码。该实现代码我主要 fork 了"),a("a",{attrs:{href:"https://github.com/jkyberneees/fast-gateway?fileGuid=xxQTRXtVcqtHK6j8","data-nodeid":"31328"}},[t._v("jkyberneees 的 fast-gateway")]),t._v("，源代码放在了："),a("a",{attrs:{href:"https://github.com/HOUCe?fileGuid=xxQTRXtVcqtHK6j8","data-nodeid":"31332"}},[t._v("HOUCe")]),t._v("/"),a("a",{attrs:{href:"https://github.com/HOUCe/fast-gateway?fileGuid=xxQTRXtVcqtHK6j8","data-nodeid":"31336"}},[t._v("fast-gateway")]),t._v("当中。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"31102"}},[t._v("我们先看看开发这个网关的必要依赖。")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"31103"}},[a("li",{attrs:{"data-nodeid":"31104"}},[a("p",{attrs:{"data-nodeid":"31105"}},[a("a",{attrs:{href:"https://www.npmjs.com/package/fast-proxy?fileGuid=xxQTRXtVcqtHK6j8","data-nodeid":"31341"}},[t._v("fast-proxy")]),t._v("：支持 HTTP、HTTPS、HTTP2 三种协议，可以高性能完成请求的转发、代理。")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"31106"}},[a("p",{attrs:{"data-nodeid":"31107"}},[a("a",{attrs:{href:"https://www.npmjs.com/package/@polka/send-type?fileGuid=xxQTRXtVcqtHK6j8","data-nodeid":"31345"}},[t._v("@polka/send-type")]),t._v("：处理 HTTP 响应的工具函数。")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"31108"}},[a("p",{attrs:{"data-nodeid":"31109"}},[a("a",{attrs:{href:"https://www.npmjs.com/package/http-cache-middleware?fileGuid=xxQTRXtVcqtHK6j8","data-nodeid":"31349"}},[t._v("http-cache-middleware")]),t._v("：是一个高性能的 HTTP 缓存中间件。")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"31110"}},[a("p",{attrs:{"data-nodeid":"31111"}},[a("a",{attrs:{href:"https://www.npmjs.com/package/restana?fileGuid=xxQTRXtVcqtHK6j8","data-nodeid":"31353"}},[t._v("restana")]),t._v("：一个极简的 REST 风格的 Node.js 框架。")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"31112"}},[t._v("我们的设计主要从")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"31113"}},[a("li",{attrs:{"data-nodeid":"31114"}},[a("p",{attrs:{"data-nodeid":"31115"}},[t._v("基本反代理")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"31116"}},[a("p",{attrs:{"data-nodeid":"31117"}},[t._v("中间件")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"31118"}},[a("p",{attrs:{"data-nodeid":"31119"}},[t._v("缓存")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"31120"}},[a("p",{attrs:{"data-nodeid":"31121"}},[t._v("Hooks")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"31122"}},[t._v("几个方向展开。")]),t._v(" "),a("h4",{attrs:{"data-nodeid":"31123"}},[t._v("基本反代理")]),t._v(" "),a("p",{attrs:{"data-nodeid":"31124"}},[t._v("设计使用方式如下代码：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"31125"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" gateway = require("),a("span",{staticClass:"hljs-string"},[t._v("'lucas-gateway'")]),t._v(")\n"),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" server = gateway({\n  routes: [{\n    prefix: "),a("span",{staticClass:"hljs-string"},[t._v("'/service'")]),t._v(",\n    target: "),a("span",{staticClass:"hljs-string"},[t._v("'http://127.0.0.1:3000'")]),t._v("\n  }]\n})\nserver.start("),a("span",{staticClass:"hljs-number"},[t._v("8080")]),t._v(")\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"31126"}},[t._v("网关暴露出"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"31364"}},[t._v("gateway")]),t._v("方法进行请求反向代理。如上代码，我们将 prefix 为"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"31366"}},[t._v("/service")]),t._v("的请求反向代理到"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"31368"}},[t._v("http://127.0.0.1:3000")]),t._v("地址。我们来看看"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"31370"}},[t._v("gateway")]),t._v("核心函数的实现：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"31127"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" proxyFactory = require("),a("span",{staticClass:"hljs-string"},[t._v("'./lib/proxy-factory'")]),t._v(")\n"),a("span",{staticClass:"hljs-comment"},[t._v("// 一个简易的高性能 Node.js 框架")]),t._v("\n"),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" restana = require("),a("span",{staticClass:"hljs-string"},[t._v("'restana'")]),t._v(")\n"),a("span",{staticClass:"hljs-comment"},[t._v("// 默认的代理 handler")]),t._v("\n"),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" defaultProxyHandler = (req, res, url, proxy, proxyOpts) => proxy(req, res, url, proxyOpts)\n"),a("span",{staticClass:"hljs-comment"},[t._v("// 默认支持的方法，包括 ['get', 'delete', 'put', 'patch', 'post', 'head', 'options', 'trace']")]),t._v("\n"),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" DEFAULT_METHODS = require("),a("span",{staticClass:"hljs-string"},[t._v("'restana/libs/methods'")]),t._v(").filter(method => method !== "),a("span",{staticClass:"hljs-string"},[t._v("'all'")]),t._v(")\n"),a("span",{staticClass:"hljs-comment"},[t._v("// 一个简易的 HTTP 响应库")]),t._v("\n"),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" send = require("),a("span",{staticClass:"hljs-string"},[t._v("'@polka/send-type'")]),t._v(")\n"),a("span",{staticClass:"hljs-comment"},[t._v("// 支持 HTTP 代理")]),t._v("\n"),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" PROXY_TYPES = ["),a("span",{staticClass:"hljs-string"},[t._v("'http'")]),t._v("]\n"),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" gateway = (opts) => {\n  opts = Object.assign({\n    middlewares: [],\n    pathRegex: "),a("span",{staticClass:"hljs-string"},[t._v("'/*'")]),t._v("\n  }, opts)\n "),a("span",{staticClass:"hljs-comment"},[t._v("// 运行开发者传一个 server 实例，默认则使用 restana server")]),t._v("\n  "),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" server = opts.server || restana(opts.restana)\n  "),a("span",{staticClass:"hljs-comment"},[t._v("// 注册中间件")]),t._v("\n  opts.middlewares.forEach(middleware => {\n    server.use(middleware)\n  })\n  "),a("span",{staticClass:"hljs-comment"},[t._v("// 一个简易的接口 `/services.json`，该接口罗列出网关代理的所有请求和相应信息")]),t._v("\n  "),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" services = opts.routes.map(route => ({\n    prefix: route.prefix,\n    docs: route.docs\n  }))\n  server.get("),a("span",{staticClass:"hljs-string"},[t._v("'/services.json'")]),t._v(", (req, res) => {\n    send(res, "),a("span",{staticClass:"hljs-number"},[t._v("200")]),t._v(", services)\n  })\n  "),a("span",{staticClass:"hljs-comment"},[t._v("// 路由处理")]),t._v("\n  opts.routes.forEach(route => {\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" (undefined === route.prefixRewrite) {\n      route.prefixRewrite = "),a("span",{staticClass:"hljs-string"},[t._v("''")]),t._v("\n    }\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" { proxyType = "),a("span",{staticClass:"hljs-string"},[t._v("'http'")]),t._v(" } = "),a("span",{staticClass:"hljs-function"},[t._v("route\n    "),a("span",{staticClass:"hljs-title"},[t._v("if")]),t._v(" "),a("span",{staticClass:"hljs-params"},[t._v("(!PROXY_TYPES.includes(proxyType)")]),t._v(") ")]),t._v("{\n      "),a("span",{staticClass:"hljs-keyword"},[t._v("throw")]),t._v(" "),a("span",{staticClass:"hljs-keyword"},[t._v("new")]),t._v(" Error("),a("span",{staticClass:"hljs-string"},[t._v("'Unsupported proxy type, expecting one of '")]),t._v(" + PROXY_TYPES.toString())\n    }\n    "),a("span",{staticClass:"hljs-comment"},[t._v("// 加载默认的 Hooks")]),t._v("\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" { onRequestNoOp, onResponse } = require["),a("span",{staticClass:"hljs-string"},[t._v("'./lib/default-hooks'")]),t._v("](proxyType)\n    "),a("span",{staticClass:"hljs-comment"},[t._v("// 加载自定义的 Hooks，允许开发者拦截并响应自己的 Hooks")]),t._v("\n    route.hooks = route.hooks || {}\n    route.hooks.onRequest = route.hooks.onRequest || onRequestNoOp\n    route.hooks.onResponse = route.hooks.onResponse || onResponse\n    "),a("span",{staticClass:"hljs-comment"},[t._v("// 加载中间件，允许开发者自己传入自定义中间件")]),t._v("\n    route.middlewares = route.middlewares || []\n    "),a("span",{staticClass:"hljs-comment"},[t._v("// 支持正则形式的 route path")]),t._v("\n    route.pathRegex = undefined === route.pathRegex ? opts.pathRegex : String(route.pathRegex)\n    "),a("span",{staticClass:"hljs-comment"},[t._v("// 使用 proxyFactory 创建一个 proxy 实例")]),t._v("\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" proxy = proxyFactory({ opts, route, proxyType })\n    "),a("span",{staticClass:"hljs-comment"},[t._v("// 允许开发者自定义传入一个 proxyHandler，否则使用默认的 defaultProxyHandler")]),t._v("\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" proxyHandler = route.proxyHandler || defaultProxyHandler\n    "),a("span",{staticClass:"hljs-comment"},[t._v("// 设置超时时间")]),t._v("\n    route.timeout = route.timeout || opts.timeout\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" methods = route.methods || DEFAULT_METHODS\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" args = [\n      "),a("span",{staticClass:"hljs-comment"},[t._v("// path")]),t._v("\n      route.prefix + route.pathRegex,\n      "),a("span",{staticClass:"hljs-comment"},[t._v("// route middlewares")]),t._v("\n      ...route.middlewares,\n      "),a("span",{staticClass:"hljs-comment"},[t._v("// 相关 handler 函数")]),t._v("\n      handler(route, proxy, proxyHandler)\n    ]\n    methods.forEach(method => {\n      method = method.toLowerCase()\n      "),a("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" (server[method]) {\n        server[method].apply(server, args)\n      }\n    })\n  })\n  "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" server\n}\n"),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" handler = (route, proxy, proxyHandler) => async (req, res, next) => {\n  "),a("span",{staticClass:"hljs-keyword"},[t._v("try")]),t._v(" {\n    "),a("span",{staticClass:"hljs-comment"},[t._v("// 支持 urlRewrite 配置")]),t._v("\n    req.url = route.urlRewrite\n      ? route.urlRewrite(req)\n      : req.url.replace(route.prefix, route.prefixRewrite)\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" shouldAbortProxy = await route.hooks.onRequest(req, res)\n    "),a("span",{staticClass:"hljs-comment"},[t._v("// 如果 onRequest hooks 返回一个 falsy 值，则执行 proxyHandler，否则停止代理")]),t._v("\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" (!shouldAbortProxy) {\n      "),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" proxyOpts = Object.assign({\n        request: {\n          timeout: req.timeout || route.timeout\n        },\n        queryString: req.query\n      }, route.hooks)\n      proxyHandler(req, res, req.url, proxy, proxyOpts)\n    }\n  } "),a("span",{staticClass:"hljs-keyword"},[t._v("catch")]),t._v(" (err) {\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" next(err)\n  }\n}\n"),a("span",{staticClass:"hljs-keyword"},[t._v("module")]),t._v("."),a("span",{staticClass:"hljs-keyword"},[t._v("exports")]),t._v(" = gateway\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"31128"}},[t._v("上述代码主要流程并不复杂，我已经加入了相应的注释。"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"31373"}},[t._v("gateway")]),t._v("函数是整个网关的入口，包含了所有核心流程。这里我们对"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"31375"}},[t._v("proxyFactory")]),t._v("函数进行简单梳理：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"31129"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" fastProxy = require("),a("span",{staticClass:"hljs-string"},[t._v("'fast-proxy'")]),t._v(")\n"),a("span",{staticClass:"hljs-keyword"},[t._v("module")]),t._v("."),a("span",{staticClass:"hljs-keyword"},[t._v("exports")]),t._v(" = ({ proxyType, opts, route }) => {\n  let proxy = fastProxy({\n      base: opts.targetOverride || route.target,\n      http2: !!route.http2,\n      ...(route.fastProxy)\n    }).proxy\n  "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" proxy\n}\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"31130"}},[t._v("如上代码所示，我们使用了"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"31378"}},[t._v("fast-proxy")]),t._v("库，并支持开发者以"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"31380"}},[t._v("fastProxy")]),t._v("字段进行对"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"31382"}},[t._v("fast-proxy")]),t._v("库的配置。具体配置信息你可以参考"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"31384"}},[t._v("fast-proxy")]),t._v("库，这里我们不再展开。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"31131"}},[t._v("其实通过以上代码分析，我们已经把大体流程梳理了一遍。但是上述代码只实现了基础的代理功能，只是网关的一部分能力。接下来，我们从网关扩展层面，继续了解网关的设计和实现。")]),t._v(" "),a("h4",{attrs:{"data-nodeid":"31132"}},[t._v("中间件")]),t._v(" "),a("p",{attrs:{"data-nodeid":"31133"}},[t._v("中间件化思想已经渗透到前端编程理念中，开发者颇为受益。中间件能够帮助我们在解耦合的基础上，实现能力扩展。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"31134"}},[t._v("我们来看看这个网关的中间件能力，如下代码：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"31135"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" rateLimit = require("),a("span",{staticClass:"hljs-string"},[t._v("'express-rate-limit'")]),t._v(")\n"),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" requestIp = require("),a("span",{staticClass:"hljs-string"},[t._v("'request-ip'")]),t._v(")\ngateway({\n  "),a("span",{staticClass:"hljs-comment"},[t._v("// 定义一个全局中间件")]),t._v("\n  middlewares: [\n    "),a("span",{staticClass:"hljs-comment"},[t._v("// 记录访问 IP")]),t._v("\n    (req, res, next) => {\n      req.ip = requestIp.getClientIp(req)\n      "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" next()\n    },\n    "),a("span",{staticClass:"hljs-comment"},[t._v("// 使用 RateLimit 模块")]),t._v("\n    rateLimit({\n      "),a("span",{staticClass:"hljs-comment"},[t._v("// 1 分钟窗口期")]),t._v("\n      windowMs: "),a("span",{staticClass:"hljs-number"},[t._v("1")]),t._v(" * "),a("span",{staticClass:"hljs-number"},[t._v("60")]),t._v(" * "),a("span",{staticClass:"hljs-number"},[t._v("1000")]),t._v(", "),a("span",{staticClass:"hljs-comment"},[t._v("// 1 minutes")]),t._v("\n      "),a("span",{staticClass:"hljs-comment"},[t._v("// 在窗口期内，同一个 IP 只允许访问 60 次")]),t._v("\n      max: "),a("span",{staticClass:"hljs-number"},[t._v("60")]),t._v(",\n      handler: (req, res) => res.send("),a("span",{staticClass:"hljs-string"},[t._v("'Too many requests, please try again later.'")]),t._v(", "),a("span",{staticClass:"hljs-number"},[t._v("429")]),t._v(")\n    })\n  ],\n  "),a("span",{staticClass:"hljs-comment"},[t._v("// downstream 服务代理")]),t._v("\n  routes: [{\n    prefix: "),a("span",{staticClass:"hljs-string"},[t._v("'/public'")]),t._v(",\n    target: "),a("span",{staticClass:"hljs-string"},[t._v("'http://localhost:3000'")]),t._v("\n  }, {\n    "),a("span",{staticClass:"hljs-comment"},[t._v("// ...")]),t._v("\n  }]\n})\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"31136"}},[t._v("上面代码中，我们实现了两个中间件。第一个中间通过"),a("a",{attrs:{href:"https://www.npmjs.com/package/request-ip?fileGuid=xxQTRXtVcqtHK6j8","data-nodeid":"31393"}},[t._v("request-ip")]),t._v("这个库获取访问的真实 IP 地址，并将 IP 值挂载在 req 对象上。第二个中间件通过"),a("a",{attrs:{href:"https://www.npmjs.com/package/express-rate-limit?fileGuid=xxQTRXtVcqtHK6j8","data-nodeid":"31397"}},[t._v("express-rate-limit")]),t._v("进行“在窗口期内，同一个 IP 只允许访问 60 次”的限流策略。因为"),a("a",{attrs:{href:"https://www.npmjs.com/package/express-rate-limit?fileGuid=xxQTRXtVcqtHK6j8","data-nodeid":"31401"}},[t._v("express-rate-limit")]),t._v("库默认使用"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"31403"}},[t._v("req.ip")]),t._v("作为"),a("a",{attrs:{href:"https://github.com/nfriedly/express-rate-limit/blob/master/lib/express-rate-limit.js#L16?fileGuid=xxQTRXtVcqtHK6j8","data-nodeid":"31407"}},[t._v("keyGenerator")]),t._v("，所以我们的第一个中间件将 IP 记录在了"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"31409"}},[t._v("req.ip")]),t._v("上面。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"31137"}},[t._v("这是一个简单的运用中间件实现限流的案例，开发者可以通过自己动手实现，或依赖其他库实现相关策略。")]),t._v(" "),a("h4",{attrs:{"data-nodeid":"31138"}},[t._v("缓存策略")]),t._v(" "),a("p",{attrs:{"data-nodeid":"31139"}},[t._v("缓存能够有效提升网关对于请求的处理能力和吞吐量。我们的网关设计支持了多种缓存方案，如下代码是一个使用 Node 内存缓存的案例：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"31140"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-comment"},[t._v("// 使用 http-cache-middleware 作为缓存中间件")]),t._v("\n"),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" cache = require("),a("span",{staticClass:"hljs-string"},[t._v("'http-cache-middleware'")]),t._v(")()\n"),a("span",{staticClass:"hljs-comment"},[t._v("// enable http cache middleware")]),t._v("\n"),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" gateway = require("),a("span",{staticClass:"hljs-string"},[t._v("'fast-gateway'")]),t._v(")\n"),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" server = gateway({\n  middlewares: [cache],\n  routes: [...]\n})\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"31141"}},[t._v("如果不担心缓存数据的丢失，即缓存数据不需要持久化，且只有一个网关实例，使用内存缓存是一个很好的选择。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"31142"}},[t._v("当然，也支持使用 Redis 进行缓存，如下代码：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"31143"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-comment"},[t._v("// 初始化 Redis")]),t._v("\n"),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" CacheManager = require("),a("span",{staticClass:"hljs-string"},[t._v("'cache-manager'")]),t._v(")\n"),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" redisStore = require("),a("span",{staticClass:"hljs-string"},[t._v("'cache-manager-ioredis'")]),t._v(")\n"),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" redisCache = CacheManager.caching({\n  store: redisStore,\n  db: "),a("span",{staticClass:"hljs-number"},[t._v("0")]),t._v(",\n  host: "),a("span",{staticClass:"hljs-string"},[t._v("'localhost'")]),t._v(",\n  port: "),a("span",{staticClass:"hljs-number"},[t._v("6379")]),t._v(",\n  ttl: "),a("span",{staticClass:"hljs-number"},[t._v("30")]),t._v("\n})\n"),a("span",{staticClass:"hljs-comment"},[t._v("// 缓存中间件")]),t._v("\n"),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" cache = require("),a("span",{staticClass:"hljs-string"},[t._v("'http-cache-middleware'")]),t._v(")({\n  stores: [redisCache]\n})\n"),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" gateway = require("),a("span",{staticClass:"hljs-string"},[t._v("'fast-gateway'")]),t._v(")\n"),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" server = gateway({\n  middlewares: [cache],\n  routes: [...]\n})\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"31144"}},[t._v("在网关的设计中，我们依赖了"),a("a",{attrs:{href:"https://github.com/jkyberneees/http-cache-middleware?fileGuid=xxQTRXtVcqtHK6j8","data-nodeid":"31419"}},[t._v("http-cache-middleware")]),t._v("库作为缓存，参考其"),a("a",{attrs:{href:"http://http-cache-middleware?fileGuid=xxQTRXtVcqtHK6j8","data-nodeid":"31423"}},[t._v("源码")]),t._v("，我们可以看到缓存使用了"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"31425"}},[t._v("req.method + req.url + cacheAppendKey")]),t._v("作为缓存的 key，"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"31427"}},[t._v("cacheAppendKey")]),t._v("出自"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"31429"}},[t._v("req")]),t._v("对象，因此开发者可以通过设置"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"31431"}},[t._v("req.cacheAppendKey = (req) => req.user.id")]),t._v("的方式，自定义缓存 key。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"31145"}},[t._v("当然，我们可以对某个接口 Endpoint 禁用缓存，这也是通过中间件实现的：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"31146"}},[a("code",{attrs:{"data-language":"java"}},[t._v("routes: [{\n  prefix: "),a("span",{staticClass:"hljs-string"},[t._v("'/users'")]),t._v(",\n  target: "),a("span",{staticClass:"hljs-string"},[t._v("'http://localhost:3000'")]),t._v(",\n  middlewares: [(req, res, next) => {\n    req.cacheDisabled = "),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[t._v("true")]),t._v("\n    return "),a("span",{staticClass:"hljs-title"},[t._v("next")]),a("span",{staticClass:"hljs-params"},[t._v("()")]),t._v("\n  }]\n}]\n")])])]),t._v(" "),a("h4",{attrs:{"data-nodeid":"31147"}},[t._v("Hooks 设计")]),t._v(" "),a("p",{attrs:{"data-nodeid":"31148"}},[t._v("有了中间件还不够，我们还可以以 Hooks 的方式，允许开发者介入网关处理流程。比如以下代码：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" multipleHooks "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fg-multiple-hooks'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("hook1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hook1 with logic 1 called'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回 falsy 值，不会阻断请求处理流程")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("hook2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hook2 with logic 2 called'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" shouldAbort "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("shouldAbort"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'handle a rejected request here'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回 true，则终端处理流程")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" shouldAbort\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("gateway")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("routes")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("prefix")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/service'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("target")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://127.0.0.1:3000'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("hooks")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用多个 Hooks 函数，处理 onRequest")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onRequest")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("multipleHooks")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" hook1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" hook2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rewriteHeaders")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("handlers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可以在这里设置 response header")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" headers\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用多个 Hooks 函数，处理 onResponse")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onResponse")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PORT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("server")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("API Gateway listening on ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PORT")]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v(" port!")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",{attrs:{"data-nodeid":"31150"}},[t._v("对应源码处理相应的 Hooks 流程已经在前面部分有所涉及，这里不再一一展开。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"31151"}},[t._v("最后，我们再通过一个实现负载均衡的场景，来加强对该网关的设计理解，如下代码：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"31152"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" gateway = require("),a("span",{staticClass:"hljs-string"},[t._v("'../index'")]),t._v(")\n"),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" { P2cBalancer } = require("),a("span",{staticClass:"hljs-string"},[t._v("'load-balancers'")]),t._v(")\n"),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" targets = [\n  "),a("span",{staticClass:"hljs-string"},[t._v("'http://localhost:3000'")]),t._v(",\n  "),a("span",{staticClass:"hljs-string"},[t._v("'xxxxx'")]),t._v(",\n  "),a("span",{staticClass:"hljs-string"},[t._v("'xxxxxxx'")]),t._v("\n]\n"),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" balancer = "),a("span",{staticClass:"hljs-keyword"},[t._v("new")]),t._v(" P2cBalancer(targets.length)\ngateway({\n  routes: [{\n    "),a("span",{staticClass:"hljs-comment"},[t._v("// 自定义 proxyHandler")]),t._v("\n    proxyHandler: (req, res, url, proxy, proxyOpts) => {\n      "),a("span",{staticClass:"hljs-comment"},[t._v("// 使用 P2cBalancer 实例进行负载均衡")]),t._v("\n      "),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" target = targets[balancer.pick()]\n      "),a("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" (typeof target === "),a("span",{staticClass:"hljs-string"},[t._v("'string'")]),t._v(") {\n        proxyOpts.base = target\n      } "),a("span",{staticClass:"hljs-keyword"},[t._v("else")]),t._v(" {\n        proxyOpts.onResponse = onResponse\n        proxyOpts.onRequest = onRequestNoOp\n        proxy = target\n      }\n      "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" proxy(req, res, url, proxyOpts)\n    },\n    prefix: "),a("span",{staticClass:"hljs-string"},[t._v("'/balanced'")]),t._v("\n  }]\n})\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"31153"}},[t._v("通过如上代码我们看出，网关的设计既支持默认的 proxyHandler，又支持开发者自定义的 proxyHandler，对于自定义的 proxyHandler，网关层面提供：")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"31154"}},[a("li",{attrs:{"data-nodeid":"31155"}},[a("p",{attrs:{"data-nodeid":"31156"}},[t._v("req")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"31157"}},[a("p",{attrs:{"data-nodeid":"31158"}},[t._v("res")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"31159"}},[a("p",{attrs:{"data-nodeid":"31160"}},[t._v("req.url")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"31161"}},[a("p",{attrs:{"data-nodeid":"31162"}},[t._v("proxy")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"31163"}},[a("p",{attrs:{"data-nodeid":"31164"}},[t._v("proxyOpts")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"31165"}},[t._v("相关参数，方便开发者发挥。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"31166"}},[t._v("至此，我们就从源码和设计层面对一个成熟的网关实现进行了解析。你可以结合源码进行学习。")]),t._v(" "),a("h3",{attrs:{"data-nodeid":"31167"}},[t._v("总结")]),t._v(" "),a("p",{attrs:{"data-nodeid":"31168"}},[t._v("这一讲我们深入讲解了 Node.js 另外一个重要的应用场景：企业级 BFF 网关。我们详细介绍了 BFF 网关的优缺点、打造 BFF 网关需要考虑的问题。总之，设计一个良好的 BFF 网关，要求开发者具有较强的综合能力。接下来我们实现一个精简的网关系统，并结合源码和设计层面对其实现进行了解析，帮助你深入了解网关的构建。")]),t._v(" "),a("p",{staticClass:"te-preview-highlight",attrs:{"data-nodeid":"35007"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M00/21/5C/CioPOWBURoyAGqyFAAdwJg_hSMw100.png",alt:"Drawing 2.png","data-nodeid":"35010"}})]),t._v(" "),a("p",{attrs:{"data-nodeid":"31171"}},[t._v("事实上，BFF 网关理念已经完全被业界接受，业界著名的网关包括但不限于：")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"31172"}},[a("li",{attrs:{"data-nodeid":"31173"}},[a("p",{attrs:{"data-nodeid":"31174"}},[t._v("Netflix API Gateway: Zuul")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"31175"}},[a("p",{attrs:{"data-nodeid":"31176"}},[t._v("Amazon AWS 网关")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"31177"}},[a("p",{attrs:{"data-nodeid":"31178"}},[t._v("Kong Gateway")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"31179"}},[a("p",{attrs:{"data-nodeid":"31180"}},[t._v("SwaggerHub")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"31181"}},[a("p",{attrs:{"data-nodeid":"31182"}},[t._v("Express API Gateway")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"31183"}},[a("p",{attrs:{"data-nodeid":"31184"}},[t._v("Azure API Gateway")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"31185"}},[t._v("作为前端开发者，向 BFF 进军是一个有趣且必要的发展方向。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"31186"}},[t._v("另外，Serverless 是一种无服务器架构，它的弹性伸缩、按需使用、无运维等特性都是未来的发展方向。而 Serverless 结合 BFF 网关设计理念，业界也推出了 SFF（Serverless For Frontend）的概念。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"31187"}},[t._v("其实，这些概念万变不离其宗，掌握了 BFF 网关，能够设计一个高可用的网关层，会让你在技术上收获颇多，同时也能为业务带来更大的收益。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"31188"}},[t._v("下一讲，我们就迎来了课程的最后内容——实现高可用：使用 Puppeteer 生成性能最优的海报系统。我们将介绍 Puppeteer 的各种应用场景，并重点讲解基于 Puppeteer 设计实现的海报服务系统。下节内容同样精彩，请你继续阅读。")]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"精选评论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#精选评论"}},[t._v("#")]),t._v(" 精选评论")]),t._v(" "),a("h5",{attrs:{id:"扬"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扬"}},[t._v("#")]),t._v(" **扬")]),t._v(" "),a("blockquote",[a("p",[t._v('老师请问 数据聚合和裁剪，">Node.js 调用 RPC 在这个BFF 网关库中如何使用呢')])]),t._v(" "),a("h6",{attrs:{id:"讲师回复"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复"}},[t._v("#")]),t._v("     讲师回复")]),t._v(" "),a("blockquote",[a("p",[t._v("    可以看看各 rpc 的 node client 版本")])]),t._v(" "),a("h5",{attrs:{id:"翔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#翔"}},[t._v("#")]),t._v(" **翔")]),t._v(" "),a("blockquote",[a("p",[t._v("BFF 层是否要包含部分逻辑处理")])]),t._v(" "),a("h6",{attrs:{id:"讲师回复-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-2"}},[t._v("#")]),t._v("     讲师回复")]),t._v(" "),a("blockquote",[a("p",[t._v("    可以包含，具体要看是什么逻辑")])]),t._v(" "),a("h5",{attrs:{id:"_3336"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3336"}},[t._v("#")]),t._v(" **3336")]),t._v(" "),a("blockquote",[a("p",[t._v("老师真的太厉害了，偶像🤩")])])])}),[],!1,null,null,null);a.default=n.exports}}]);