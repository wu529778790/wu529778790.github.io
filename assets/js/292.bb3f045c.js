(window.webpackJsonp=window.webpackJsonp||[]).push([[292],{629:function(n,e,a){"use strict";a.r(e);var t=a(4),r=Object(t.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("p",[n._v("预加载图片是提高用户体验的一个很好方法。图片预先加载到浏览器中，访问者便可顺利地在你的网站上冲浪，并享受到极快的加载速度。这对图片画廊及图片占据很大比例的网站来说十分有利，它保证了图片快速、无缝地发布，也可帮助用户在浏览你网站内容时获得更好的用户体验。本文将分享三个不同的预加载技术，来增强网站的性能与可用性。")]),n._v(" "),e("p",[n._v("方法一：用 CSS 和 JavaScript 实现预加载")]),n._v(" "),e("p",[n._v("实现预加载图片有很多方法，包括使用 CSS、JavaScript 及两者的各种组合。这些技术可根据不同设计场景设计出相应的解决方案，十分高效。")]),n._v(" "),e("p",[n._v("单纯使用 CSS，可容易、高效地预加载图片，代码如下：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("\t#preload-01 { background: url(-01.png) no-repeat -9999px -9999px; }\n\n\t#preload-02 { background: url(-02.png) no-repeat -9999px -9999px; }\n\n\t#preload-03 { background: url(-03.png) no-repeat -9999px -9999px; }\n")])])]),e("p",[n._v("将这三个 ID 选择器应用到(X)HTML 元素中，我们便可通过 CSS 的 background 属性将图片预加载到屏幕外的背景上。只要这些图片的路径保持不变，当它们在 Web 页面的其他地方被调用时，浏览器就会在渲染过程中使用预加载（缓存）的图片。简单、高效，不需要任何 JavaScript。")]),n._v(" "),e("p",[n._v("该方法虽然高效，但仍有改进余地。使用该法加载的图片会同页面的其他内容一起加载，增加了页面的整体加载时间。为了解决这个问题，我们增加了一些 JavaScript 代码，来推迟预加载的时间，直到页面加载完毕。代码如下：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('\t// better image preloading @ <a href=";>;/a>\n\n\tfunction preloader() {\n\n    if (document.getElementById) {\n\n        document.getElementById("preload-01").style.background = "url() no-repeat -9999px -9999px";\n\n        document.getElementById("preload-02").style.background = "url() no-repeat -9999px -9999px";\n\n        document.getElementById("preload-03").style.background = "url() no-repeat -9999px -9999px";\n\n    }\n\n\t}\n\n\tfunction addLoadEvent(func) {\n\n    var oldonload = window.onload;\n\n    if (typeof window.onload != \'function\') {\n\n        window.onload = func;\n\n    } else {\n\n        window.onload = function() {\n\n            if (oldonload) {\n\n                oldonload();\n\n            }\n\n            func();\n\n        }\n\n    }\n\n\t}\n\n\taddLoadEvent(preloader);\n')])])]),e("p",[n._v("在该脚本的第一部分，我们获取使用类选择器的元素，并为其设置了 background 属性，以预加载不同的图片。")]),n._v(" "),e("p",[n._v("该脚本的第二部分，我们使用 addLoadEvent()函数来延迟 preloader()函数的加载时间，直到页面加载完毕。")]),n._v(" "),e("p",[n._v("如果 JavaScript 无法在用户的浏览器中正常运行，会发生什么？很简单，图片不会被预加载，当页面调用图片时，正常显示即可。")]),n._v(" "),e("p",[n._v("方法二：仅使用 JavaScript 实现预加载")]),n._v(" "),e("p",[n._v("上述方法有时确实很高效，但我们逐渐发现它在实际实现过程中会耗费太多时间。相反，我更喜欢使用纯 JavaScript 来实现图片的预加载。下面将提供两种这样的预加载方法，它们可以很漂亮地工作于所有现代浏览器之上。")]),n._v(" "),e("p",[n._v("JavaScript 代码段 1")]),n._v(" "),e("p",[n._v("只需简单编辑、加载所需要图片的路径与名称即可，很容易实现：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('\t<div class="hidden">\n\n    <script type="text/javascript">\n\n        \x3c!--//--\x3e<![CDATA[//>\x3c!--\n\n            var images = new Array()\n\n            function preload() {\n\n                for (i = 0; i < preload.arguments.length; i++) {\n\n                    images[i] = new Image()\n\n                    images[i].src = preload.arguments[i]\n                }\n\n            }\n\n            preload(\n\n                ";,\n\n                ";,\n\n                ";\n\n            )\n\n        //--\x3e<!]]>\n\n    <\/script>\n\n\t</div>\n')])])]),e("p",[n._v("该方法尤其适用预加载大量的图片。我的画廊网站使用该技术，预加载图片数量达 50 多张。将该脚本应用到登录页面，只要用户输入登录帐号，大部分画廊图片将被预加载。")]),n._v(" "),e("p",[n._v("JavaScript 代码段 2")]),n._v(" "),e("p",[n._v("该方法与上面的方法类似，也可以预加载任意数量的图片。将下面的脚本添加入任何 Web 页中，根据程序指令进行编辑即可。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('<div class="hidden">\n\n<script type="text/javascript">\n\n    \x3c!--//--\x3e<![CDATA[//>\x3c!--\n\n        if (document.images) {\n\n            img1 = new Image();\n\n            img2 = new Image();\n\n            img3 = new Image();\n\n            img1.src = ";;\n\n            img2.src = ";;\n\n            img3.src = ";;\n\n        }\n\n    //--\x3e<!]]>\n\n<\/script>\n\n</div>\n')])])]),e("p",[n._v('正如所看见，每加载一个图片都需要创建一个变量，如“img1 = new Image();”，及图片源地址声明，如“img3.src = "../path/to/image-003.gif";”。参考该模式，你可根据需要加载任意多的图片。')]),n._v(" "),e("p",[n._v("我们又对该方法进行了改进。将该脚本封装入一个函数中，并使用 addLoadEvent（），延迟预加载时间，直到页面加载完毕。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v('function preloader() {\n\nif (document.images) {\n\n    var img1 = new Image();\n\n    var img2 = new Image();\n\n    var img3 = new Image();\n\n    img1.src = ";;\n\n    img2.src = ";;\n\n    img3.src = ";;\n\n}\n\n}\n\nfunction addLoadEvent(func) {\n\nvar oldonload = window.onload;\n\nif (typeof window.onload != \'function\') {\n\n    window.onload = func;\n\n} else {\n\n    window.onload = function() {\n\n        if (oldonload) {\n\n            oldonload();\n\n        }\n\n        func();\n\n    }\n\n}\n\n}\n\naddLoadEvent(preloader);\n')])])]),e("p",[n._v("方法三：使用 Ajax 实现预加载")]),n._v(" "),e("p",[n._v("上面所给出的方法似乎不够酷，那现在来看一个使用 Ajax 实现图片预加载的方法。该方法利用 DOM，不仅仅预加载图片，还会预加载 CSS、JavaScript 等相关的东西。使用 Ajax，比直接使用 JavaScript，优越之处在于 JavaScript 和 CSS 的加载不会影响到当前页面。该方法简洁、高效。\nwindow.onload = function() {")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("setTimeout(function() {\n\n    // XHR to request a JS and a CSS\n\n    var xhr = new XMLHttpRequest();\n\n    xhr.open('GET', ';);\n\n    xhr.send('');\n\n    xhr = new XMLHttpRequest();\n\n    xhr.open('GET', ';);\n\n    xhr.send('');\n\n    // preload image\n\n    new Image().src = \";;\n\n}, 1000);\n\n};\n")])])]),e("p",[n._v("上面代码预加载了“preload.js”、“preload.css”和“preload.png”。1000 毫秒的超时是为了防止脚本挂起，而导致正常页面出现功能问题。")]),n._v(" "),e("p",[n._v("下面，我们看看如何用 JavaScript 来实现该加载过程：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('    window.onload = function() {\n    setTimeout(function() {\n        // reference to <head>\n        var head = document.getElementsByTagName(\'head\')[0];\n        // a new CSS\n        var css = document.createElement(\'link\');\n        css.type = "text/css";\n        css.rel  = "stylesheet";\n        css.href = ";;\n        // a new JS\n        var js  = document.createElement("script");\n        js.type = "text/javascript";\n        js.src  = ";;\n        // preload JS and CSS\n        head.appendChild(css);\n        head.appendChild(js);\n        // preload image\n        new Image().src = ";;\n    }, 1000);\n    };\n')])])]),e("p",[n._v("这里，我们通过 DOM 创建三个元素来实现三个文件的预加载。正如上面提到的那样，使用 Ajax，加载文件不会应用到加载页面上。从这点上看，Ajax 方法优越于 JavaScript。")])])}),[],!1,null,null,null);e.default=r.exports}}]);