(window.webpackJsonp=window.webpackJsonp||[]).push([[218],{554:function(s,a,t){"use strict";t.r(a);var n=t(4),e=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",{attrs:{"data-nodeid":"34141"}},[s._v("上一讲我们介绍了首屏时间的指标采集，这一讲我们来聊聊前端其他的性能指标采集，比如白屏、卡顿和网络环境。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"33783"}},[s._v("你乘火车、地铁、飞机都走过安检吧？如果说首屏时间类似你过安检的时刻，那么，白屏时间就是你排队到安检点的时间，而卡顿，就是你排的队伍停止了，前面人的不动了。本来，大家都希望过安检的时间越快越好，结果，排队花时间，停滞不动更耗时间，这无疑会让人越来越没有耐心。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"33784"}},[s._v("浏览器的白屏和卡顿也是如此，它们直接影响用户的体验，影响用户对平台的信任。而网络环境呢，它的影响更大，同时也是性能优化的盲区，这一点我在之前的移动端 M 站性案例分析里面就中介绍过。所以，这一讲，我们就专门聊聊这三方面的指标采集。")]),s._v(" "),a("h3",{attrs:{"data-nodeid":"33785"}},[s._v("白屏指标采集")]),s._v(" "),a("p",{attrs:{"data-nodeid":"33786"}},[s._v("白屏时间是指从输入内容回车（包括刷新、跳转等方式）后，到页面开始出现第一个字符的时间。白屏时间的长短会影响用户对 App 或站点的第一印象。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"33787"}},[s._v("白屏指标怎么采集呢？我们先来回顾一下前面讲过的浏览器的页面加载过程：")]),s._v(" "),a("p",{attrs:{"data-nodeid":"33788"}},[s._v("客户端发起请求 -> 下载 HTML 及 JS/CSS 资源 -> 解析 JS 执行 -> JS 请求数据 -> 客户端解析 DOM 并渲染 -> 下载渲染图片-> 完成渲整体染。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"33789"}},[s._v("在这个过程中，客户端解析 DOM 并渲染之前的时间，都算白屏时间。所以，白屏时间的采集思路如下：白屏时间 = 页面开始展示时间点 - 开始请求时间点。如果你是借助浏览器的 Performance API 工具来采集，那么可以使用公式：白屏时间 FP = domLoading - navigationStart。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"33790"}},[s._v("这是浏览器页面加载过程，如果放在 App场景下，就不太一样了，App下的页面加载过程：")]),s._v(" "),a("p",{attrs:{"data-nodeid":"33791"}},[s._v("初始化 WebView -> 客户端发起请求 -> 下载 HTML 及 JS/CSS 资源 -> 解析 JS 执行 -> JS 请求数据 -> 服务端处理并返回数据 -> 客户端解析 DOM 并渲染 -> 下载渲染图片 -> 完成整体渲染。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"33792"}},[s._v("App下的白屏时间，多了启动浏览器内核，也就是 Webview 初始化的时间。这个时间必须通过手动采集的方式来获得，而且因为线上线下时间差别不大，线下采集即可。具体来说，在 App 测试版本中，程序在 App 创建 WebView 时打一个点，然后在开始建立网络连接打一个点，这两个点的时间差就是 Webview 初始化的时间。")]),s._v(" "),a("h3",{attrs:{"data-nodeid":"33793"}},[s._v("卡顿指标采集")]),s._v(" "),a("p",{attrs:{"data-nodeid":"34379"}},[a("strong",{attrs:{"data-nodeid":"34384"}},[s._v("所谓卡顿，简单来说就是页面出现卡住了的不流畅的情况。")]),s._v(" 提到它的指标，你是不是会一下就想到 FPS（Frames Per Second，每秒显示帧数）？FPS 多少算卡顿？网上有很多资料，大多提到 FPS 在 60  以上，页面流畅，不卡顿。但事实上并非如此，比如我们看电影或者动画时，素虽然 FPS 是 30 （低于60），但我们觉得很流畅，并不卡顿。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"33795"}},[s._v("FPS 低于 60 并不意味着卡顿，那 FPS 高于 60 是否意味着一定不卡顿呢？比如前 60 帧渲染很快（10ms 渲染 1 帧），后面的 3 帧渲染很慢（ 20ms 渲染 1 帧），这样平均起来 FPS 为95，高于 60 的标准。这种情况会不会卡顿呢？实际效果是卡顿的。因为卡顿与否的关键点在于单帧渲染耗时是否过长。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"33796"}},[s._v("但难点在于，在浏览器上，我们没办法拿到单帧渲染耗时的接口，所以这时候，只能拿 FPS 来计算，只要 FPS 保持稳定，且值比较低，就没问题。它的标准是多少呢？"),a("strong",{attrs:{"data-nodeid":"33850"}},[s._v("连续 3 帧不低于 20 FPS，且保持恒定。")])]),s._v(" "),a("p",{attrs:{"data-nodeid":"33797"}},[s._v("以 H5 为例，H5 场景下获取 FPS 方案如下：")]),s._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"33798"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" fps_compatibility= function () {\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" (\n        window.requestAnimationFrame ||\n        window.webkitRequestAnimationFrame ||\n        function (callback) {\n            window.setTimeout(callback, "),a("span",{staticClass:"hljs-number"},[s._v("1000")]),s._v(" / "),a("span",{staticClass:"hljs-number"},[s._v("60")]),s._v(");\n        }\n    );\n}();\n"),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" fps_config={\n  lastTime:performance.now(),\n  lastFameTime : performance.now(),\n  frame:"),a("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("\n}\n"),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" fps_loop = function() {\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" _first =  performance.now(),_diff = (_first - fps_config.lastFameTime);\n    fps_config.lastFameTime = _first;\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" fps = Math.round("),a("span",{staticClass:"hljs-number"},[s._v("1000")]),s._v("/_diff);\n    fps_config.frame++;\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (_first > "),a("span",{staticClass:"hljs-number"},[s._v("1000")]),s._v(" + fps_config.lastTime) {\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" fps = Math.round( ( fps_config.frame * "),a("span",{staticClass:"hljs-number"},[s._v("1000")]),s._v(" ) / ( _first - fps_config.lastTime ) );\n        console.log(`time: ${"),a("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" Date()} fps is：`, fps);\n        fps_config.frame = "),a("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(";    \n        fps_config.lastTime = _first ;    \n    };           \n    fps_compatibility(fps_loop);   \n}\nfps_loop();\n"),a("span",{staticClass:"hljs-function"},[s._v("function "),a("span",{staticClass:"hljs-title"},[s._v("isBlocking")]),a("span",{staticClass:"hljs-params"},[s._v("(fpsList, below="),a("span",{staticClass:"hljs-number"},[s._v("20")]),s._v(", last="),a("span",{staticClass:"hljs-number"},[s._v("3")]),s._v(")")]),s._v(" ")]),s._v("{\n  "),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" count = "),a("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("\n  "),a("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v("("),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" i = "),a("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("; i < fpsList.length; i++) {\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (fpsList[i] && fpsList[i] < below) {\n      count++;\n    } "),a("span",{staticClass:"hljs-keyword"},[s._v("else")]),s._v(" {\n      count = "),a("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("\n    }\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (count >= last) {\n      "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),a("span",{staticClass:"hljs-keyword"},[s._v("true")]),s._v("\n    }\n  }\n  "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),a("span",{staticClass:"hljs-keyword"},[s._v("false")]),s._v("\n}\n")])]),s._v(" "),a("p",{attrs:{"data-nodeid":"33799"}},[s._v("利用 requestAnimationFrame  在一秒内执行 60 次（在不卡顿的情况下）这一点，假设页面加载用时 X ms，这期间 requestAnimationFrame 执行了 N 次，则帧率为1000* N/X，也就是FPS。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"33800"}},[s._v("由于用户客户端差异很大，我们要考虑兼容性，在这里我们定义 fps_compatibility 表示兼容性方面的处理，在浏览器不支持 requestAnimationFrame 时，利用 setTimeout 来模拟实现，在 fps_loop 里面完成 FPS 的计算，最终通过遍历 fpsList 来判断是否连续三次 fps 小于20。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"33801"}},[s._v("如果连续判断 3次 FPS 都小于20，就认为是卡顿。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"33802"}},[s._v("那么，在 App 侧，怎么采集卡顿指标呢？")]),s._v(" "),a("p",{attrs:{"data-nodeid":"33803"}},[s._v("App 侧可以拿到单帧渲染时长，直接让 App 取到单帧渲染时长，如果在 Android 环境下，可以直接取到单帧渲染时长。代码如下：")]),s._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"33804"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[s._v("private")]),s._v(" "),a("span",{staticClass:"hljs-keyword"},[s._v("void")]),s._v(" "),a("span",{staticClass:"hljs-title"},[s._v("calculateLag")]),a("span",{staticClass:"hljs-params"},[s._v("("),a("span",{staticClass:"hljs-keyword"},[s._v("long")]),s._v(" frameTimeNanos)")])]),s._v("{\n"),a("span",{staticClass:"hljs-comment"},[s._v("/*final long frameTimeNanos = mChoreographer.getFrameTimeNanos();*/")]),s._v("\nmLastFrameTimeNanos = System.nanoTime();\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (mLastFrameTimeNanos != "),a("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(") {\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("long")]),s._v(" costTime= (frameTimeNanos - mLastFrameTimeNanos)/ "),a("span",{staticClass:"hljs-number"},[s._v("1000000.0F")]),s._v(";"),a("span",{staticClass:"hljs-comment"},[s._v("//计算成毫秒")]),s._v("\n        "),a("span",{staticClass:"hljs-comment"},[s._v("//严重卡顿，单帧超过250ms")]),s._v("\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (costTime>= bigJankTime) {\n            bJank = "),a("span",{staticClass:"hljs-keyword"},[s._v("true")]),s._v(";\n        } "),a("span",{staticClass:"hljs-keyword"},[s._v("else")]),s._v(" "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (costTime>= criticalBlockTime) {"),a("span",{staticClass:"hljs-comment"},[s._v("//超过50ms")]),s._v("\n                mCriticalBlockCount++;\n        } "),a("span",{staticClass:"hljs-keyword"},[s._v("else")]),s._v(" {\n            "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (bJank) {\n                "),a("span",{staticClass:"hljs-comment"},[s._v("//严重卡顿上报逻辑")]),s._v("\n            } "),a("span",{staticClass:"hljs-keyword"},[s._v("else")]),s._v(" "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (mCriticalBlockCount >= cStuckThreshold) {\n                "),a("span",{staticClass:"hljs-comment"},[s._v("//卡顿上报逻辑，5次50ms")]),s._v("\n            }\n        }\n    }\n    mLastFrameTimeNanos = frameTimeNanos;\n}\n")])]),s._v(" "),a("p",{attrs:{"data-nodeid":"33805"}},[s._v("通过 mChoreographer.getFrameTimeNanos 和 System.nanoTime 计算出单帧渲染时长，如果单帧渲染时长超过 250ms，则严重卡断，反之连续 5 次超过 50ms，判定为卡顿。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"33806"}},[s._v("如果是 iOS 场景，要复杂一些，需要借助 CFRunLoop 来取到单帧渲染时长（CFRunLoop，它负责监听输入源，并调度处理）。代码如下：")]),s._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"33807"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[s._v("static")]),s._v(" "),a("span",{staticClass:"hljs-keyword"},[s._v("void")]),s._v(" "),a("span",{staticClass:"hljs-title"},[s._v("runLoopObserverCallBack")]),a("span",{staticClass:"hljs-params"},[s._v("(CFRunLoopObserverRef observer, CFRunLoopActivity activity, "),a("span",{staticClass:"hljs-keyword"},[s._v("void")]),s._v(" *info)")]),s._v("\n")]),s._v("{\n    MyClass *object = (__bridge MyClass*)info; \n    "),a("span",{staticClass:"hljs-comment"},[s._v("// 记录状态值")]),s._v("\n    object->activity = activity;    \n    "),a("span",{staticClass:"hljs-comment"},[s._v("// 发送信号")]),s._v("\n    dispatch_semaphore_t semaphore = moniotr->semaphore;\n    dispatch_semaphore_signal(semaphore);\n}\n- ("),a("span",{staticClass:"hljs-keyword"},[s._v("void")]),s._v(")registerObserver\n{\n    CFRunLoopObserverContext context = {"),a("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(",(__bridge "),a("span",{staticClass:"hljs-keyword"},[s._v("void")]),s._v("*)self,NULL,NULL};\n    CFRunLoopObserverRef observer = CFRunLoopObserverCreate(kCFAllocatorDefault,kCFRunLoopAllActivities,YES,"),a("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(",&runLoopObserverCallBack,&context);\n    CFRunLoopAddObserver(CFRunLoopGetMain(), observer, kCFRunLoopCommonModes);\n    "),a("span",{staticClass:"hljs-comment"},[s._v("// 创建信号")]),s._v("\n    semaphore = dispatch_semaphore_create("),a("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(");   \n    "),a("span",{staticClass:"hljs-comment"},[s._v("// 在子线程监控时长")]),s._v("\n    dispatch_async(dispatch_get_global_queue("),a("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(", "),a("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("), ^{\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("while")]),s._v(" (YES)\n        {\n            "),a("span",{staticClass:"hljs-comment"},[s._v("// 假定连续5次超时50ms认为卡顿(当然也包含了单次超时250ms)")]),s._v("\n            "),a("span",{staticClass:"hljs-keyword"},[s._v("long")]),s._v(" st = dispatch_semaphore_wait(semaphore, dispatch_time(DISPATCH_TIME_NOW, "),a("span",{staticClass:"hljs-number"},[s._v("50")]),s._v("*NSEC_PER_MSEC));\n            "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (st != "),a("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(")\n            {\n                "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (activity==kCFRunLoopBeforeSources || activity==kCFRunLoopAfterWaiting)\n                {\n                    "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (++timeoutCount < "),a("span",{staticClass:"hljs-number"},[s._v("5")]),s._v(")\n                        "),a("span",{staticClass:"hljs-keyword"},[s._v("continue")]),s._v(";\n                    "),a("span",{staticClass:"hljs-comment"},[s._v("// 检测到卡顿，进行卡顿上报")]),s._v("\n                }\n            }\n            timeoutCount = "),a("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(";\n        }\n    });\n} \n")])]),s._v(" "),a("p",{attrs:{"data-nodeid":"34623"}},[s._v("通过 CFRunLoopObserverContext 将休眠、唤醒的状态通知 Observer，然后通过 dispatch_async 在子线程时监控节点之间的时间，来计算主线程的时长。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"34624"}},[s._v("这里监控主线程是否卡顿这块儿，借鉴了导航 App 对交通堵塞问题的判断逻辑。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"33809"}},[s._v("导航 App 无法判断某个地点是否出了问题，如车坏在当路，正在施工，或者发生事故剐蹭了这些，但可以借助 GPS 和定位仪，拿到你两个节点之间的行驶速度，就可以推断出这个地点是否拥堵。这里的监控思路也正是如此，使用状态kCFRunLoopBeforeSources 和 kCFRunLoopAfterWaiting 两个节点之间的运行时间，和某个阈值（250ms）做比较，根据比较结果判定主线程是否出现卡顿。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"33810"}},[s._v("为什么会出现 App 白屏时间过长或卡顿问题呢？一般 WebView 初始化慢、DNS 解析慢、视图树过于复杂和主线程被阻塞等都会导致问题出现，但很多情况下白屏时间和卡顿都和网络环境有关。为了保证页面顺畅，我们需要做一些服务降级处理，比如对电商网站来说，高清图可以用文本代替，仅展示购买按钮和价格等核心内容。而要实现这个功能，就必须先做好网络环境采集。")]),s._v(" "),a("h3",{attrs:{"data-nodeid":"33811"}},[s._v("网络环境采集")]),s._v(" "),a("p",{attrs:{"data-nodeid":"33812"}},[s._v("为什么不能直接拿到网络环境数据呢？如果在 App 内， 我们可以通过 App 提供的接口获取到网络情况，但在端外（App 外部环境，比如微信里面的页面，或者PC站、手机浏览器下的页面）我们就没法直接拿到当前网络情况了。这时怎么办呢？")]),s._v(" "),a("p",{attrs:{"data-nodeid":"33813"}},[s._v("一个做法是拿到两张不同尺寸图片的加载时间，通过计算结果来判定当前网络环境。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"33814"}},[s._v("具体来说，我们在每次页面加载时，通过客户端向服务端发送图片请求，比如，请求一张 1"),a("em",{attrs:{"data-nodeid":"33880"}},[s._v("1 像素的图片和一张 3")]),s._v("3 像素的图片，然后在图片请求之初打一个时间点，在图片 onLoad 完成后打一个时间点，两个时间点之差，就是图片的加载时间。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"33815"}},[s._v("接着，我们用文件体积除以加载时间，就能得出两张图片的加载速度，然后把两张图片的加载速度求平均值，这个结果就可以当作网络速度了。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"33816"}},[s._v("因为每个单页面启动时，都会做一次网速采集，得到一个网络速度，我们可以把这些网络速度做概率分布，就能得出当前网络情况是 2G （750-1400ms）、3G （230-750ms）、4G或者WiFi（0-230ms）。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"33817"}},[s._v("下面这张图是 2016 年我在做移动端 M 站性能优化项目时，做的图片测速结果分布。横坐标是速度，纵坐标是网速在分布中的分位值，最左侧是 wifi网络，中间是 3G 网络，最右侧是 2G 网络。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"35104"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M00/13/2E/CioPOWBB3_uAM53JAABIZ7HhMWA539.png",alt:"image (4).png","data-nodeid":"35112"}})]),s._v(" "),a("div",{attrs:{"data-nodeid":"35105"}},[a("p",{staticStyle:{"text-align":"center"}},[s._v("图片测速结果分布")])]),s._v(" "),a("p",{attrs:{"data-nodeid":"33820"}},[s._v("根据这张图，你会发现自己的用户都停留在什么网段。比如，我在 2016 年发现，58 同城的用户测速分布，50% 的用户停留在 2G 水平。知道了这点，我们后续针对的优化手段就会更多侧重 2G 下的网络优化方案了。")]),s._v(" "),a("h3",{attrs:{"data-nodeid":"33821"}},[s._v("小结")]),s._v(" "),a("p",{staticClass:"te-preview-highlight",attrs:{"data-nodeid":"35357"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M00/13/31/Cgp9HWBB4AOAUUkHAAFD-5Vtth4452.png",alt:"溪风的思维导图05.png","data-nodeid":"35360"}})]),s._v(" "),a("p",{attrs:{"data-nodeid":"33823"}},[s._v("前面我们详细讲了白屏时间采集、卡顿指标采集和网络环境采集，有了这个采集，我们就能很容易定位用户体验层的很多问题，比如加载感受、交互感受和弱网下的服务降级处理，等等。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"33824"}},[s._v("在白屏部分，里面提到的更偏加载阶段的白屏，实际工作中我们会遇到不少广义上的白屏，比如后端接口异常导致的白屏，数据加载中产生的白屏，甚至还有图片与视频加载过程或等待过程中的白屏。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"33825"}},[s._v("那么，现在就给你留一个问题：这些广义的白屏问题怎么采集监控呢？")]),s._v(" "),a("p",{attrs:{"data-nodeid":"33826"}},[s._v("欢迎在评论区和我沟通。下一讲，我们进入上报 SDK及策略设计部分。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"33827"}},[s._v("源码地址："),a("a",{attrs:{href:"https://github.com/lagoueduCol/WebPerformanceOptimization-xifeng/tree/master/chapter5","data-nodeid":"33900"}},[s._v("https://github.com/lagoueduCol/WebPerformanceOptimization-xifeng/tree/master/chapter5")])]),s._v(" "),a("hr"),s._v(" "),a("h3",{attrs:{id:"精选评论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#精选评论"}},[s._v("#")]),s._v(" 精选评论")]),s._v(" "),a("h5",{attrs:{id:"燕"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#燕"}},[s._v("#")]),s._v(" **燕：")]),s._v(" "),a("blockquote",[a("p",[s._v("有点没太明白文中前60针 没帧10ms 后3⃣️针 20s 最后计算fps为95是怎么得出来？")])]),s._v(" "),a("h6",{attrs:{id:"讲师回复"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复"}},[s._v("#")]),s._v("     讲师回复：")]),s._v(" "),a("blockquote",[a("p",[s._v("    赞认真阅读和思考，1000/（(60"),a("em",[s._v("10+3")]),s._v("20)/3），算出来每帧耗费的时间，因为是毫秒，用1000去除得出1秒内多少帧也就是fps")])]),s._v(" "),a("h5",{attrs:{id:"熙"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#熙"}},[s._v("#")]),s._v(" **熙：")]),s._v(" "),a("blockquote",[a("p",[s._v("请问小程序中如何获取呢")])]),s._v(" "),a("h6",{attrs:{id:"讲师回复-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-2"}},[s._v("#")]),s._v("     讲师回复：")]),s._v(" "),a("blockquote",[a("p",[s._v("    目前我们主要做了首屏时间采集逻辑，首屏时间是路由开始到 setData 结束。")])])])}),[],!1,null,null,null);a.default=e.exports}}]);