(window.webpackJsonp=window.webpackJsonp||[]).push([[237],{571:function(a,t,d){"use strict";d.r(t);var e=d(4),s=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("p",{attrs:{"data-nodeid":"31976"}},[a._v("首先，我们尝试通过 Webpack 打包项目中的一个 CSS 文件，由此开始探索 Webpack 是如何加载资源模块的？")]),a._v(" "),t("p",{attrs:{"data-nodeid":"31977"}},[a._v("在下面这个案例中，我们在项目的 src 目录下添加一个普通的样式文件 main.css，具体结构和样式代码如下所示：")]),a._v(" "),t("pre",{staticClass:"lang-js",attrs:{"data-nodeid":"31978"}},[t("code",{attrs:{"data-language":"js"}},[a._v(" └─ "),t("span",{staticClass:"hljs-number"},[a._v("03")]),a._v("-webpack-loader ························ sample root dir\n    ├── src ·································· source dir\n+   │   └── main.css ························· main styles\n    ├── package.json ························· package file\n    └── webpack.config.js ···················· webpack config file\n")])]),a._v(" "),t("pre",{staticClass:"lang-js",attrs:{"data-nodeid":"31979"}},[t("code",{attrs:{"data-language":"js"}},[a._v("/* ./src/main.css */\nbody {\n  margin: 0 auto;\n  padding: 0 20px;\n  max-width: 800px;\n  background: #f4f8fb;\n}\n")])]),a._v(" "),t("p",{attrs:{"data-nodeid":"31980"}},[a._v("然后将 Webpack 配置中的入口文件路径指定为 main.css 的文件路径，让 Webpack 直接打包 CSS 资源文件，具体配置如下所示：")]),a._v(" "),t("pre",{staticClass:"lang-js",attrs:{"data-nodeid":"31981"}},[t("code",{attrs:{"data-language":"js"}},[t("span",{staticClass:"hljs-built_in"},[a._v("module")]),a._v(".exports = {\n  "),t("span",{staticClass:"hljs-comment"},[a._v("// 样式文件路径")]),a._v("\n  "),t("span",{staticClass:"hljs-attr"},[a._v("entry")]),a._v(": "),t("span",{staticClass:"hljs-string"},[a._v("'./src/main.css'")]),a._v(",\n  "),t("span",{staticClass:"hljs-attr"},[a._v("output")]),a._v(": {\n    "),t("span",{staticClass:"hljs-attr"},[a._v("filename")]),a._v(": "),t("span",{staticClass:"hljs-string"},[a._v("'bundle.js'")]),a._v("\n  }\n}\n")])]),a._v(" "),t("p",{attrs:{"data-nodeid":"31982"}},[a._v("你可能会好奇：Webpack 的打包入口不是应该是一个 JS 文件吗？为什么这里配置成了一个 CSS 文件呢？")]),a._v(" "),t("p",{attrs:{"data-nodeid":"31983"}},[a._v("其实 Webpack 并没有强制要求我们必须以 JS 文件作为打包入口，只是在绝大多数情况下，我们会用 JS 文件作为打包入口，因为 JS 文件才是程序的逻辑入口，以 JS 文件作为入口相对更合理。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"31984"}},[a._v("那么，我们这里为什么要使用 CSS 文件作为入口呢？其实就是单纯地为了尝试使用 Webpack 直接去打包 CSS 文件，关于同时打包 JS 和 CSS 的操作，待会儿会详细介绍。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"31985"}},[a._v("配置完成过后回到命令行终端再次运行 Webpack 打包命令，此时你会发现命令行报出了一个模块解析错误，如下所示：")]),a._v(" "),t("p",{attrs:{"data-nodeid":"31986"}},[t("img",{attrs:{src:"https://s0.lgstatic.com/i/image3/M01/13/A7/Ciqah16f_9iAeIxHAAEyykeZNFk556.png",alt:"w1.png","data-nodeid":"32148"}})]),a._v(" "),t("p",{attrs:{"data-nodeid":"31987"}},[a._v("错误信息大体的意思是说，在解析模块过程中遇到了非法字符，而且错误出现的位置就是在我们的 CSS 文件中。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"31988"}},[a._v("出现这个错误的原因是因为 Webpack 内部默认只能够处理 JS 模块代码，也就是说在打包过程中，它默认把所有遇到的文件都当作 JavaScript 代码进行解析，但是此处我们让 Webpack 处理的是 CSS 代码，而 CSS 代码是不符合 JavaScript 语法的，所以自然会报出模块解析错误。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"31989"}},[a._v("为了佐证 Webpack 默认只能够按照 JavaScript 语法解析模块，你可以尝试将 main.css 文件中的代码修改为一段 JavaScript 代码，然后重新运行 Webpack 打包来看一下结果。具体操作如下：")]),a._v(" "),t("pre",{staticClass:"lang-js",attrs:{"data-nodeid":"31990"}},[t("code",{attrs:{"data-language":"js"}},[t("span",{staticClass:"hljs-comment"},[a._v("/* ./src/main.css */")]),a._v("\n"),t("span",{staticClass:"hljs-built_in"},[a._v("console")]),a._v(".log("),t("span",{staticClass:"hljs-string"},[a._v("'This is a style sheet.'")]),a._v(") \n"),t("span",{staticClass:"hljs-comment"},[a._v("/* 只是为了证明 Webpack 默认按照 JS 语法解析模块 */")]),a._v("\n")])]),a._v(" "),t("p",{attrs:{"data-nodeid":"31991"}},[t("img",{attrs:{src:"https://s0.lgstatic.com/i/image3/M01/13/A8/Ciqah16gAIuASNDtAACtn0stBcY488.png",alt:"w2.png","data-nodeid":"32154"}})]),a._v(" "),t("blockquote",{attrs:{"data-nodeid":"31992"}},[t("p",{attrs:{"data-nodeid":"31993"}},[a._v("注意：这里在 CSS 中编写 JS 代码只是为了证实我们的观点，并不是真的要这样使用。")])]),a._v(" "),t("p",{attrs:{"data-nodeid":"31994"}},[a._v("我们再次回到前面提到的错误描述中，如下所示：")]),a._v(" "),t("p",{attrs:{"data-nodeid":"31995"}},[t("img",{attrs:{src:"https://s0.lgstatic.com/i/image3/M01/13/A7/Ciqah16gAHWAYR9SAAEyykeZNFk323.png",alt:"w3.png","data-nodeid":"32159"}})]),a._v(" "),t("p",{attrs:{"data-nodeid":"31996"}},[a._v("这里有一个非常重要的提示："),t("em",{attrs:{"data-nodeid":"32164"}},[a._v("You may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. （我们需要用适当的加载器来处理这种文件类型，而当前并没有配置一个可以用来处理此文件的加载器）。")])]),a._v(" "),t("p",{attrs:{"data-nodeid":"31997"}},[a._v("根据这个错误说明，我们发现 Webpack 是用 Loader（加载器）来处理每个模块的，而内部默认的 Loader 只能处理 JS 模块，如果需要加载其他类型的模块就需要配置不同的 Loader。这也就引出了我们今天的主角：Loader。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"31998"}},[t("img",{attrs:{src:"https://s0.lgstatic.com/i/image3/M01/13/A8/Ciqah16gAM2AVBOyAACbAmBWOWM473.png",alt:"w5.png","data-nodeid":"32168"}})]),a._v(" "),t("h4",{attrs:{"data-nodeid":"31999"}},[a._v("加载器的使用方式")]),a._v(" "),t("p",{attrs:{"data-nodeid":"32000"}},[a._v("需要的是一个可以加载 CSS 模块的 Loader，最常用到的是 css-loader。我们需要通过 npm 先去安装这个 Loader，然后在配置文件中添加对应的配置，具体操作和配置如下所示：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gcore.jsdelivr.net/gh/wu529778790/image/blog/20211109164708.png",alt:"20211109164708"}})]),a._v(" "),t("p",{attrs:{"data-nodeid":"40798"}},[a._v("在配置对象的 module 属性中添加一个 rules 数组。这个数组就是我们针对资源模块的加载规则配置，其中的每个规则对象都需要设置两个属性：")]),a._v(" "),t("ul",{attrs:{"data-nodeid":"40799"}},[t("li",{attrs:{"data-nodeid":"40800"}},[t("p",{attrs:{"data-nodeid":"40801"}},[a._v("首先是 test 属性，它是一个正则表达式，用来匹配打包过程中所遇到文件路径，这里我们是以 .css 结尾；")])]),a._v(" "),t("li",{attrs:{"data-nodeid":"40802"}},[t("p",{attrs:{"data-nodeid":"40803"}},[a._v("然后是 use 属性，它用来指定匹配到的文件需要使用的 loader，这里用到的是 css-loader。")])])]),a._v(" "),t("p",{attrs:{"data-nodeid":"40804"}},[a._v("配置完成过后，我们回到命令行终端重新运行打包命令，打包过程就不会再出现错误了，因为这时 CSS 文件会交给 css-loader 处理过后再由 Webpack 打包。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"40805"}},[t("img",{attrs:{src:"https://s0.lgstatic.com/i/image3/M01/06/79/CgoCgV6gAQyAVv7XAAAyFU_9fDQ769.png",alt:"w6.png","data-nodeid":"40934"}})]),a._v(" "),t("h4",{attrs:{"data-nodeid":"40806"}},[a._v("样式模块加载的问题")]),a._v(" "),t("p",{attrs:{"data-nodeid":"40807"}},[a._v("此时，如果你尝试在页面中使用这里输出的 bundle.js 文件，你会发现刚刚的这个 main.css 模块并没有工作。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"40808"}},[a._v("如果你之前有些经验，可能知道这个问题的解法，其实很简单，只需要再额外添加一个 style-loader，样式就可以正常工作了。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"40809"}},[a._v("不过只有解法没有原因不是我们的风格。下面我们来分析产生这个问题的真正原因，首先，我们找到刚刚生成的 bundle.js 文件，因为这个文件是 Webpack 打包后的结果，所有的模块都应该在这个文件中出现。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"40810"}},[a._v("由于默认打包入口在 Webpack 输出的结果中就是第一个模块，所以我们只需要看第一个模块目前是什么样的，如下图所示：")]),a._v(" "),t("p",{attrs:{"data-nodeid":"40811"}},[t("img",{attrs:{src:"https://s0.lgstatic.com/i/image3/M01/06/79/CgoCgV6gARSAXyX_AAFkFP2Qek8997.png",alt:"w7.png","data-nodeid":"40942"}})]),a._v(" "),t("p",{attrs:{"data-nodeid":"40812"}},[a._v("仔细阅读这个文件，你会发现 css-loader 的作用是将 CSS 模块转换为一个 JS 模块，具体的实现方法是将我们的 CSS 代码 push 到一个数组中，这个数组是由 css-loader 内部的一个模块提供的，但是整个过程并没有任何地方使用到了这个数组。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"40813"}},[a._v("因此这里样式没有生效的原因是： "),t("strong",{attrs:{"data-nodeid":"40948"}},[a._v("css-loader 只会把 CSS 模块加载到 JS 代码中，而并不会使用这个模块。")])]),a._v(" "),t("p",{attrs:{"data-nodeid":"40814"}},[a._v("所以这里我们还需要在 css-loader 的基础上再使用一个 style-loader，把 css-loader 转换后的结果通过 style 标签追加到页面上。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"40815"}},[a._v("安装完 style-loader 之后，我们将配置文件中的 use 属性修改为一个数组，将 style-loader 也放进去。这里需要注意的是，一旦配置多个 Loader，执行顺序是从后往前执行的，所以这里一定要将 css-loader 放在最后，因为必须要 css-loader 先把 CSS 代码转换为 JS 模块，才可以正常打包，具体配置如下：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gcore.jsdelivr.net/gh/wu529778790/image/blog/20211109164952.png",alt:"20211109164952"}})]),a._v(" "),t("p",{attrs:{"data-nodeid":"45492"}},[a._v("配置完成之后，再次回到命令行重新打包，此时 bundle.js 文件中会额外多出两个模块。篇幅的关系，我们这里不再仔细解读。"),t("strong",{attrs:{"data-nodeid":"45606"}},[a._v("style-loader 的作用总结一句话就是，将 css-loader 中所加载到的所有样式模块，通过创建 style 标签的方式添加到页面上。")])]),a._v(" "),t("p",{attrs:{"data-nodeid":"45493"}},[a._v("以上就是我们对 Loader 使用的一些探索，Loader 是 Webpack 实现整个前端模块化的核心。因为只有通过不同的 Loader，Webpack 才可以实现任何类型资源的加载。")]),a._v(" "),t("h4",{attrs:{"data-nodeid":"45494"}},[a._v("通过 JS 加载资源模块")]),a._v(" "),t("p",{attrs:{"data-nodeid":"45495"}},[a._v("正如刚刚所提到的，一般 Webpack 打包的入口还是 JavaScript。因为从某种程度上来说，打包入口就是应用的运行入口，而目前前端应用中的业务是由 JS 驱动的，所以更合理的做法还是把 JS 文件作为打包的入口，然后在 JS 代码中通过 import 语句去加载 CSS 文件。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gcore.jsdelivr.net/gh/wu529778790/image/blog/20211109171013.png",alt:"20211109171013"}})]),a._v(" "),t("p",{attrs:{"data-nodeid":"45499"}},[a._v("即便是通过 JS 代码去加载的 CSS 模块，css-loader 和 style-loader 仍然可以正常工作。因为 Webpack 在打包过程中会循环遍历每个模块，然后根据配置将每个遇到的模块交给对应的 Loader 去处理，最后再将处理完的结果打包到一起。")]),a._v(" "),t("h4",{attrs:{"data-nodeid":"45500"}},[a._v("为什么要在 JS 中加载其他资源")]),a._v(" "),t("p",{attrs:{"data-nodeid":"45501"}},[a._v("说到这里，你可能会产生疑惑：Webpack 为什么要在 JS 中载入 CSS 呢？不是应该将样式和行为分离么？")]),a._v(" "),t("p",{attrs:{"data-nodeid":"45502"}},[a._v("其实 Webpack 不仅是建议我们在 JavaScript 中引入 CSS，还会建议我们在代码中引入当前业务所需要的任意资源文件。因为真正需要这个资源的并不是整个应用，而是你此时正在编写的代码。这就是 Webpack 的设计哲学。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"45503"}},[a._v("可能你乍一想好像不太容易理解，那你可以做一个假设：假设我们在开发页面上的某个局部功能时，需要用到一个样式模块和一个图片文件。如果你还是将这些资源文件单独引入到 HTML 中，然后再到 JS 中添加对应的逻辑代码。试想一下，如果后期这个局部功能不用了，你就需要同时删除 JS 中的代码和 HTML 中的资源文件引入，也就是同时需要维护这两条线。而如果你遵照 Webpack 的这种设计，所有资源的加载都是由 JS 代码控制，后期也就只需要维护 JS 代码这一条线了。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"45504"}},[a._v("所以说，通过 JavaScript 代码去引入资源文件，或者说是建立 JavaScript 和资源文件的依赖关系，具有明显的优势。因为 JavaScript 代码本身负责完成整个应用的业务功能，放大来说就是驱动了整个前端应用，而 JavaScript 代码在实现业务功能的过程中需要用到样式、图片等资源文件。如果建立这种依赖关系：")]),a._v(" "),t("ul",{attrs:{"data-nodeid":"45505"}},[t("li",{attrs:{"data-nodeid":"45506"}},[t("p",{attrs:{"data-nodeid":"45507"}},[a._v("一来逻辑上比较合理，因为 JS 确实需要这些资源文件配合才能实现整体功能；")])]),a._v(" "),t("li",{attrs:{"data-nodeid":"45508"}},[t("p",{attrs:{"data-nodeid":"45509"}},[a._v("二来配合 Webpack 这类工具的打包，能确保在上线时，资源不会缺失，而且都是必要的。")])])]),a._v(" "),t("table",{attrs:{"data-nodeid":"45513"}},[t("thead",{attrs:{"data-nodeid":"45514"}},[t("tr",{attrs:{"data-nodeid":"45515"}},[t("th",{attrs:{"data-org-content":"名称","data-nodeid":"45517"}},[a._v("名称")]),a._v(" "),t("th",{attrs:{"data-org-content":"链接","data-nodeid":"45518"}},[a._v("链接")])])]),a._v(" "),t("tbody",{attrs:{"data-nodeid":"45521"}},[t("tr",{attrs:{"data-nodeid":"45522"}},[t("td",{attrs:{"data-org-content":"file-loader","data-nodeid":"45523"}},[a._v("file-loader")]),a._v(" "),t("td",{attrs:{"data-org-content":"[https://webpack.js.org/loaders/file-loader](https://webpack.js.org/loaders/file-loader)","data-nodeid":"45524"}},[t("a",{attrs:{href:"https://webpack.js.org/loaders/file-loader","data-nodeid":"45628"}},[a._v("https://webpack.js.org/loaders/file-loader")])])]),a._v(" "),t("tr",{attrs:{"data-nodeid":"45525"}},[t("td",{attrs:{"data-org-content":"url-loader","data-nodeid":"45526"}},[a._v("url-loader")]),a._v(" "),t("td",{attrs:{"data-org-content":"[https://webpack.js.org/loaders/url-loader](https://webpack.js.org/loaders/url-loader)","data-nodeid":"45527"}},[t("a",{attrs:{href:"https://webpack.js.org/loaders/url-loader","data-nodeid":"45632"}},[a._v("https://webpack.js.org/loaders/url-loader")])])]),a._v(" "),t("tr",{attrs:{"data-nodeid":"45528"}},[t("td",{attrs:{"data-org-content":"babel-loader","data-nodeid":"45529"}},[a._v("babel-loader")]),a._v(" "),t("td",{attrs:{"data-org-content":"[https://webpack.js.org/loaders/babel-loader](https://webpack.js.org/loaders/babel-loader)","data-nodeid":"45530"}},[t("a",{attrs:{href:"https://webpack.js.org/loaders/babel-loader","data-nodeid":"45636"}},[a._v("https://webpack.js.org/loaders/babel-loader")])])]),a._v(" "),t("tr",{attrs:{"data-nodeid":"45531"}},[t("td",{attrs:{"data-org-content":"style-loader","data-nodeid":"45532"}},[a._v("style-loader")]),a._v(" "),t("td",{attrs:{"data-org-content":"[https://webpack.js.org/loaders/style-loader](https://webpack.js.org/loaders/style-loader)","data-nodeid":"45533"}},[t("a",{attrs:{href:"https://webpack.js.org/loaders/style-loader","data-nodeid":"45640"}},[a._v("https://webpack.js.org/loaders/style-loader")])])]),a._v(" "),t("tr",{attrs:{"data-nodeid":"45534"}},[t("td",{attrs:{"data-org-content":"css-loader","data-nodeid":"45535"}},[a._v("css-loader")]),a._v(" "),t("td",{attrs:{"data-org-content":"[https://webpack.js.org/loaders/css-loader](https://webpack.js.org/loaders/css-loader)","data-nodeid":"45536"}},[t("a",{attrs:{href:"https://webpack.js.org/loaders/css-loader","data-nodeid":"45644"}},[a._v("https://webpack.js.org/loaders/css-loader")])])]),a._v(" "),t("tr",{attrs:{"data-nodeid":"45537"}},[t("td",{attrs:{"data-org-content":"sass-loader","data-nodeid":"45538"}},[a._v("sass-loader")]),a._v(" "),t("td",{attrs:{"data-org-content":"[https://webpack.js.org/loaders/sass-loader](https://webpack.js.org/loaders/sass-loader)","data-nodeid":"45539"}},[t("a",{attrs:{href:"https://webpack.js.org/loaders/sass-loader","data-nodeid":"45648"}},[a._v("https://webpack.js.org/loaders/sass-loader")])])]),a._v(" "),t("tr",{attrs:{"data-nodeid":"45540"}},[t("td",{attrs:{"data-org-content":"postcss-loader","data-nodeid":"45541"}},[a._v("postcss-loader")]),a._v(" "),t("td",{attrs:{"data-org-content":"[https://webpack.js.org/loaders/postcss-loader](https://webpack.js.org/loaders/postcss-loader)","data-nodeid":"45542"}},[t("a",{attrs:{href:"https://webpack.js.org/loaders/postcss-loader","data-nodeid":"45652"}},[a._v("https://webpack.js.org/loaders/postcss-loader")])])]),a._v(" "),t("tr",{attrs:{"data-nodeid":"45543"}},[t("td",{attrs:{"data-org-content":"eslint-loader","data-nodeid":"45544"}},[a._v("eslint-loader")]),a._v(" "),t("td",{attrs:{"data-org-content":"[https://github.com/webpack-contrib/eslint-loader](https://github.com/webpack-contrib/eslint-loader)","data-nodeid":"45545"}},[t("a",{attrs:{href:"https://github.com/webpack-contrib/eslint-loader","data-nodeid":"45656"}},[a._v("https://github.com/webpack-contrib/eslint-loader")])])]),a._v(" "),t("tr",{attrs:{"data-nodeid":"45546"}},[t("td",{attrs:{"data-org-content":"vue-loader","data-nodeid":"45547"}},[a._v("vue-loader")]),a._v(" "),t("td",{attrs:{"data-org-content":"[https://github.com/vuejs/vue-loader](https://github.com/vuejs/vue-loader)","data-nodeid":"45548"}},[t("a",{attrs:{href:"https://github.com/vuejs/vue-loader","data-nodeid":"45660"}},[a._v("https://github.com/vuejs/vue-loader")])])])])]),a._v(" "),t("h3",{attrs:{"data-nodeid":"45550"}},[a._v("开发一个 Loader")]),a._v(" "),t("p",{attrs:{"data-nodeid":"45552"}},[a._v("这里我的需求是开发一个可以加载 markdown 文件的加载器，以便可以在代码中直接导入 md 文件。我们都应该知道 markdown 一般是需要转换为 html 之后再呈现到页面上的，所以我希望导入 md 文件后，直接得到 markdown 转换后的 html 字符串，如下图所示：")]),a._v(" "),t("p",{attrs:{"data-nodeid":"45554"}},[a._v("由于这里需要直观地演示，我就不再单独创建一个 npm 模块，而是就直接在项目根目录下创建一个 markdown-loader.js 文件，完成后你可以把这个模块发布到 npm 上作为一个独立的模块使用。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"45555"}},[a._v("项目结构与核心代码如下所示：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gcore.jsdelivr.net/gh/wu529778790/image/blog/20211109165502.png",alt:"20211109165502"}})]),a._v(" "),t("p",{attrs:{"data-nodeid":"45559"}},[a._v("每个 Webpack 的 Loader 都需要导出一个函数，这个函数就是我们这个 Loader 对资源的处理过程，它的输入就是加载到的资源文件内容，输出就是我们加工后的结果。我们通过 source 参数接收输入，通过返回值输出。这里我们先尝试打印一下 source，然后在函数的内部直接返回一个字符串 "),t("code",{attrs:{"data-backticks":"1","data-nodeid":"45671"}},[a._v("hello loader ~")]),a._v("，具体代码如下所示：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gcore.jsdelivr.net/gh/wu529778790/image/blog/20211109165600.png",alt:"20211109165600"}})]),a._v(" "),t("p",{attrs:{"data-nodeid":"45561"}},[a._v("完成以后，我们回到 Webpack 配置文件中添加一个加载器规则，这里匹配到的扩展名是 .md，使用的加载器就是我们刚刚编写的这个 markdown-loader.js 模块，具体代码如下所示：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gcore.jsdelivr.net/gh/wu529778790/image/blog/20211109165644.png",alt:"20211109165644"}})]),a._v(" "),t("blockquote",{attrs:{"data-nodeid":"45563"}},[t("p",{attrs:{"data-nodeid":"45564"}},[a._v("TIPS：这里的 use 中不仅可以使用模块名称，还可以使用模块文件路径，这点与 Node 中的 require 函数是一样的。")])]),a._v(" "),t("p",{attrs:{"data-nodeid":"45565"}},[a._v("配置完成后，我们再次打开命令行终端运行打包命令，如下图所示：")]),a._v(" "),t("p",{attrs:{"data-nodeid":"45566"}},[t("img",{attrs:{src:"https://s0.lgstatic.com/i/image3/M01/13/AC/Ciqah16gA5-AYUL-AAFjrdy2lKQ113.png",alt:"w10.png","data-nodeid":"45678"}})]),a._v(" "),t("p",{attrs:{"data-nodeid":"45567"}},[a._v("打包过程中命令行确实打印出来了我们所导入的 Markdown 文件内容，这就意味着 Loader 函数的参数确实是文件的内容。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"45568"}},[a._v("但同时也报出了一个解析错误，说的是： "),t("em",{attrs:{"data-nodeid":"45684"}},[a._v("You may need an additional loader to handle the result of these loaders.（我们可能还需要一个额外的加载器来处理当前加载器的结果）。")])]),a._v(" "),t("p",{attrs:{"data-nodeid":"45569"}},[a._v("那这究竟是为什么呢？其实 Webpack 加载资源文件的过程类似于一个工作管道，你可以在这个过程中依次使用多个 Loader，但是最终这个管道结束过后的结果必须是一段标准的 JS 代码字符串。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gcore.jsdelivr.net/gh/wu529778790/image/blog/20211109165754.png",alt:"20211109165754"}})]),a._v(" "),t("p",{attrs:{"data-nodeid":"45571"}},[a._v("所以我们这里才会出现上面提到的错误提示，那解决的办法也就很明显了：")]),a._v(" "),t("ul",{attrs:{"data-nodeid":"45572"}},[t("li",{attrs:{"data-nodeid":"45573"}},[t("p",{attrs:{"data-nodeid":"45574"}},[t("strong",{attrs:{"data-nodeid":"45693"}},[a._v("直接在这个 Loader 的最后返回一段 JS 代码字符串；")])])]),a._v(" "),t("li",{attrs:{"data-nodeid":"45575"}},[t("p",{attrs:{"data-nodeid":"45576"}},[t("strong",{attrs:{"data-nodeid":"45697"}},[a._v("再找一个合适的加载器，在后面接着处理我们这里得到的结果。")])])])]),a._v(" "),t("p",{attrs:{"data-nodeid":"45577"}},[a._v("先来尝试第一种办法。回到 markdown-loader 中，我们将返回的字符串内容修改为 console.log('hello loader~')，然后再次运行打包，此时 Webpack 就不再会报错了，代码如下所示：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gcore.jsdelivr.net/gh/wu529778790/image/blog/20211109165826.png",alt:"20211109165826"}})]),a._v(" "),t("p",{attrs:{"data-nodeid":"45579"}},[a._v("那此时打包的结果是怎样的呢？我们打开输出的 bundle.js，找到最后一个模块（因为这个 md 文件是后引入的），如下图所示：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gcore.jsdelivr.net/gh/wu529778790/image/blog/20211109165844.png",alt:"20211109165844"}})]),a._v(" "),t("p",{attrs:{"data-nodeid":"45581"}},[a._v("这个模块里面非常简单，就是把我们刚刚返回的字符串直接拼接到了该模块中。这也解释了刚刚 Loader 管道最后必须返回 JS 代码的原因，因为如果随便返回一个内容，放到这里语法就不通过了。")]),a._v(" "),t("h4",{attrs:{"data-nodeid":"45582"}},[a._v("实现 Loader 的逻辑")]),a._v(" "),t("p",{attrs:{"data-nodeid":"45583"}},[a._v("了解了 Loader 大致的工作机制过后，我们再回到 markdown-loader.js 中，接着完成我的需求。这里需要安装一个能够将 Markdown 解析为 HTML 的模块，叫作 marked。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"45584"}},[a._v("安装完成后，我们在 markdown-loader.js 中导入这个模块，然后使用这个模块去解析我们的 source。这里解析完的结果就是一段 HTML 字符串，如果我们直接返回的话同样会面临 Webpack 无法解析模块的问题，正确的做法是把这段 HTML 字符串拼接为一段 JS 代码。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"45585"}},[a._v("此时我们希望返回的代码是通过 module.exports 导出这段 HTML 字符串，这样外界导入模块时就可以接收到这个 HTML 字符串了。如果只是简单地拼接，那 HTML 中的换行和引号就都可能会造成语法错误，所以我这里使用了一个小技巧，具体操作如下所示：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gcore.jsdelivr.net/gh/wu529778790/image/blog/20211109165951.png",alt:"20211109165951"}})]),a._v(" "),t("p",{attrs:{"data-nodeid":"45587"}},[a._v("先通过 JSON.stringify() 将字段字符串转换为标准的 JSON 字符串，然后再参与拼接，这样就不会有问题了。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"45588"}},[a._v("我们回到命令行再次运行打包，打包后的结果就是我们所需要的了。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"45589"}},[a._v("除了 module.exports 这种方式，Webpack 还允许我们在返回的代码中使用 ES Modules 的方式导出，例如，我们这里将 module.exports 修改为 export default，然后运行打包，结果同样是可以的，Webpack 内部会自动转换 ES Modules 代码。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gcore.jsdelivr.net/gh/wu529778790/image/blog/20211109170025.png",alt:"20211109170025"}})]),a._v(" "),t("h4",{attrs:{"data-nodeid":"45591"}},[a._v("多个 Loader 的配合")]),a._v(" "),t("p",{attrs:{"data-nodeid":"45592"}},[a._v("我们还可以尝试一下刚刚说的第二种思路，就是在我们这个 markdown-loader 中直接返回 HTML 字符串，然后交给下一个 Loader 处理。这就涉及多个 Loader 相互配合工作的情况了。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"45593"}},[a._v("我们回到代码中，这里我们直接返回 marked 解析后的 HTML，代码如下所示：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gcore.jsdelivr.net/gh/wu529778790/image/blog/20211109170055.png",alt:"20211109170055"}})]),a._v(" "),t("p",{attrs:{"data-nodeid":"45595"}},[a._v("然后我们再安装一个处理 HTML 的 Loader，叫作 html-loader，代码如下所示：")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://gcore.jsdelivr.net/gh/wu529778790/image/blog/20211109170120.png",alt:"20211109170120"}})]),a._v(" "),t("p",{attrs:{"data-nodeid":"45597"}},[a._v("安装完成过后回到配置文件，这里同样把 use 属性修改为一个数组，以便依次使用多个 Loader。不过同样需要注意，这里的执行顺序是从后往前，也就是说我们应该把先执行的 markdown-loader 放在后面，html-loader 放在前面。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"45598"}},[a._v("完成以后我们回到命令行终端再次打包，这里的打包结果仍然是可以的。")]),a._v(" "),t("p",{attrs:{"data-nodeid":"45599"}},[a._v("至此，我们就完成了这个 markdown-loader 模块，其实整个过程重点在于 Loader 的工作原理和实现方式。")]),a._v(" "),t("h3",{attrs:{"data-nodeid":"45600"}},[a._v("写在最后")]),a._v(" "),t("p",{attrs:{"data-nodeid":"45601"}},[a._v("总体来说，Loader 机制是 Webpack 最核心的机制，因为正是有了 Loader 机制，Webpack 才能足以支撑整个前端项目模块化的大梁，实现通过 Webpack 去加载任何你想要加载的资源。")]),a._v(" "),t("hr"),a._v(" "),t("h3",{attrs:{id:"精选评论"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#精选评论"}},[a._v("#")]),a._v(" 精选评论")]),a._v(" "),t("h5",{attrs:{id:"强"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#强"}},[a._v("#")]),a._v(" *强：")]),a._v(" "),t("blockquote",[t("p",[a._v("loader 导出的模块是都要返回一段可执行的 js 代码么？")])]),a._v(" "),t("h6",{attrs:{id:"讲师回复"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复"}},[a._v("#")]),a._v("     讲师回复：")]),a._v(" "),t("blockquote",[t("p",[a._v("    也不一定，比如 less-loader 返回的就是 css，再交给下一个 loader 处理，只是最后一个 loader 必须要返回 JS 代码，")])]),a._v(" "),t("h5",{attrs:{id:"发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#发"}},[a._v("#")]),a._v(" **发：")]),a._v(" "),t("blockquote",[t("p",[a._v("入口文件是一个 css，如果想出口文件也是一个真正的 css 怎么处理了，不能是一个伪 css")])]),a._v(" "),t("h6",{attrs:{id:"讲师回复-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-2"}},[a._v("#")]),a._v("     讲师回复：")]),a._v(" "),t("blockquote",[t("p",[a._v("    可以用 mini-css-extract-plugin 插件提取")])]),a._v(" "),t("h5",{attrs:{id:"力"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#力"}},[a._v("#")]),a._v(" **力：")]),a._v(" "),t("blockquote",[t("p",[a._v("请问怎么调试别人的 loader（比如 html-loader），我想看看他们的 loader 实现原理。")])]),a._v(" "),t("h6",{attrs:{id:"讲师回复-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复-3"}},[a._v("#")]),a._v("     讲师回复：")]),a._v(" "),t("blockquote",[t("p",[a._v("    第三方 Loader 的调试方式跟自定义 Loader 一样，可以直接调试 node_modules 中的代码，也可以把源码拿出来引入")])])])}),[],!1,null,null,null);t.default=s.exports}}]);