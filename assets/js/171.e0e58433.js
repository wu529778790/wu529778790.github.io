(window.webpackJsonp=window.webpackJsonp||[]).push([[171],{508:function(t,a,s){"use strict";s.r(a);var n=s(4),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",{attrs:{"data-nodeid":"83997"}},[t._v("上一讲，我们通过分析 axios 源码，延伸了“如何设计一个请求公共库”，其中提到了不同层次级别的分层理念。这一讲，我们继续讨论代码设计这一话题，聚焦中间件化和插件化理念。并通过实现一个中间件化的请求库和上一节内容融会贯通。")]),t._v(" "),a("h3",{attrs:{"data-nodeid":"83998"}},[t._v("以 Koa 为代表的 Node.js 中间件化设计")]),t._v(" "),a("p",{attrs:{"data-nodeid":"83999"}},[t._v("说到中间件，很多开发者都会想到 Koa.js，其中间件设计无疑是前端中间件思想的典型代表之一。我们先来剖析 Koa.js 的设计和实现。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"84000"}},[t._v("先来看一下 Koa.js 中间件的实现和应用：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"84001"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-comment"},[t._v("// 最外层中间件，可以用于兜底 Koa 全局错误")]),t._v("\napp.use(async (ctx, next) => {\n  "),a("span",{staticClass:"hljs-keyword"},[t._v("try")]),t._v(" {\n    "),a("span",{staticClass:"hljs-comment"},[t._v("// console.log('中间件 1 开始执行')")]),t._v("\n    "),a("span",{staticClass:"hljs-comment"},[t._v("// 执行下一个中间件")]),t._v("\n    "),a("span",{staticClass:"hljs-function"},[t._v("await "),a("span",{staticClass:"hljs-title"},[t._v("next")]),a("span",{staticClass:"hljs-params"},[t._v("()")])]),t._v(";\n    "),a("span",{staticClass:"hljs-comment"},[t._v("// console.log('中间件 1 执行结束')")]),t._v("\n  } "),a("span",{staticClass:"hljs-keyword"},[t._v("catch")]),t._v(" (error) {\n    console.log(`[koa error]: ${error.message}`)\n  }\n});\n"),a("span",{staticClass:"hljs-comment"},[t._v("// 第二层中间件，可以用于日志记录")]),t._v("\napp.use(async (ctx, next) => {\n  "),a("span",{staticClass:"hljs-comment"},[t._v("// console.log('中间件 2 开始执行')")]),t._v("\n  "),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" { req } = ctx;\n  console.log(`req is ${JSON.stringify(req)}`);\n  "),a("span",{staticClass:"hljs-function"},[t._v("await "),a("span",{staticClass:"hljs-title"},[t._v("next")]),a("span",{staticClass:"hljs-params"},[t._v("()")])]),t._v(";\n  console.log(`res is ${JSON.stringify(ctx.res)}`);\n  "),a("span",{staticClass:"hljs-comment"},[t._v("// console.log('中间件 2 执行结束')")]),t._v("\n});\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"84002"}},[t._v("如上代码，我们看 Koa 实例，通过"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84120"}},[t._v("use")]),t._v("方法注册和串联中间件，其源码实现部分精简表述为：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"84003"}},[a("code",{attrs:{"data-language":"java"}},[t._v("use(fn) {\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".middleware.push(fn);\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" "),a("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(";\n}\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"84004"}},[t._v("如上代码，我们的中间件被存储进"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84123"}},[t._v("this.middleware")]),t._v("数组中，那么中间件是如何被执行的呢？参考下面源码：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"84005"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-comment"},[t._v("// 通过 createServer 方法启动一个 Node.js 服务")]),t._v("\nlisten(...args) {\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" server = http.createServer("),a("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".callback());\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" server.listen(...args);\n}\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"84006"}},[t._v("Koa 框架通过 "),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84126"}},[t._v("http")]),t._v(" 模块的 "),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84128"}},[t._v("createServer")]),t._v(" 方法创建一个 Node.js 服务，并传入 this.callback() 方法， this.callback() 方法源码精简实现如下：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("callback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从 this.middleware 数组中，组合中间件")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fn "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compose")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("middleware"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// handleRequest 方法作为 `http` 模块的 `createServer` 方法参数，该方法通过 `createContext` 封装了 `http.createServer` 中的 `request` 和 `response`对象，并将这两个对象放到 ctx 中")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("handleRequest")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ctx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createContext")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将 ctx 和组合后的中间件函数 fn 传递给 this.handleRequest 方法")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleRequest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" handleRequest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleRequest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("ctx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fnMiddleware")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ctx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("statusCode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("404")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onerror")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" ctx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onerror")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("handleResponse")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("respond")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// on-finished npm 包提供的方法，该方法在一个 HTTP 请求 closes，finishes 或者 errors 时执行")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("onFinished")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" onerror"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将 ctx 对象传递给中间件函数 fnMiddleware")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fnMiddleware")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ctx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("handleResponse"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("catch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("onerror"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",{attrs:{"data-nodeid":"84008"}},[t._v("如上代码，我们将 Koa 一个中间件组合和执行流程梳理为以下步骤。")]),t._v(" "),a("ol",{attrs:{"data-nodeid":"84009"}},[a("li",{attrs:{"data-nodeid":"84010"}},[a("p",{attrs:{"data-nodeid":"84011"}},[t._v("通过"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84132"}},[t._v("compose")]),t._v("方法组合各种中间件，返回一个中间件组合函数"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84134"}},[t._v("fnMiddleware")])])]),t._v(" "),a("li",{attrs:{"data-nodeid":"84012"}},[a("p",{attrs:{"data-nodeid":"84013"}},[t._v("请求过来时，会先调用"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84136"}},[t._v("handleRequest")]),t._v("方法，该方法完成：")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"84014"}},[a("li",{attrs:{"data-nodeid":"84015"}},[a("p",{attrs:{"data-nodeid":"84016"}},[t._v("调用"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84139"}},[t._v("createContext")]),t._v("方法，对该次请求封装出一个"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84141"}},[t._v("ctx")]),t._v("对象；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"84017"}},[a("p",{attrs:{"data-nodeid":"84018"}},[t._v("接着调用"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84144"}},[t._v("this.handleRequest(ctx, fnMiddleware)")]),t._v("处理该次请求。")])])])]),t._v(" "),a("li",{attrs:{"data-nodeid":"84019"}},[a("p",{attrs:{"data-nodeid":"84020"}},[t._v("通过"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84147"}},[t._v("fnMiddleware(ctx).then(handleResponse).catch(onerror)")]),t._v("执行中间件。")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"84021"}},[t._v("其中，一个核心过程就是使用"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84150"}},[t._v("compose")]),t._v("方法组合各种中间件，其源码实现精简为：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compose")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("middleware")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里返回的函数，就是上文中的 fnMiddleware")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("i")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Promise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'next() called multiple times'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 取出第 i 个中间件为 fn")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" fn "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" middleware"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" middleware"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" fn "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" next\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 已经取到了最后一个中间件，直接返回一个 Promise 实例，进行串联")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这一步的意义是保证最后一个中间件调用 next 方法时，也不会报错")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("fn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Promise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把 ctx 和 next 方法传入到中间件 fn 中，并将执行结果使用 Promise.resolve 包装")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里可以发现，我们在一个中间件中调用的 next 方法，其实就是dispatch.bind(null, i + 1)，即调用下一个中间件")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Promise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Promise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",{attrs:{"data-nodeid":"84023"}},[t._v("源码实现中我已加入了相关注释，如果对于你来说还是晦涩难懂，不妨看一下下面这个 hard coding 的例子，通过下面代码，表示三个 Koa 中间件的执行情况：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"84024"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-function"},[t._v("async function "),a("span",{staticClass:"hljs-title"},[t._v("middleware1")]),a("span",{staticClass:"hljs-params"},[t._v("()")]),t._v(" ")]),t._v("{\n  ...\n  await ("),a("span",{staticClass:"hljs-function"},[t._v("async function "),a("span",{staticClass:"hljs-title"},[t._v("middleware2")]),a("span",{staticClass:"hljs-params"},[t._v("()")]),t._v(" ")]),t._v("{\n    ...\n    await ("),a("span",{staticClass:"hljs-function"},[t._v("async function "),a("span",{staticClass:"hljs-title"},[t._v("middleware3")]),a("span",{staticClass:"hljs-params"},[t._v("()")]),t._v(" ")]),t._v("{\n      ...\n    });\n    ...\n  });\n  ...\n}\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"84025"}},[t._v("这里我们来做一个简单的总结：")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"84026"}},[a("li",{attrs:{"data-nodeid":"84027"}},[a("p",{attrs:{"data-nodeid":"84028"}},[t._v("Koa 的中间件机制被社区形象地总结为洋葱模型；")])])]),t._v(" "),a("blockquote",{attrs:{"data-nodeid":"84029"}},[a("p",{attrs:{"data-nodeid":"84030"}},[t._v("所谓洋葱模型，就是指每一个 Koa 中间件都是一层洋葱圈，它即可以掌管请求进入，也可以掌管响应返回。换句话说：外层的中间件可以影响内层的请求和响应阶段，内层的中间件只能影响外层的响应阶段。")])]),t._v(" "),a("ul",{attrs:{"data-nodeid":"84031"}},[a("li",{attrs:{"data-nodeid":"84032"}},[a("p",{attrs:{"data-nodeid":"84033"}},[a("code",{attrs:{"data-backticks":"1","data-nodeid":"84156"}},[t._v("dispatch(n)")]),t._v("对应第 n 个中间件的执行，第 n 个中间件可以通过"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84158"}},[t._v("await next()")]),t._v("来执行下一个中间件，同时在最后一个中间件执行完成后，依然有恢复执行的能力。即，通过洋葱模型，"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84160"}},[t._v("await next()")]),t._v("控制调用 “下游”中间件，直到 “下游”没有中间件且堆栈执行完毕，最终流回“上游”中间件。这种方式有个优点，特别是"),a("strong",{attrs:{"data-nodeid":"84166"}},[t._v("对于日志记录以及错误处理等需要非常友好")]),t._v("。")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"84034"}},[t._v("这里我们稍微做一下扩展，引申出 Koa v1 版本中中间件的实现，Koa1 的中间件实现利用了 "),a("strong",{attrs:{"data-nodeid":"84176"}},[t._v("Generator 函数 + co 库")]),t._v("（一种基于 Promise 的 Generator 函数流程管理工具），来实现协程运行。本质上，Koa v1 版本中间件和 Koa v2 版本中间件思想是类似的，只不过 Koa v2 主要是用了 "),a("strong",{attrs:{"data-nodeid":"84177"}},[t._v("Async/Await")]),t._v(" 来替换 Generator 函数 + co 库，整体实现更加巧妙，代码更加优雅、简易。")]),t._v(" "),a("h3",{attrs:{"data-nodeid":"84035"}},[t._v("对比 Express，再谈 Koa 中间件")]),t._v(" "),a("p",{attrs:{"data-nodeid":"84036"}},[t._v("说起 Node.js 框架，我们自然忘不了 Express.js。它的中间件机制同样值得我们学习、比对。Express 不同于 Koa，它继承了"),a("strong",{attrs:{"data-nodeid":"84188"}},[t._v("路由、静态服务器和模板引擎等功能")]),t._v("，因此看上去比 Koa 更像是一个框架。通过学习 "),a("a",{attrs:{href:"https://github.com/expressjs/express","data-nodeid":"84186"}},[t._v("Express 源码")]),t._v("，我们可以总结出它的工作机制。")]),t._v(" "),a("ol",{attrs:{"data-nodeid":"84037"}},[a("li",{attrs:{"data-nodeid":"84038"}},[a("p",{attrs:{"data-nodeid":"84039"}},[t._v("通过"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84190"}},[t._v("app.use")]),t._v("方法注册中间件。")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"84040"}},[a("p",{attrs:{"data-nodeid":"84041"}},[t._v("一个中间件可以理解为一个 Layer 对象，其中包含了当前路由匹配的正则信息以及 handle 方法。")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"84042"}},[a("p",{attrs:{"data-nodeid":"84043"}},[t._v("所有中间件（Layer 对象）使用"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84194"}},[t._v("stack")]),t._v("数组存储起来。")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"84044"}},[a("p",{attrs:{"data-nodeid":"84045"}},[t._v("因此，每个 Router 对象都是通过一个"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84197"}},[t._v("stack")]),t._v("数组，存储了相关中间件函数。")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"84046"}},[a("p",{attrs:{"data-nodeid":"84047"}},[t._v("当一个请求过来时，会从 REQ 中获取请求 path，根据 path 从"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84200"}},[t._v("stack")]),t._v("中找到匹配的 Layer，具体匹配过程由"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84202"}},[t._v("router.handle")]),t._v("函数实现。")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"84048"}},[a("p",{attrs:{"data-nodeid":"84049"}},[a("code",{attrs:{"data-backticks":"1","data-nodeid":"84204"}},[t._v("router.handle")]),t._v("函数通过"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84206"}},[t._v("next()")]),t._v("方法遍历每一个 layer 进行比对：")]),t._v(" "),a("ol",{attrs:{"data-nodeid":"84050"}},[a("li",{attrs:{"data-nodeid":"84051"}},[a("p",{attrs:{"data-nodeid":"84052"}},[a("code",{attrs:{"data-backticks":"1","data-nodeid":"84208"}},[t._v("next()")]),t._v("方法通过闭包维持了对于 Stack Index 游标的引用，当调用"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84210"}},[t._v("next()")]),t._v("方法时，就会从下一个中间件开始查找；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"84053"}},[a("p",{attrs:{"data-nodeid":"84054"}},[t._v("如果比对结果为 true，则调用"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84213"}},[t._v("layer.handle_request")]),t._v("方法，"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84215"}},[t._v("layer.handle_request")]),t._v("方法中会调用"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84217"}},[t._v("next()")]),t._v("方法 ，实现中间件的执行。")])])])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"84055"}},[t._v("我们将上述过程总结为下图，帮助你理解：")]),t._v(" "),a("p",{attrs:{"data-nodeid":"84333"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M00/03/C9/Cgp9HWAfsPuAMXAzAAIE4xCY0WY258.png",alt:"202127-92025.png","data-nodeid":"84337"}})]),t._v(" "),a("div",{attrs:{"data-nodeid":"84334"}},[a("p",{staticStyle:{"text-align":"center"}},[t._v("Express 工作机制")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"84058"}},[t._v("通过上述内容，我们可以看到，Express 的"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84224"}},[t._v("next()")]),t._v("方法维护了遍历中间件列表的 Index 游标，中间件每次调用"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84226"}},[t._v("next()")]),t._v("方法时，会通过"),a("strong",{attrs:{"data-nodeid":"84232"}},[t._v("增加 Index 游标的方式")]),t._v("找到下一个中间件并执行。我们采用类似的 hard coding 形式帮助大家理解 Express 插件作用机制：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"84059"}},[a("code",{attrs:{"data-language":"java"}},[t._v("((req, res) => {\n  console.log("),a("span",{staticClass:"hljs-string"},[t._v("'第一个中间件'")]),t._v(");\n  ((req, res) => {\n    console.log("),a("span",{staticClass:"hljs-string"},[t._v("'第二个中间件'")]),t._v(");\n    (async(req, res) => {\n      console.log("),a("span",{staticClass:"hljs-string"},[t._v("'第三个中间件 => 是一个 route 中间件，处理 /api/test1'")]),t._v(");\n      "),a("span",{staticClass:"hljs-function"},[t._v("await "),a("span",{staticClass:"hljs-title"},[t._v("sleep")]),a("span",{staticClass:"hljs-params"},[t._v("("),a("span",{staticClass:"hljs-number"},[t._v("2000")]),t._v(")")]),t._v("\n      res."),a("span",{staticClass:"hljs-title"},[t._v("status")]),a("span",{staticClass:"hljs-params"},[t._v("("),a("span",{staticClass:"hljs-number"},[t._v("200")]),t._v(")")]),t._v("."),a("span",{staticClass:"hljs-title"},[t._v("send")]),a("span",{staticClass:"hljs-params"},[t._v("("),a("span",{staticClass:"hljs-string"},[t._v("'hello'")]),t._v(")")]),t._v("\n    })"),a("span",{staticClass:"hljs-params"},[t._v("(req, res)")]),t._v("\n    console."),a("span",{staticClass:"hljs-title"},[t._v("log")]),a("span",{staticClass:"hljs-params"},[t._v("("),a("span",{staticClass:"hljs-string"},[t._v("'第二个中间件调用结束'")]),t._v(")")])]),t._v(";\n  })(req, res)\n  console.log("),a("span",{staticClass:"hljs-string"},[t._v("'第一个中间件调用结束'")]),t._v(")\n})(req, res)\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"84060"}},[t._v("如上代码，Express 中间件设计并不是一个洋葱模型，它是基于回调实现的线形模型，不利于组合，不利于互操，在设计上并不像 Koa 一样简单。如果想实现一个记录请求响应的中间件，就需要：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" express "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'express'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" app "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("express")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("requestTime")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("requestTime "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\napp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("use")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("requestTime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\napp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" responseText "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 'Hello World"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("br"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n'\n  responseText "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<small>Requested at: '")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("requestTime "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'</small>'")]),t._v("\n  res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("responseText"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\napp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",{attrs:{"data-nodeid":"84062"}},[t._v("我们可以看到，上述实现就对业务代码有一定程度的侵扰，甚至会造成不同中间件间的耦合。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"84063"}},[t._v("我们回退到“上帝视角”发现，毫无疑问 Koa 的洋葱模型更加先进，而"),a("strong",{attrs:{"data-nodeid":"84240"}},[t._v("Express 的线形机制不容易实现拦截处理逻辑")]),t._v("：比如异常处理和统计响应时间——这在 Koa 里，一般只需要一个中间件就能全部搞定。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"84064"}},[t._v("当然，Koa 本身只提供了 HTTP 模块和洋葱模型的最小封装，Express 是一种更高形式的抽象，其设计思路和面向目标也有不同。")]),t._v(" "),a("h3",{attrs:{"data-nodeid":"84065"}},[t._v("Redux 中间件设计和实现")]),t._v(" "),a("p",{attrs:{"data-nodeid":"84066"}},[t._v("通过前文，我们了解了 Node.js 两个当红框架的中间件设计，我们再换一个角度：从 Redux 这个状态管理方案的中间件设计，了解更全面的中间件系统。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"84067"}},[t._v("类似 Koa 中的 koa-compose 实现，Redux 也实现了一个"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84245"}},[t._v("compose")]),t._v("方法，完成中间件的注册和串联：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"84068"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-function"},[t._v("function "),a("span",{staticClass:"hljs-title"},[t._v("compose")]),a("span",{staticClass:"hljs-params"},[t._v("(...funcs: Function[])")]),t._v(" ")]),t._v("{\n "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" funcs.reduce((a, b) => (...args: any) => a(b(...args)));\n}\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"84069"}},[a("code",{attrs:{"data-backticks":"1","data-nodeid":"84247"}},[t._v("compose")]),t._v("方法的执行效果如下代码：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"84070"}},[a("code",{attrs:{"data-language":"java"}},[t._v("compose([fn1, fn2, fn3])(args)\n=>\ncompose(fn1, fn2, fn3) (...args) = > fn1(fn2(fn3(...args)))\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"84071"}},[t._v("简单来说，"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84250"}},[t._v("compose")]),t._v("方法是一种高阶聚合，先执行 fn3，并将执行结果作为参数传给 fn2，以此类推。我们使用 Redux 创建一个 store 时，完成对"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84252"}},[t._v("compose")]),t._v("方法的调用，Redux 精简源码类比为：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这是一个简单的打日志中间件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("logger")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" getState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dispatch "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// next 代表下一个中间件包装过后的 dispatch 方法，action 表示当前接收到的动作")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("next")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("action")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"before change"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用下一个中间件包装的 dispatch ")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" val "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("action"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"after change"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用 logger 中间件，创建一个增强的 store")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" createStoreWithMiddleware "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Redux"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("applyMiddleware")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("logger"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Redux"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("createStore"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("applyMiddleware")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("middlewares")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// middlewares 为中间件列表，返回一个接受原始 createStore 方法（Redux.createStore）作为参数的函数")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("createStore")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("args")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建原始的 store")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" store "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createStore")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 每个中间件都会被传入 middlewareAPI 对象，作为中间件参数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" middlewareAPI "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("getState")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" store"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getState"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("dispatch")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("args")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 给每个中间件传入 middlewareAPI 参数")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 中间件的统一模板为 next => action => next(action) 格式")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// chain 中保存的都是 next => action => {next(action)} 的方法")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" chain "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" middlewares"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("middleware")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("middleware")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("middlewareAPI"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 传入最原始 store.dispatch 方法，作为 compose 二级参数，compose 方法最终返回一个增强的dispatch 方法")]),t._v("\n    dispatch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("compose")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("chain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("store"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dispatch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("store"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      dispatch  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回一个增强版的 dispatch")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",{attrs:{"data-nodeid":"84073"}},[t._v("如上代码，我们将 Redux 中间件特点总结为：")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"84074"}},[a("li",{attrs:{"data-nodeid":"84075"}},[a("p",{attrs:{"data-nodeid":"84076"}},[t._v("Redux 中间件接收"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84256"}},[t._v("getState")]),t._v("和"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84258"}},[t._v("dispatch")]),t._v("两个方法组成的对象作为参数；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"84077"}},[a("p",{attrs:{"data-nodeid":"84078"}},[t._v("Redux 中间件返回一个函数，该函数接收下一个"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84261"}},[t._v("next")]),t._v("方法作为参数，并返回一个接收 action 的新的"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84263"}},[t._v("dispatch")]),t._v("方法；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"84079"}},[a("p",{attrs:{"data-nodeid":"84080"}},[t._v("Redux 中间件通过手动调用"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84266"}},[t._v("next(action)")]),t._v("方法，执行下一个中间件。")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"84081"}},[t._v("我们将 Redux 的中间件作用机制总结为下图：")]),t._v(" "),a("p",{staticClass:"te-preview-highlight",attrs:{"data-nodeid":"85010"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M00/03/C9/Cgp9HWAfsQuABGmXAAGNk0fcn-c946.png",alt:"202127-92020.png","data-nodeid":"85014"}})]),t._v(" "),a("div",{attrs:{"data-nodeid":"85011"}},[a("p",{staticStyle:{"text-align":"center"}},[t._v("Redux 的中间件作用机制")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"84084"}},[t._v("看上去也像是一个洋葱圈模型，但是对于同步调用和异步调用稍有不同，以三个中间件为例。")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"84085"}},[a("li",{attrs:{"data-nodeid":"84086"}},[a("p",{attrs:{"data-nodeid":"84087"}},[t._v("三个中间件均是正常同步调用"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84274"}},[t._v("next(action)")]),t._v("，则执行顺序为：中间件 1 before next → 中间件 2 before next → 中间件 3 before next → dispatch 方法调用 → 中间件 3 after next → 中间件 2 after next → 中间件 1 after next。")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"84088"}},[a("p",{attrs:{"data-nodeid":"84089"}},[t._v("第二个中间件没有调用"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84277"}},[t._v("next(action)")]),t._v("，则执行顺序为：中间件 1 befoe next → 中间件 2 逻辑 → 中间件 1 after next，注意"),a("strong",{attrs:{"data-nodeid":"84283"}},[t._v("此时中间件 3 没有被执行")]),t._v("。")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"84090"}},[a("p",{attrs:{"data-nodeid":"84091"}},[t._v("第二个中间件异步调用"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84285"}},[t._v("next(action)")]),t._v("，其他中间件均是正常同步调用"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84287"}},[t._v("nextt(action)")]),t._v("，则执行顺序为：中间件 1 before next → 中间件 2 同步代码部分 → 中间件 1 after next → 中间件 2 异步代码部分 before next → 中间件 3 before next → dispatch 方法调用 → 中间件 3 after next → 中间件 2 异步代码部分 after next。")])])]),t._v(" "),a("h3",{attrs:{"data-nodeid":"84092"}},[t._v("利用中间件思想，实现一个中间件化的 Fetch 库")]),t._v(" "),a("p",{attrs:{"data-nodeid":"84093"}},[t._v("上面我们分析了前端中的中间件化思想，这一部分，我们活学活用，利用中间件思路，结合上一讲内容，实现一个中间件化的 Fetch 库。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"84094"}},[t._v("我们先来思考一个中间件化的 Fetch 库有哪些优点呢？Fetch 库的核心实现请求的发送，而各种业务逻辑以中间件化的插件模式进行增强，这样一来，实现了特定业务需求和请求库的解耦，更加灵活，也是一种分层思想的体现。具体来说，一个中间件化的 Fetch 库：")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"84095"}},[a("li",{attrs:{"data-nodeid":"84096"}},[a("p",{attrs:{"data-nodeid":"84097"}},[t._v("支持业务方递归扩展底层 Fetch API 能力；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"84098"}},[a("p",{attrs:{"data-nodeid":"84099"}},[t._v("方便测试；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"84100"}},[a("p",{attrs:{"data-nodeid":"84101"}},[t._v("一个中间件化的 Fetch 库，天然支持各类型的 Fetch 封装（比如 Native Fetch、fetch-ponyfill、fetch-polyfill 等）。")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"84102"}},[t._v("我们给这个中间件化的 Fetch 库取名为：fetch-wrap，借助 "),a("a",{attrs:{href:"https://github.com/benjamine/fetch-wrap","data-nodeid":"84298"}},[t._v("fetch-wrap")]),t._v(" 的实现，预期使用方式为：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"84103"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" fetchWrap = require("),a("span",{staticClass:"hljs-string"},[t._v("'fetch-wrap'")]),t._v(");\n"),a("span",{staticClass:"hljs-comment"},[t._v("// 这里可以接入自己的核心 Fetch 底层实现，比如使用原生 Fetch，或同构的 isomorphic-fetch 等")]),t._v("\nlet fetch = require("),a("span",{staticClass:"hljs-string"},[t._v("'isomorphic-fetch'")]),t._v(");\n"),a("span",{staticClass:"hljs-comment"},[t._v("// 扩展 Fetch 中间件")]),t._v("\nfetch = fetchWrap(fetch, [\n  middleware1,\n  middleware2,\n  middleware3,\n]);\n"),a("span",{staticClass:"hljs-comment"},[t._v("// 一个典型的中间件")]),t._v("\n"),a("span",{staticClass:"hljs-function"},[t._v("function "),a("span",{staticClass:"hljs-title"},[t._v("middleware1")]),a("span",{staticClass:"hljs-params"},[t._v("(url, options, innerFetch)")]),t._v(" ")]),t._v("{\n "),a("span",{staticClass:"hljs-comment"},[t._v("// ...")]),t._v("\n "),a("span",{staticClass:"hljs-comment"},[t._v("// 业务扩展")]),t._v("\n "),a("span",{staticClass:"hljs-comment"},[t._v("// ...")]),t._v("\n "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" innerFetch(url, options);\n}\n"),a("span",{staticClass:"hljs-comment"},[t._v("// 一个更改 URL 的中间件")]),t._v("\nfunction(url, options, fetch) {\n "),a("span",{staticClass:"hljs-comment"},[t._v("// modify url or options")]),t._v("\n "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" fetch(url.replace(/^(http:)?/, "),a("span",{staticClass:"hljs-string"},[t._v("'https:'")]),t._v("), options);\n},\n"),a("span",{staticClass:"hljs-comment"},[t._v("// 一个修改返回结果的中间件")]),t._v("\nfunction(url, options, fetch) {\n "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" fetch(url, options).then(function(response) {\n   "),a("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" (!response.ok) {\n     "),a("span",{staticClass:"hljs-keyword"},[t._v("throw")]),t._v(" "),a("span",{staticClass:"hljs-keyword"},[t._v("new")]),t._v(" Error(result.status + "),a("span",{staticClass:"hljs-string"},[t._v("' '")]),t._v(" + result.statusText);\n   }\n   "),a("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" (/application\\/json/.test(result.headers.get("),a("span",{staticClass:"hljs-string"},[t._v("'content-type'")]),t._v("))) {\n     "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" response.json();\n   }\n   "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" response.text();\n });\n}\n"),a("span",{staticClass:"hljs-comment"},[t._v("// 一个做错误处理的中间件")]),t._v("\nfunction(url, options, fetch) {\n "),a("span",{staticClass:"hljs-comment"},[t._v("// catch errors")]),t._v("\n "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" fetch(url, options)."),a("span",{staticClass:"hljs-keyword"},[t._v("catch")]),t._v("(function(err) {\n   console.error(err);\n   "),a("span",{staticClass:"hljs-keyword"},[t._v("throw")]),t._v(" err;\n });\n}\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"84104"}},[t._v("核心实现也不困难，观察"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84301"}},[t._v("fetchWrap")]),t._v("使用方式，我们实现源码为：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 接受第一个参数为基础 Fetch，第二个参数为中间件数组或单个中间件")]),t._v("\nmodule"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("exports")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetchWrap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("fetch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" middleware")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 没有使用中间件，则返回原生 fetch")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("middleware "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" middleware"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" fetch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 递归调用 extend 方法，每次递归时剔除出 middleware 数组中的首项")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" innerFetch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" middleware"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" fetch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fetchWrap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fetch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" middleware"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" next "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" middleware"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("extendedFetch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 每一个 Fetch 中间件通过 Promsie 来串联")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Promise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" innerFetch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Promise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",{attrs:{"data-nodeid":"84106"}},[t._v("我们可以看到，每一个中间件都接收一个"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84304"}},[t._v("url")]),t._v("和"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84306"}},[t._v("options")]),t._v("参数，因此具有了改写"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84308"}},[t._v("url")]),t._v("和"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84310"}},[t._v("options")]),t._v("的能力；同时接收一个"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84312"}},[t._v("innerFetch")]),t._v("方法，"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84314"}},[t._v("innerFetch")]),t._v("为上一个中间件包装过的"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84316"}},[t._v("fetch")]),t._v("方法，而每一个中间件也都返回一个包装过的"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"84318"}},[t._v("fetch")]),t._v("方法，将各个中间件依次调用串联。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"84107"}},[t._v("另外，社区上的 "),a("a",{attrs:{href:"https://www.npmjs.com/package/umi-request","data-nodeid":"84323"}},[t._v("umi-request")]),t._v(" 的中间件机制也是类似的，其核心代码：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"84108"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-class"},[a("span",{staticClass:"hljs-keyword"},[t._v("class")]),t._v(" "),a("span",{staticClass:"hljs-title"},[t._v("Onion")]),t._v(" ")]),t._v("{\n  constructor() {\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".middlewares = [];\n  }\n  "),a("span",{staticClass:"hljs-comment"},[t._v("// 存储中间件")]),t._v("\n  use(newMiddleware) {\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".middlewares.push(newMiddleware);\n  }\n  "),a("span",{staticClass:"hljs-comment"},[t._v("// 执行中间件")]),t._v("\n  execute(params = "),a("span",{staticClass:"hljs-keyword"},[t._v("null")]),t._v(") {\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" fn = compose("),a("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".middlewares);\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" fn(params);\n  }\n}\n"),a("span",{staticClass:"hljs-function"},[t._v("export "),a("span",{staticClass:"hljs-keyword"},[t._v("default")]),t._v(" function "),a("span",{staticClass:"hljs-title"},[t._v("compose")]),a("span",{staticClass:"hljs-params"},[t._v("(middlewares)")]),t._v(" ")]),t._v("{\n  "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" "),a("span",{staticClass:"hljs-function"},[t._v("function "),a("span",{staticClass:"hljs-title"},[t._v("wrapMiddlewares")]),a("span",{staticClass:"hljs-params"},[t._v("(params)")]),t._v(" ")]),t._v("{\n    let index = -"),a("span",{staticClass:"hljs-number"},[t._v("1")]),t._v(";\n    "),a("span",{staticClass:"hljs-function"},[t._v("function "),a("span",{staticClass:"hljs-title"},[t._v("dispatch")]),a("span",{staticClass:"hljs-params"},[t._v("(i)")]),t._v(" ")]),t._v("{\n      index = i;\n      "),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" fn = middlewares[i];\n      "),a("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" (!fn) "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" Promise.resolve();\n      "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" Promise.resolve(fn(params, () => dispatch(i + "),a("span",{staticClass:"hljs-number"},[t._v("1")]),t._v(")));\n    }\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" dispatch("),a("span",{staticClass:"hljs-number"},[t._v("0")]),t._v(");\n  };\n}\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"84109"}},[t._v("我们可以看到，上述源码更像 Koa 的实现了，但其实道理和上面的 fetch-wrap 大同小异。至此，相信你已经了解了中间件的思想，也能够体会洋葱模型的精妙设计。")]),t._v(" "),a("h3",{attrs:{"data-nodeid":"84110"}},[t._v("总结")]),t._v(" "),a("p",{attrs:{"data-nodeid":"84111"}},[t._v("这一讲，我们通过分析前端不同框架的中间件设计，剖析了中间件化这一重要思想。中间件化意味着插件化，这也是上一讲提到的分层思想的一种实现，同时，这种实现思路灵活且扩展能力强，能够和核心逻辑相解耦，需要你细心体会。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"84112"}},[t._v("本讲主要内容如下：")]),t._v(" "),a("p",{attrs:{"data-nodeid":"84113"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image/M00/94/A4/CgqCHmAY-AqAIZqkAAO1O62z-y4965.png",alt:"Drawing 2.png","data-nodeid":"84331"}})]),t._v(" "),a("p",{attrs:{"data-nodeid":"84114"}},[t._v("在下一讲中，我们将继续围绕着代码设计中的灵活性和定制性这一话题展开，同时也给大家留一个思考题：你在平时开发中，见过或者使用过哪些插件化的工程或技术呢？欢迎在留言区和我分享你的观点，我们下一讲再见。")]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"精选评论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#精选评论"}},[t._v("#")]),t._v(" 精选评论")]),t._v(" "),a("h5",{attrs:{id:"伦"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#伦"}},[t._v("#")]),t._v(" **伦")]),t._v(" "),a("blockquote",[a("p",[t._v("插件化还是比较常见的，比如常用的 eggjs,webpack，最近在看的技术比如 LogicFlow antv/x6")])])])}),[],!1,null,null,null);a.default=e.exports}}]);