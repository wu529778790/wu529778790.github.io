(window.webpackJsonp=window.webpackJsonp||[]).push([[165],{500:function(s,a,t){"use strict";t.r(a);var n=t(4),e=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",{attrs:{"data-nodeid":"27419"}},[s._v("经常留意前端开发技术的同学一定对 AST 技术不陌生。AST 技术是现代化前端基建和工程化建设的基石：Babel、Webpack、ESLint、代码压缩工具等耳熟能详的工程化基建工具或流程，都离不开 AST 技术；Vue、React 等经典前端框架，也离不开基于 AST 技术的编译。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"27420"}},[s._v("目前社区上不乏 Babel 插件、Webpack 插件等知识的讲解，但是涉及 AST 的部分，往往都是使用现成工具转载模版代码。这一讲，我们就从 AST 基础理念讲起，并实现一个简单的 AST 实战脚本。")]),s._v(" "),a("h3",{attrs:{"data-nodeid":"27421"}},[s._v("AST 基础知识")]),s._v(" "),a("p",{attrs:{"data-nodeid":"27422"}},[s._v("我们先对 AST 下一个定义，AST 是 Abstract Syntax Tree 的缩写，表示抽象语法树：")]),s._v(" "),a("blockquote",{attrs:{"data-nodeid":"27423"}},[a("p",{attrs:{"data-nodeid":"27424"}},[s._v("在计算机科学中，抽象语法树（Abstract Syntax Tree，AST），或简称语法树（Syntax Tree），是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。之所以说语法是“抽象”的，是因为这里的语法并不会表示出真实语法中出现的每个细节。比如，嵌套括号被隐含在树的结构中，并没有以节点的形式呈现；而类似 if-condition-then 这样的条件跳转语句，可以使用带有三个分支的节点来表示。")])]),s._v(" "),a("p",{attrs:{"data-nodeid":"27425"}},[s._v("AST 的应用场景经常出现在源代码的编译过程中：一般语法分析器创建出 AST，然后 AST 在语义分析阶段添加一些信息，甚至修改 AST 内容，最终产出编译后代码。")]),s._v(" "),a("h4",{attrs:{"data-nodeid":"27426"}},[s._v("AST 初体验")]),s._v(" "),a("p",{attrs:{"data-nodeid":"27427"}},[s._v("了解了 AST 基本概念，我们对 AST 进行一个“感官认知”。这里提供给你一个平台："),a("a",{attrs:{href:"https://astexplorer.net/","data-nodeid":"27534"}},[s._v("AST explorer")]),s._v("，在这个平台中，可以实时看到 JavaScript 代码转换为 AST 之后的产出结果。如下图所示：")]),s._v(" "),a("p",{attrs:{"data-nodeid":"29395"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image2/M01/06/ED/Cip5yGAGmb2ABDuIAAE1iKphCso409.png",alt:"Drawing 0.png","data-nodeid":"29399"}})]),s._v(" "),a("div",{attrs:{"data-nodeid":"29396"}},[a("p",{staticStyle:{"text-align":"center"}},[s._v("AST 在线分析结果图")])]),s._v(" "),a("p",{attrs:{"data-nodeid":"27430"}},[s._v("可以看到，经过 AST 转换，我们的 JavaScript 代码（左侧）变成了一种 ESTree 规范的数据结构（右侧），这种数据结构就是 AST。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"30526"}},[s._v("这个平台实际使用了 "),a("a",{attrs:{href:"https://github.com/acornjs/acorn","data-nodeid":"30530"}},[s._v("acorn")]),s._v(" 作为 AST 解析器。下面我们就来介绍一下 acorn，本节内容我们将要实现的脚本，也会依赖 acorn 的能力。")]),s._v(" "),a("h4",{attrs:{"data-nodeid":"27432"}},[s._v("acorn 解析")]),s._v(" "),a("p",{attrs:{"data-nodeid":"27433"}},[s._v("实际上，社区上多项著名项目都依赖的 acorn 的能力（比如 ESLint、Babel、Vue.js 等），acorn 的介绍为：")]),s._v(" "),a("blockquote",{attrs:{"data-nodeid":"27434"}},[a("p",{attrs:{"data-nodeid":"27435"}},[s._v("A tiny, fast JavaScript parser, written completely in JavaScript.")])]),s._v(" "),a("p",{attrs:{"data-nodeid":"27436"}},[s._v("由此可知，acorn 是一个完全使用 JavaScript 实现的、小型且快速的 JavaScript 解析器。基本用法非常简单，代码如下：")]),s._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"27437"}},[a("code",{attrs:{"data-language":"java"}},[s._v("let acorn = require("),a("span",{staticClass:"hljs-string"},[s._v("'acorn'")]),s._v(")\nlet code = "),a("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(" + "),a("span",{staticClass:"hljs-number"},[s._v("2")]),s._v("\nconsole.log(acorn.parse(code))\n")])]),s._v(" "),a("p",{attrs:{"data-nodeid":"27438"}},[s._v("更多使用方式我们不再一一列举。你可以结合"),a("a",{attrs:{href:"https://github.com/acornjs/acorn","data-nodeid":"27553"}},[s._v("相关源码")]),s._v("进一步学习。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"27439"}},[s._v("我们将视线更多地聚焦 acorn 的内部实现中。对所有语法解析器来说，实现流程上很简单，如下图所示：")]),s._v(" "),a("p",{attrs:{"data-nodeid":"31651"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image2/M01/06/EE/Cip5yGAGmc2AAm_DAADuYazKZ4U044.png",alt:"Lark20210119-163409.png","data-nodeid":"31655"}})]),s._v(" "),a("div",{attrs:{"data-nodeid":"31652"}},[a("p",{staticStyle:{"text-align":"center"}},[s._v("acorn 工作流程图")])]),s._v(" "),a("p",{attrs:{"data-nodeid":"27442"}},[s._v("源代码经过词法分析，即分词得到 Token 序列，对 Token 序列进行语法分析，得到最终 AST 结果。但 acorn 稍有不同的是："),a("strong",{attrs:{"data-nodeid":"27565"}},[s._v("acorn 将词法分析和语法分析交替进行，只需要扫描一遍代码即可得到最终 AST 结果")]),s._v("。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"27443"}},[s._v("acorn 的 Parser 类"),a("a",{attrs:{href:"https://github.com/acornjs/acorn/blob/master/acorn/src/state.js","data-nodeid":"27569"}},[s._v("源码")]),s._v("形如：")]),s._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"27444"}},[a("code",{attrs:{"data-language":"java"}},[s._v("export "),a("span",{staticClass:"hljs-class"},[a("span",{staticClass:"hljs-keyword"},[s._v("class")]),s._v(" "),a("span",{staticClass:"hljs-title"},[s._v("Parser")]),s._v(" ")]),s._v("{\n  constructor(options, input, startPos) {\n    "),a("span",{staticClass:"hljs-comment"},[s._v("//...")]),s._v("\n  }\n  parse() {\n    "),a("span",{staticClass:"hljs-comment"},[s._v("// ...")]),s._v("\n  }\n  "),a("span",{staticClass:"hljs-comment"},[s._v("// 判断所处 context")]),s._v("\n  "),a("span",{staticClass:"hljs-function"},[s._v("get "),a("span",{staticClass:"hljs-title"},[s._v("inFunction")]),a("span",{staticClass:"hljs-params"},[s._v("()")]),s._v(" ")]),s._v("{ "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" ("),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".currentVarScope().flags & SCOPE_FUNCTION) > "),a("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(" }\n  "),a("span",{staticClass:"hljs-function"},[s._v("get "),a("span",{staticClass:"hljs-title"},[s._v("inGenerator")]),a("span",{staticClass:"hljs-params"},[s._v("()")]),s._v(" ")]),s._v("{ "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" ("),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".currentVarScope().flags & SCOPE_GENERATOR) > "),a("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(" }\n  "),a("span",{staticClass:"hljs-function"},[s._v("get "),a("span",{staticClass:"hljs-title"},[s._v("inAsync")]),a("span",{staticClass:"hljs-params"},[s._v("()")]),s._v(" ")]),s._v("{ "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" ("),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".currentVarScope().flags & SCOPE_ASYNC) > "),a("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(" }\n  "),a("span",{staticClass:"hljs-function"},[s._v("get "),a("span",{staticClass:"hljs-title"},[s._v("allowSuper")]),a("span",{staticClass:"hljs-params"},[s._v("()")]),s._v(" ")]),s._v("{ "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" ("),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".currentThisScope().flags & SCOPE_SUPER) > "),a("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(" }\n  "),a("span",{staticClass:"hljs-function"},[s._v("get "),a("span",{staticClass:"hljs-title"},[s._v("allowDirectSuper")]),a("span",{staticClass:"hljs-params"},[s._v("()")]),s._v(" ")]),s._v("{ "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" ("),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".currentThisScope().flags & SCOPE_DIRECT_SUPER) > "),a("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(" }\n  "),a("span",{staticClass:"hljs-function"},[s._v("get "),a("span",{staticClass:"hljs-title"},[s._v("treatFunctionsAsVar")]),a("span",{staticClass:"hljs-params"},[s._v("()")]),s._v(" ")]),s._v("{ "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".treatFunctionsAsVarInScope("),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".currentScope()) }\n  "),a("span",{staticClass:"hljs-function"},[s._v("get "),a("span",{staticClass:"hljs-title"},[s._v("inNonArrowFunction")]),a("span",{staticClass:"hljs-params"},[s._v("()")]),s._v(" ")]),s._v("{ "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" ("),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".currentThisScope().flags & SCOPE_FUNCTION) > "),a("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(" }\n  "),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[s._v("static")]),s._v(" "),a("span",{staticClass:"hljs-title"},[s._v("extend")]),a("span",{staticClass:"hljs-params"},[s._v("(...plugins)")]),s._v(" ")]),s._v("{\n    "),a("span",{staticClass:"hljs-comment"},[s._v("// ...")]),s._v("\n  }\n  "),a("span",{staticClass:"hljs-comment"},[s._v("// 解析入口")]),s._v("\n  "),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[s._v("static")]),s._v(" "),a("span",{staticClass:"hljs-title"},[s._v("parse")]),a("span",{staticClass:"hljs-params"},[s._v("(input, options)")]),s._v(" ")]),s._v("{\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),a("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v("(options, input).parse()\n  }\n  "),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[s._v("static")]),s._v(" "),a("span",{staticClass:"hljs-title"},[s._v("parseExpressionAt")]),a("span",{staticClass:"hljs-params"},[s._v("(input, pos, options)")]),s._v(" ")]),s._v("{\n    let parser = "),a("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v("(options, input, pos)\n    parser.nextToken()\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" parser.parseExpression()\n  }\n  "),a("span",{staticClass:"hljs-comment"},[s._v("// 分词入口")]),s._v("\n  "),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[s._v("static")]),s._v(" "),a("span",{staticClass:"hljs-title"},[s._v("tokenizer")]),a("span",{staticClass:"hljs-params"},[s._v("(input, options)")]),s._v(" ")]),s._v("{\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),a("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" "),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v("(options, input)\n  }\n}\n")])]),s._v(" "),a("p",{attrs:{"data-nodeid":"27445"}},[s._v("我们稍做解释：")]),s._v(" "),a("ul",{attrs:{"data-nodeid":"27446"}},[a("li",{attrs:{"data-nodeid":"27447"}},[a("p",{attrs:{"data-nodeid":"27448"}},[s._v("type 表示当前 Token 类型；")])]),s._v(" "),a("li",{attrs:{"data-nodeid":"27449"}},[a("p",{attrs:{"data-nodeid":"27450"}},[s._v("pos 表示当前 Token 所在源代码中的位置；")])]),s._v(" "),a("li",{attrs:{"data-nodeid":"27451"}},[a("p",{attrs:{"data-nodeid":"27452"}},[s._v("startNode 方法返回当前 AST 节点；")])]),s._v(" "),a("li",{attrs:{"data-nodeid":"27453"}},[a("p",{attrs:{"data-nodeid":"27454"}},[s._v("nextToken 方法从源代码中读取下一个 Token；")])]),s._v(" "),a("li",{attrs:{"data-nodeid":"27455"}},[a("p",{attrs:{"data-nodeid":"27456"}},[s._v("parseTopLevel 方法实现递归向下组装 AST 树。")])])]),s._v(" "),a("p",{attrs:{"data-nodeid":"27457"}},[s._v("这是 acorn 实现解析 AST 的入口骨架，实际的分词环节主要解决以下问题。")]),s._v(" "),a("ol",{attrs:{"data-nodeid":"27458"}},[a("li",{attrs:{"data-nodeid":"27459"}},[a("p",{attrs:{"data-nodeid":"27460"}},[s._v("明确需要分析哪些 Token 类型。")])])]),s._v(" "),a("ul",{attrs:{"data-nodeid":"27461"}},[a("li",{attrs:{"data-nodeid":"27462"}},[a("p",{attrs:{"data-nodeid":"27463"}},[s._v("关键字：import，function，return 等")])]),s._v(" "),a("li",{attrs:{"data-nodeid":"27464"}},[a("p",{attrs:{"data-nodeid":"27465"}},[s._v("变量名称")])]),s._v(" "),a("li",{attrs:{"data-nodeid":"27466"}},[a("p",{attrs:{"data-nodeid":"27467"}},[s._v("运算符号")])]),s._v(" "),a("li",{attrs:{"data-nodeid":"27468"}},[a("p",{attrs:{"data-nodeid":"27469"}},[s._v("结束符号")])])]),s._v(" "),a("ol",{attrs:{start:"2","data-nodeid":"27470"}},[a("li",{attrs:{"data-nodeid":"27471"}},[a("p",{attrs:{"data-nodeid":"27472"}},[s._v("状态机：简单来讲就是消费每一个源代码中的字符，对字符意义进行状态机判断。以“我们对于"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"27584"}},[s._v("/")]),s._v("的处理”为例，对于"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"27586"}},[s._v("3/10")]),s._v("的源代码，"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"27588"}},[s._v("/")]),s._v("就表示一个运算符号；对于"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"27590"}},[s._v("var re = /ab+c/")]),s._v("源代码来说，"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"27592"}},[s._v("/")]),s._v("就表示正则运算的起始字符了。")])])]),s._v(" "),a("p",{attrs:{"data-nodeid":"27473"}},[s._v("在分词过程中，实现者往往使用一个 Context 来表达一个上下文，实际上"),a("strong",{attrs:{"data-nodeid":"27603"}},[s._v("Context 是一个栈数据结果")]),s._v("（这一部分源码你可以点击"),a("a",{attrs:{href:"https://github.com/acornjs/acorn/tree/master/acorn/src","data-nodeid":"27601"}},[s._v("这里")]),s._v("阅读）。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"27474"}},[s._v("acorn 在语法解析阶段主要完成 AST 的封装以及错误抛出。在这个过程中，需要你了解，一段源代码可以用：")]),s._v(" "),a("ul",{attrs:{"data-nodeid":"27475"}},[a("li",{attrs:{"data-nodeid":"27476"}},[a("p",{attrs:{"data-nodeid":"27477"}},[s._v("Program——整个程序")])]),s._v(" "),a("li",{attrs:{"data-nodeid":"27478"}},[a("p",{attrs:{"data-nodeid":"27479"}},[s._v("Statement——语句")])]),s._v(" "),a("li",{attrs:{"data-nodeid":"27480"}},[a("p",{attrs:{"data-nodeid":"27481"}},[s._v("Expression——表达式")])])]),s._v(" "),a("p",{attrs:{"data-nodeid":"27482"}},[s._v("来描述。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"27483"}},[s._v("当然，"),a("strong",{attrs:{"data-nodeid":"27614"}},[s._v("Program 包含了多段 Statement，Statement 又由多个 Expression 或者 Statement 组成")]),s._v("。这三种大元素，就构成了遵循 ESTree 规范的 AST。最终的 AST 产出，也是这三种元素的数据结构拼合。具体实现代码我们不再探究。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"27484"}},[s._v("下面我们通过 acorn 以及一个脚本，来实现非常简易的 Tree Shaking 能力。")]),s._v(" "),a("h3",{attrs:{"data-nodeid":"27485"}},[s._v("AST 实战演练——实现一个简易 Tree Shaking 脚本")]),s._v(" "),a("p",{attrs:{"data-nodeid":"27486"}},[s._v("上一讲我们介绍了 Tree Shaking 技术的方方面面。下面，我们就基于本节内容的主题——AST，来实现一个简单的 DCE（dead code elimination）。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"27487"}},[s._v("目标如下，实现一个 Node.js 脚本 treeShaking.js，执行命令：")]),s._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"27488"}},[a("code",{attrs:{"data-language":"java"}},[s._v("node treeShaking test.js\n")])]),s._v(" "),a("p",{attrs:{"data-nodeid":"27489"}},[s._v("可以将"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"27620"}},[s._v("test.js")]),s._v("中的 dead code 消除。我们使用"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"27622"}},[s._v("test.js")]),s._v("测试代码如下：")]),s._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"27490"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-function"},[s._v("function "),a("span",{staticClass:"hljs-title"},[s._v("add")]),a("span",{staticClass:"hljs-params"},[s._v("(a, b)")]),s._v(" ")]),s._v("{\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" a + b\n}\n"),a("span",{staticClass:"hljs-function"},[s._v("function "),a("span",{staticClass:"hljs-title"},[s._v("multiple")]),a("span",{staticClass:"hljs-params"},[s._v("(a, b)")]),s._v(" ")]),s._v("{\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" a * b\n}\n"),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" firstOp = "),a("span",{staticClass:"hljs-number"},[s._v("9")]),s._v("\n"),a("span",{staticClass:"hljs-keyword"},[s._v("var")]),s._v(" secondOp = "),a("span",{staticClass:"hljs-number"},[s._v("10")]),s._v("\nadd(firstOp, secondOp)\n")])]),s._v(" "),a("p",{attrs:{"data-nodeid":"27491"}},[s._v("理论上讲，上述代码中的"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"27625"}},[s._v("multiple")]),s._v("方法可以被“摇掉”。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"27492"}},[s._v("我们进入实现环节，首先请看下图，了解整体架构流程：")]),s._v(" "),a("p",{attrs:{"data-nodeid":"32771"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image/M00/8F/0E/CgqCHmAGmeCARZ9QAAKowCLHfGk667.png",alt:"Lark20210119-163411.png","data-nodeid":"32775"}})]),s._v(" "),a("div",{attrs:{"data-nodeid":"32772"}},[a("p",{staticStyle:{"text-align":"center"}},[s._v("基于 AST 的 tree-shaking 简易实现")])]),s._v(" "),a("p",{attrs:{"data-nodeid":"27495"}},[s._v("设计 JSEmitter 类，用于根据 AST 产出 JavaScript 代码（js-emitter.js 文件内容）：")]),s._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"27496"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-class"},[a("span",{staticClass:"hljs-keyword"},[s._v("class")]),s._v(" "),a("span",{staticClass:"hljs-title"},[s._v("JSEmitter")]),s._v(" ")]),s._v("{\n    "),a("span",{staticClass:"hljs-comment"},[s._v("// 访问变量声明，以下都是工具方法")]),s._v("\n    visitVariableDeclaration(node) {\n        let str = "),a("span",{staticClass:"hljs-string"},[s._v("''")]),s._v("\n        str += node.kind + "),a("span",{staticClass:"hljs-string"},[s._v("' '")]),s._v("\n        str += "),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".visitNodes(node.declarations)\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" str + "),a("span",{staticClass:"hljs-string"},[s._v("'\\n'")]),s._v("\n    }\n    visitVariableDeclarator(node, kind) {\n        let str = "),a("span",{staticClass:"hljs-string"},[s._v("''")]),s._v("\n        str += kind ? kind + "),a("span",{staticClass:"hljs-string"},[s._v("' '")]),s._v(" : str\n        str += "),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".visitNode(node.id)\n        str += "),a("span",{staticClass:"hljs-string"},[s._v("'='")]),s._v("\n        str += "),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".visitNode(node.init)\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" str + "),a("span",{staticClass:"hljs-string"},[s._v("';'")]),s._v(" + "),a("span",{staticClass:"hljs-string"},[s._v("'\\n'")]),s._v("\n    }\n    visitIdentifier(node) {\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" node.name\n    }\n    visitLiteral(node) {\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" node.raw\n    }\n    visitBinaryExpression(node) {\n        let str = "),a("span",{staticClass:"hljs-string"},[s._v("''")]),s._v("\n        str += "),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".visitNode(node.left)\n        str += node.operator\n        str += "),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".visitNode(node.right)\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" str + "),a("span",{staticClass:"hljs-string"},[s._v("'\\n'")]),s._v("\n    }\n    visitFunctionDeclaration(node) {\n        let str = "),a("span",{staticClass:"hljs-string"},[s._v("'function '")]),s._v("\n        str += "),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".visitNode(node.id)\n        str += "),a("span",{staticClass:"hljs-string"},[s._v("'('")]),s._v("\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v(" (let param = "),a("span",{staticClass:"hljs-number"},[s._v("0")]),s._v("; param < node.params.length; param++) {\n            str += "),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".visitNode(node.params[param])\n            str += ((node.params[param] == undefined) ? "),a("span",{staticClass:"hljs-string"},[s._v("''")]),s._v(" : "),a("span",{staticClass:"hljs-string"},[s._v("','")]),s._v(")\n        }\n        str = str.slice("),a("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(", str.length - "),a("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(")\n        str += "),a("span",{staticClass:"hljs-string"},[s._v("'){'")]),s._v("\n        str += "),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".visitNode(node.body)\n        str += "),a("span",{staticClass:"hljs-string"},[s._v("'}'")]),s._v("\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" str + "),a("span",{staticClass:"hljs-string"},[s._v("'\\n'")]),s._v("\n    }\n    visitBlockStatement(node) {\n        let str = "),a("span",{staticClass:"hljs-string"},[s._v("''")]),s._v("\n        str += "),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".visitNodes(node.body)\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" str\n    }\n    visitCallExpression(node) {\n        let str = "),a("span",{staticClass:"hljs-string"},[s._v("''")]),s._v("\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" callee = "),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".visitIdentifier(node.callee)\n        str += callee + "),a("span",{staticClass:"hljs-string"},[s._v("'('")]),s._v("\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v(" ("),a("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" arg of node.arguments) {\n            str += "),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".visitNode(arg) + "),a("span",{staticClass:"hljs-string"},[s._v("','")]),s._v("\n        }\n        str = str.slice("),a("span",{staticClass:"hljs-number"},[s._v("0")]),s._v(", str.length - "),a("span",{staticClass:"hljs-number"},[s._v("1")]),s._v(")\n        str += "),a("span",{staticClass:"hljs-string"},[s._v("');'")]),s._v("\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" str + "),a("span",{staticClass:"hljs-string"},[s._v("'\\n'")]),s._v("\n    }\n    visitReturnStatement(node) {\n        let str = "),a("span",{staticClass:"hljs-string"},[s._v("'return '")]),s._v(";\n        str += "),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".visitNode(node.argument)\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" str + "),a("span",{staticClass:"hljs-string"},[s._v("'\\n'")]),s._v("\n    }\n    visitExpressionStatement(node) {\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" "),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".visitNode(node.expression)\n    }\n    visitNodes(nodes) {\n        let str = "),a("span",{staticClass:"hljs-string"},[s._v("''")]),s._v("\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("for")]),s._v(" ("),a("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" node of nodes) {\n            str += "),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".visitNode(node)\n        }\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" str\n    }\n    "),a("span",{staticClass:"hljs-comment"},[s._v("// 根据类型，执行相关处理函数")]),s._v("\n    visitNode(node) {\n        let str = "),a("span",{staticClass:"hljs-string"},[s._v("''")]),s._v("\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("switch")]),s._v(" (node.type) {\n            "),a("span",{staticClass:"hljs-keyword"},[s._v("case")]),s._v(" "),a("span",{staticClass:"hljs-string"},[s._v("'VariableDeclaration'")]),s._v(":\n                str += "),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".visitVariableDeclaration(node)\n                "),a("span",{staticClass:"hljs-keyword"},[s._v("break")]),s._v(";\n            "),a("span",{staticClass:"hljs-keyword"},[s._v("case")]),s._v(" "),a("span",{staticClass:"hljs-string"},[s._v("'VariableDeclarator'")]),s._v(":\n                str += "),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".visitVariableDeclarator(node)\n                "),a("span",{staticClass:"hljs-keyword"},[s._v("break")]),s._v(";\n            "),a("span",{staticClass:"hljs-keyword"},[s._v("case")]),s._v(" "),a("span",{staticClass:"hljs-string"},[s._v("'Literal'")]),s._v(":\n                str += "),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".visitLiteral(node)\n                "),a("span",{staticClass:"hljs-keyword"},[s._v("break")]),s._v(";\n            "),a("span",{staticClass:"hljs-keyword"},[s._v("case")]),s._v(" "),a("span",{staticClass:"hljs-string"},[s._v("'Identifier'")]),s._v(":\n                str += "),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".visitIdentifier(node)\n                "),a("span",{staticClass:"hljs-keyword"},[s._v("break")]),s._v(";\n            "),a("span",{staticClass:"hljs-keyword"},[s._v("case")]),s._v(" "),a("span",{staticClass:"hljs-string"},[s._v("'BinaryExpression'")]),s._v(":\n                str += "),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".visitBinaryExpression(node)\n                "),a("span",{staticClass:"hljs-keyword"},[s._v("break")]),s._v(";\n            "),a("span",{staticClass:"hljs-keyword"},[s._v("case")]),s._v(" "),a("span",{staticClass:"hljs-string"},[s._v("'FunctionDeclaration'")]),s._v(":\n                str += "),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".visitFunctionDeclaration(node)\n                "),a("span",{staticClass:"hljs-keyword"},[s._v("break")]),s._v(";\n            "),a("span",{staticClass:"hljs-keyword"},[s._v("case")]),s._v(" "),a("span",{staticClass:"hljs-string"},[s._v("'BlockStatement'")]),s._v(":\n                str += "),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".visitBlockStatement(node)\n                "),a("span",{staticClass:"hljs-keyword"},[s._v("break")]),s._v(";\n            "),a("span",{staticClass:"hljs-keyword"},[s._v("case")]),s._v(" "),a("span",{staticClass:"hljs-string"},[s._v('"CallExpression"')]),s._v(":\n                str += "),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".visitCallExpression(node)\n                "),a("span",{staticClass:"hljs-keyword"},[s._v("break")]),s._v(";\n            "),a("span",{staticClass:"hljs-keyword"},[s._v("case")]),s._v(" "),a("span",{staticClass:"hljs-string"},[s._v('"ReturnStatement"')]),s._v(":\n                str += "),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".visitReturnStatement(node)\n                "),a("span",{staticClass:"hljs-keyword"},[s._v("break")]),s._v(";\n            "),a("span",{staticClass:"hljs-keyword"},[s._v("case")]),s._v(" "),a("span",{staticClass:"hljs-string"},[s._v('"ExpressionStatement"')]),s._v(":\n                str += "),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".visitExpressionStatement(node)\n                "),a("span",{staticClass:"hljs-keyword"},[s._v("break")]),s._v(";\n        }\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" str\n    }\n    "),a("span",{staticClass:"hljs-comment"},[s._v("// 入口")]),s._v("\n    run(body) {\n        let str = "),a("span",{staticClass:"hljs-string"},[s._v("''")]),s._v("\n        str += "),a("span",{staticClass:"hljs-keyword"},[s._v("this")]),s._v(".visitNodes(body)\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" str\n    }\n}\n"),a("span",{staticClass:"hljs-keyword"},[s._v("module")]),s._v("."),a("span",{staticClass:"hljs-keyword"},[s._v("exports")]),s._v(" = JSEmitter\n")])]),s._v(" "),a("p",{attrs:{"data-nodeid":"27497"}},[s._v("我们来具体分析一下，JSEmitter 类中创建了很多 visitXXX 方法，他们最终都会产出 JavaScript 代码。我们继续结合"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"27634"}},[s._v("treeShaking.js")]),s._v("的实现来理解：")]),s._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"27498"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" acorn = require("),a("span",{staticClass:"hljs-string"},[s._v('"acorn"')]),s._v(")\n"),a("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" l = console.log\n"),a("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" JSEmitter = require("),a("span",{staticClass:"hljs-string"},[s._v("'./js-emitter'")]),s._v(")\n"),a("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" fs = require("),a("span",{staticClass:"hljs-string"},[s._v("'fs'")]),s._v(")\n"),a("span",{staticClass:"hljs-comment"},[s._v("// 获取命令行参数")]),s._v("\n"),a("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" args = process.argv["),a("span",{staticClass:"hljs-number"},[s._v("2")]),s._v("]\n"),a("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" buffer = fs.readFileSync(args).toString()\n"),a("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" body = acorn.parse(buffer).body\n"),a("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" jsEmitter = "),a("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" JSEmitter()\nlet decls = "),a("span",{staticClass:"hljs-keyword"},[s._v("new")]),s._v(" Map()\nlet calledDecls = []\nlet code = []\n"),a("span",{staticClass:"hljs-comment"},[s._v("// 遍历处理")]),s._v("\nbody.forEach(function(node) {\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (node.type == "),a("span",{staticClass:"hljs-string"},[s._v('"FunctionDeclaration"')]),s._v(") {\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" code = jsEmitter.run([node])\n        decls.set(jsEmitter.visitNode(node.id), code)\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(";\n    }\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (node.type == "),a("span",{staticClass:"hljs-string"},[s._v('"ExpressionStatement"')]),s._v(") {\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (node.expression.type == "),a("span",{staticClass:"hljs-string"},[s._v('"CallExpression"')]),s._v(") {\n            "),a("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" callNode = node.expression\n            calledDecls.push(jsEmitter.visitIdentifier(callNode.callee))\n            "),a("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" args = callNode."),a("span",{staticClass:"hljs-function"},[s._v("arguments\n            "),a("span",{staticClass:"hljs-title"},[s._v("for")]),s._v(" "),a("span",{staticClass:"hljs-params"},[s._v("("),a("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" arg of args)")]),s._v(" ")]),s._v("{\n                "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (arg.type == "),a("span",{staticClass:"hljs-string"},[s._v('"Identifier"')]),s._v(") {\n                    calledDecls.push(jsEmitter.visitNode(arg))\n                }\n            }\n        }\n    }\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (node.type == "),a("span",{staticClass:"hljs-string"},[s._v('"VariableDeclaration"')]),s._v(") {\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" kind = node."),a("span",{staticClass:"hljs-function"},[s._v("kind\n        "),a("span",{staticClass:"hljs-title"},[s._v("for")]),s._v(" "),a("span",{staticClass:"hljs-params"},[s._v("("),a("span",{staticClass:"hljs-keyword"},[s._v("const")]),s._v(" decl of node.declarations)")]),s._v(" ")]),s._v("{\n            decls.set(jsEmitter.visitNode(decl.id), jsEmitter.visitVariableDeclarator(decl, kind))\n        }\n        "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v("\n    }\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("if")]),s._v(" (node.type == "),a("span",{staticClass:"hljs-string"},[s._v('"Identifier"')]),s._v(") {\n        calledDecls.push(node.name)\n    }\n    code.push(jsEmitter.run([node]))\n});\n"),a("span",{staticClass:"hljs-comment"},[s._v("// 生成 code")]),s._v("\ncode = calledDecls.map(c => {\n    "),a("span",{staticClass:"hljs-keyword"},[s._v("return")]),s._v(" decls.get(c)\n}).concat([code]).join("),a("span",{staticClass:"hljs-string"},[s._v("''")]),s._v(")\nfs.writeFileSync("),a("span",{staticClass:"hljs-string"},[s._v("'test.shaked.js'")]),s._v(", code)\n")])]),s._v(" "),a("p",{attrs:{"data-nodeid":"27499"}},[s._v("对于上面代码分析，首先我们通过"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"27637"}},[s._v("process.argv")]),s._v("获取到目标文件，对于目标文件通过"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"27639"}},[s._v("fs.readFileSync()")]),s._v("方法读出字符串形式的内容"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"27641"}},[s._v("buffer")]),s._v("，对于这个"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"27643"}},[s._v("buffer")]),s._v("变量，我们使用"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"27645"}},[s._v("acorn.parse")]),s._v("进行解析，并对产出内容进行遍历。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"27500"}},[s._v("在遍历过程中，"),a("strong",{attrs:{"data-nodeid":"27652"}},[s._v("对于不同的节点类型，调用 JS Emitter 实例不同的处理方法")]),s._v("。在整个过程中，我们维护了：")]),s._v(" "),a("ul",{attrs:{"data-nodeid":"27501"}},[a("li",{attrs:{"data-nodeid":"27502"}},[a("p",{attrs:{"data-nodeid":"27503"}},[s._v("decls——Map 类型")])]),s._v(" "),a("li",{attrs:{"data-nodeid":"27504"}},[a("p",{attrs:{"data-nodeid":"27505"}},[s._v("calledDecls——数组类型")])]),s._v(" "),a("li",{attrs:{"data-nodeid":"27506"}},[a("p",{attrs:{"data-nodeid":"27507"}},[s._v("code——数组类型")])])]),s._v(" "),a("p",{attrs:{"data-nodeid":"27508"}},[s._v("三个关键变量。"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"27657"}},[s._v("decls")]),s._v("存储所有的函数或变量声明类型节点，"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"27659"}},[s._v("calledDecls")]),s._v("则存储了代码中真正使用到的数或变量声明，"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"27661"}},[s._v("code")]),s._v("存储了其他所有没有被节点类型匹配的 AST 部分。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"27509"}},[s._v("下面我们来分析具体的遍历过程。")]),s._v(" "),a("ul",{attrs:{"data-nodeid":"27510"}},[a("li",{attrs:{"data-nodeid":"27511"}},[a("p",{attrs:{"data-nodeid":"27512"}},[s._v("在遍历过程中，我们"),a("strong",{attrs:{"data-nodeid":"27670"}},[s._v("对所有函数和变量的声明，都维护到")]),a("code",{attrs:{"data-backticks":"1","data-nodeid":"27668"}},[s._v("decls")]),s._v("中。")])]),s._v(" "),a("li",{attrs:{"data-nodeid":"27513"}},[a("p",{attrs:{"data-nodeid":"27514"}},[s._v("接着，我们"),a("strong",{attrs:{"data-nodeid":"27682"}},[s._v("对所有的 CallExpression 和 IDentifier 进行检测")]),s._v("。因为 CallExpression 代表了一次函数调用，因此在该 if 条件分支内，将相关函数节点调用情况推入到"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"27676"}},[s._v("calledDecls")]),s._v("数组中，同时我们对于该函数的参数变量也推入到"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"27678"}},[s._v("calledDecls")]),s._v("数组。因为 IDentifier 代表了一个变量的取值，我们也推入到"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"27680"}},[s._v("calledDecls")]),s._v("数组。")])])]),s._v(" "),a("p",{attrs:{"data-nodeid":"27515"}},[s._v("经过整个 AST 遍历，我们就可以只遍历"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"27684"}},[s._v("calledDecls")]),s._v("数组，并从"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"27686"}},[s._v("decls")]),s._v("变量中获取使用到的变量和函数声明，最终使用"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"27688"}},[s._v("concat")]),s._v("方法合并带入"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"27690"}},[s._v("code")]),s._v("变量中，使用"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"27692"}},[s._v("join")]),s._v("方法转化为字符串类型。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"27516"}},[s._v("至此，我们的简易版 Tree Shaking 实现就完成了，建议你结合实际代码，多调试，相信会有更多收获。")]),s._v(" "),a("h3",{attrs:{"data-nodeid":"27517"}},[s._v("总结")]),s._v(" "),a("p",{attrs:{"data-nodeid":"27518"}},[s._v("这一讲，我们聚焦了 AST 这一热点话题。说 AST 是热点，是因为当前前端基础建设、工程化建设中越来越离不开 AST 技术的支持，AST 在前端中扮演的重要角色也越来越广为人知。")]),s._v(" "),a("p",{attrs:{"data-nodeid":"27519"}},[s._v("但事实上，AST 是计算机领域中一个历经多年的基础概念，每一名开发者也都应该循序渐进地了解 AST 相关技术以及编译原理。")]),s._v(" "),a("p",{staticClass:"te-preview-highlight",attrs:{"data-nodeid":"33332"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image/M00/8F/0F/CgqCHmAGmfaAD2geAAY6xJPW71s609.png",alt:"Lark20210119-163405.png","data-nodeid":"33335"}})]),s._v(" "),a("p",{attrs:{"data-nodeid":"27521"}},[s._v("这一讲，我们先从基本概念入手，然后借助了 acorn 的能力，动手实现了一个真实的 AST 落地场景——实现简易 Tree Shaking，正好又和上一章节内容相扣。由此可见，前端基建和工程化是一张网，网上的每一个技术点，都能由点及面，绘制出一张前端知识图谱。")]),s._v(" "),a("hr"),s._v(" "),a("h3",{attrs:{id:"精选评论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#精选评论"}},[s._v("#")]),s._v(" 精选评论")]),s._v(" "),a("h5",{attrs:{id:"炜"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#炜"}},[s._v("#")]),s._v(" *炜：")]),s._v(" "),a("blockquote",[a("p",[s._v("这节有点难啊")])]),s._v(" "),a("h5",{attrs:{id:"_0929"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0929"}},[s._v("#")]),s._v(" **0929：")]),s._v(" "),a("blockquote",[a("p",[s._v("ast相关内容怎么学习呀老师，比如traverse操作ast之类的内容，没文档，只能去翻源码吗")])]),s._v(" "),a("h6",{attrs:{id:"讲师回复"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲师回复"}},[s._v("#")]),s._v("     讲师回复：")]),s._v(" "),a("blockquote",[a("p",[s._v("    看官网，看源码。能把官网吃透，你就是个专家了，就比我强……")])])])}),[],!1,null,null,null);a.default=e.exports}}]);