(window.webpackJsonp=window.webpackJsonp||[]).push([[112],{448:function(_,v,t){"use strict";t.r(v);var a=t(4),e=Object(a.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h2",{attrs:{id:"http-缓存"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http-缓存"}},[_._v("#")]),_._v(" http 缓存")]),_._v(" "),v("p",[_._v("http 缓存分为强缓存和协商缓存")]),_._v(" "),v("ul",[v("li",[_._v("首先通过 Cache-Control 验证强缓存是否可以使用，如果强缓存可用，那么直接读取缓存")]),_._v(" "),v("li",[_._v("如果不可用，那么进入到协商缓存，发起 http 请求，服务器通过请求头中是否带有 If-Modified-Since 和 If-None-Match 这些条件请求字段检查资源是否更新")]),_._v(" "),v("li",[_._v("如果资源更新，那么返回资源和 200 状态码")]),_._v(" "),v("li",[_._v("如果资源未更新，那么告诉浏览器直接使用缓存获取资源")])]),_._v(" "),v("h2",{attrs:{id:"http-常用的状态码和使用场景"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http-常用的状态码和使用场景"}},[_._v("#")]),_._v(" http 常用的状态码和使用场景")]),_._v(" "),v("ul",[v("li",[_._v("1XX：表示目前是协议的中间状态，还需要后续请求")]),_._v(" "),v("li",[_._v("2XX: 表示请求成功")]),_._v(" "),v("li",[_._v("3XX: 表示重定向状态，需要重新请求")]),_._v(" "),v("li",[_._v("4XX: 表示请求报文错误")]),_._v(" "),v("li",[_._v("5XX：服务端错误")])]),_._v(" "),v("p",[_._v("常见状态码：")]),_._v(" "),v("ul",[v("li",[_._v("101 切换请求协议，从 http 切换到 websocket")]),_._v(" "),v("li",[_._v("200 请求成功，有响应体")]),_._v(" "),v("li",[_._v("301 永久重定向，会缓存")]),_._v(" "),v("li",[_._v("302 临时重定向，不会缓存")]),_._v(" "),v("li",[_._v("304 协商缓存命中")]),_._v(" "),v("li",[_._v("403 服务器禁止访问")]),_._v(" "),v("li",[_._v("404 资源未找到")]),_._v(" "),v("li",[_._v("400 请求错误")]),_._v(" "),v("li",[_._v("500 服务端错误")]),_._v(" "),v("li",[_._v("503 服务器繁忙")])]),_._v(" "),v("h2",{attrs:{id:"平时浏览网页的时候遇到过哪些-302-场景"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#平时浏览网页的时候遇到过哪些-302-场景"}},[_._v("#")]),_._v(" 平时浏览网页的时候遇到过哪些 302 场景")]),_._v(" "),v("p",[_._v("302 表示临时重定向，这个资源只是暂时不能被访问了，但是之后过一段时间还是可以继续访问，一般是访问某个网站的资源需要权限时，会需要用户去登陆，跳转到登录页面之后，还可以继续访问。")]),_._v(" "),v("p",[_._v("301 类似，都会跳转到一个新的网站，但是 301 代表访问的地址的资源被永久移除了，以后都不应该访问这个地址，搜索引擎抓取的时候也会用新的地址替换这个老的。可以再返回的相应的 location 首部去获取到返回的地址。")]),_._v(" "),v("ul",[v("li",[_._v("比如从 http 跳转到 https")]),_._v(" "),v("li",[_._v("域名换了")])]),_._v(" "),v("h2",{attrs:{id:"http-常用的请求方式-区别和用途"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http-常用的请求方式-区别和用途"}},[_._v("#")]),_._v(" http 常用的请求方式，区别和用途")]),_._v(" "),v("p",[_._v("http/1.1 规定请求方法")]),_._v(" "),v("ul",[v("li",[_._v("GET 通用获取数据")]),_._v(" "),v("li",[_._v("HEAD 获取资源的原信息")]),_._v(" "),v("li",[_._v("POST 提交数据")]),_._v(" "),v("li",[_._v("PUT 修改数据")]),_._v(" "),v("li",[_._v("DELETE 删除数据")]),_._v(" "),v("li",[_._v("CONNECT 建立连接隧道，用于代理服务器")]),_._v(" "),v("li",[_._v("OPTIONS 列出可对资源实行的请求方法，常用语跨域")]),_._v(" "),v("li",[_._v("TRACE 追踪请求-响应的传输路径")])]),_._v(" "),v("h2",{attrs:{id:"七层网络协议"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#七层网络协议"}},[_._v("#")]),_._v(" 七层网络协议")]),_._v(" "),v("p",[_._v("应用层，表示层，会话层，传输层，网络层，数据链路层，物理层")]),_._v(" "),v("h2",{attrs:{id:"https-流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#https-流程"}},[_._v("#")]),_._v(" https 流程")]),_._v(" "),v("p",[_._v("https 是在 http 和 tcp 之间建立了一个安全层，http 和 tcp 通信的时候，必须先经过一个安全层，对数据包进行加密，然后将加密后的数据包传输给 tcp，相应的 tcp 必须将数据包解密，才能传给上面的 http")]),_._v(" "),v("p",[_._v("浏览器传输一个 client_random 和加密方法列表，服务器收到后，传给浏览器一个 server_random、加密方法列表和数字证书(包含了公钥)，然后浏览器对数字证书进行合法验证，如果通过验证，则声称一个 pre_random,然后公钥加密传给服务器，服务器用 client_random、server_random 和 pre_random,使用公钥加密生成 secret,然后之后的传输使用这个 secret 作为秘钥来进行数据的加解密")]),_._v(" "),v("h2",{attrs:{id:"三次握手"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三次握手"}},[_._v("#")]),_._v(" 三次握手")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://gcore.jsdelivr.net/gh/wu529778790/image/blog/20211230144719.png",alt:"20211230144719"}})]),_._v(" "),v("ul",[v("li",[_._v("一开始双方处于 CLOSED 状态，然后服务器开始监听某个端口进入 LISTEN 状态")]),_._v(" "),v("li",[_._v("然后客户端主动发起连接，发送 SYN，然后自己的状态变成 SYN-SENT,seq=x")]),_._v(" "),v("li",[_._v("服务器端收到之后，返回 SYN seq = y 和 ACK ack= x + 1(对应客户端发来的 SYN),自己变成 SYN-REVD")]),_._v(" "),v("li",[_._v("之后客户端再次发送 ACK seq = x + 1, ack = y + 1 给服务端，自己变成 EASTABLISHED 状态，服务器收到 ACK，也进入 ESTABLISHED")])]),_._v(" "),v("blockquote",[v("p",[_._v("SYN 需要对端确认，所以 ACK 得序列化要加一，凡是需要对端确认的，一定要消耗 TCP 报文得序列化")])]),_._v(" "),v("h3",{attrs:{id:"为什么不是两次"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为什么不是两次"}},[_._v("#")]),_._v(" 为什么不是两次")]),_._v(" "),v("blockquote",[v("p",[_._v("无法确认客户端的接受能力")])]),_._v(" "),v("p",[_._v("如果首先客户端发送了 SYN 报文，但是滞留在网络中，TCP 以为包丢了，然后重传，两次握手建立了连接")]),_._v(" "),v("p",[_._v("等到客户端关闭连接了。但是之后这个包如果到达了服务器，服务器接收到了，然后发送相应的数据表，就建立了链接，但是此时客户端已经关闭连接了，所以带来了连接资源的浪费")]),_._v(" "),v("h3",{attrs:{id:"为什么不是四次"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为什么不是四次"}},[_._v("#")]),_._v(" 为什么不是四次")]),_._v(" "),v("p",[_._v("四次以上都可以，只不过三次就够了")]),_._v(" "),v("h2",{attrs:{id:"四次挥手"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#四次挥手"}},[_._v("#")]),_._v(" 四次挥手")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://gcore.jsdelivr.net/gh/wu529778790/image/blog/20211230144456.png",alt:"20211230144456"}})]),_._v(" "),v("ul",[v("li",[_._v("一开始都处于 ESTABLISH 状态，然后客户端发送 FIN 报文，带上 seq=p,状态变为 FIN-WAIT-1")]),_._v(" "),v("li",[_._v("服务端收到之后，发送 ACK 确认，ack=p+1,然后进入 CLOSE-WAIT 状态")]),_._v(" "),v("li",[_._v("客户端收到之后进入 FIN-WAIT-2 状态")]),_._v(" "),v("li",[_._v("过了一会等数据处理完，再次发送 FIN、ACK, sea=p+1, 进入 LAST-ACK 阶段")]),_._v(" "),v("li",[_._v("客户端收到 FIN 之后进入到 TIME_WAIT(等待 2MSL)，然后发送 ACK 给服务端 ack= q + 1")]),_._v(" "),v("li",[_._v("服务端收到之后进入 CLOSED 状态")])]),_._v(" "),v("p",[_._v("客户端这个时候还需要等待两次 MSL 之后，如果没有收到服务端的重发请求，就表明 ACK 成功到达，挥手结束，客户端变为 CLOSED 状态，否则进行 ACK 重发")]),_._v(" "),v("h2",{attrs:{id:"为什么要等待-2msl-maximum-segement-lifetime"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为什么要等待-2msl-maximum-segement-lifetime"}},[_._v("#")]),_._v(" 为什么要等待 2MSL(Maximum Segement Lifetime)")]),_._v(" "),v("p",[_._v("因为如果不等待的话，服务端如果还有很多数据包要发给客户端，但是此时客户端端口被新应用占据，那么就会接收到无用的数据包，造成数据包混乱，所以说最保险的方法就是等服务器发来的数据包都死翘翘了在启动新应用")]),_._v(" "),v("ul",[v("li",[_._v("1 个 MSL 保证四次握手中主动关闭方最后的 ACK 报文能最终到达对端")]),_._v(" "),v("li",[_._v("1 个 MSL 保证对端没有收到 ACK 那么进行重传的 FIN 报文能够到达")])]),_._v(" "),v("h2",{attrs:{id:"为什么不是三次"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#为什么不是三次"}},[_._v("#")]),_._v(" 为什么不是三次")]),_._v(" "),v("p",[_._v("如果是三次的话，那么服务端的 ACK 和 FIN 合成一个挥手，那么长时间的延迟可能让 TCP 一位 FIN 没有达到服务器端，然后让客户的不断的重发 FIN")]),_._v(" "),v("h2",{attrs:{id:"在交互过程中如果数据传送完了-还不想断开连接怎么办-怎么维持"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#在交互过程中如果数据传送完了-还不想断开连接怎么办-怎么维持"}},[_._v("#")]),_._v(" 在交互过程中如果数据传送完了，还不想断开连接怎么办，怎么维持")]),_._v(" "),v("p",[_._v("在 HTTP 中响应体的 Connection 字段指定为 keep-alive")]),_._v(" "),v("h2",{attrs:{id:"tcp-滑动窗口"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp-滑动窗口"}},[_._v("#")]),_._v(" TCP 滑动窗口")]),_._v(" "),v("p",[_._v("在 TCP 链接中，对于发送端和接收端而言，TCP 需要把发送的数据放到发送缓存区, 将接收的数据放到接收缓存区。而经常会存在发送端发送过多，而接收端无法消化的情况，所以就需要流量控制，就是在通过接收缓存区的大小，控制发送端的发送。如果对方的接收缓存区满了，就不能再继续发送了。而这种流量控制的过程就需要在发送端维护一个发送窗口，在接收端维持一个接收窗口。\nTCP 滑动窗口分为两种: 发送窗口和接收窗口")]),_._v(" "),v("h2",{attrs:{id:"websocket-与-ajax-的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#websocket-与-ajax-的区别"}},[_._v("#")]),_._v(" WebSocket 与 Ajax 的区别")]),_._v(" "),v("p",[v("code",[_._v("本质不同")])]),_._v(" "),v("p",[_._v("Ajax 即异步 JavaScript 和 XML，是一种创建交互式网页的应用的网页开发技术\nwebsocket 是 HTML5 的一种新协议，实现了浏览器和服务器的实时通信")]),_._v(" "),v("p",[v("code",[_._v("生命周期不同")])]),_._v(" "),v("p",[_._v("websocket 是长连接，会话一直保持\najax 发送接收之后就会断开")]),_._v(" "),v("p",[v("code",[_._v("适用范围")])]),_._v(" "),v("p",[_._v("websocket 用于前后端实时交互数据\najax 非实时")]),_._v(" "),v("p",[v("code",[_._v("发起人")])]),_._v(" "),v("p",[_._v("AJAX 客户端发起\nWebSocket 服务器端和客户端相互推送")]),_._v(" "),v("h2",{attrs:{id:"了解-websocket-嘛"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#了解-websocket-嘛"}},[_._v("#")]),_._v(" 了解 WebSocket 嘛")]),_._v(" "),v("p",[_._v("长轮询和短轮询，WebSocket 是长轮询。")]),_._v(" "),v("p",[_._v("具体比如在一个电商场景，商品的库存可能会变化，所以需要及时反映给用户，所以客户端会不停的发请求，然后服务器端会不停的去查变化，不管变不变，都返回，这个是短轮询。")]),_._v(" "),v("p",[_._v("而长轮询则表现为如果没有变，就不返回，而是等待变或者超时（一般是十几秒）才返回，如果没有返回，客户端也不需要一直发请求，所以减少了双方的压力")]),_._v(" "),v("h2",{attrs:{id:"http-如何实现长连接-在什么时候会超时"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http-如何实现长连接-在什么时候会超时"}},[_._v("#")]),_._v(" HTTP 如何实现长连接？在什么时候会超时")]),_._v(" "),v("p",[_._v("通过在头部（请求和响应头）设置 Connection: keep-alive，HTTP1.0 协议支持，但是默认关闭，从 HTTP1.1 协议以后，连接默认都是长连接")]),_._v(" "),v("ul",[v("li",[_._v("HTTP 一般会有 httpd 守护进程，里面可以设置 keep-alive timeout，当 tcp 链接闲置超过这个时间就会关闭，也可以在 HTTP 的 header 里面设置超时时间")]),_._v(" "),v("li",[_._v("TCP 的 keep-alive 包含三个参数，支持在系统内核的 net.ipv4  里面设置：当 TCP 链接之后，闲置了 tcp_keepalive_time，则会发生侦测包，如果没有收到对方的 ACK，那么会每隔 tcp_keepalive_intvl 再发一次，直到发送了 tcp_keepalive_probes，就会丢弃该链接\n"),v("ul",[v("li",[_._v("tcp_keepalive_intvl = 15")]),_._v(" "),v("li",[_._v("tcp_keepalive_probes = 5")]),_._v(" "),v("li",[_._v("tcp_keepalive_time = 1800")])])])]),_._v(" "),v("p",[_._v("实际上 HTTP 没有长短链接，只有 TCP 有，TCP 长连接可以复用一个 TCP 链接来发起多次 HTTP 请求，这样可以减少资源消耗，比如一次请求 HTML，可能还需要请求后续的 JS/CSS/图片等")]),_._v(" "),v("h2",{attrs:{id:"fetch-api-与传统-request-的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#fetch-api-与传统-request-的区别"}},[_._v("#")]),_._v(" Fetch API 与传统 Request 的区别")]),_._v(" "),v("ul",[v("li",[_._v("fetch 符合关注点分离，使用 Promise，API 更加丰富，支持 Async/Await")]),_._v(" "),v("li",[_._v("语意简单，更加语意化")]),_._v(" "),v("li",[_._v("可以使用 isomorphic-fetch ，同构方便")])]),_._v(" "),v("h2",{attrs:{id:"tcp-如何保证有效传输及拥塞控制原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp-如何保证有效传输及拥塞控制原理"}},[_._v("#")]),_._v(" TCP 如何保证有效传输及拥塞控制原理")]),_._v(" "),v("p",[_._v("cp 是面向连接的、可靠的、传输层通信协议")]),_._v(" "),v("p",[_._v("可靠体现在：有状态、可控制")]),_._v(" "),v("ul",[v("li",[_._v("有状态是指 TCP 会确认发送了哪些报文，接收方受到了哪些报文，哪些没有收到，保证数据包按序到达，不允许有差错")]),_._v(" "),v("li",[_._v("可控制的是指，如果出现丢包或者网络状况不佳，则会跳转自己的行为，减少发送的速度或者重发")])]),_._v(" "),v("p",[_._v("所以上面能保证数据包的有效传输")]),_._v(" "),v("h2",{attrs:{id:"拥塞控制原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#拥塞控制原理"}},[_._v("#")]),_._v(" 拥塞控制原理")]),_._v(" "),v("p",[_._v("原因是有可能整个网络环境特别差，容易丢包，那么发送端就应该注意了。")]),_._v(" "),v("p",[_._v("主要用三种方法：")]),_._v(" "),v("ul",[v("li",[_._v("慢启动阈值 + 拥塞避免")]),_._v(" "),v("li",[_._v("快速重传")]),_._v(" "),v("li",[_._v("快速回复")])]),_._v(" "),v("h3",{attrs:{id:"慢启动阈值-拥塞避免"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#慢启动阈值-拥塞避免"}},[_._v("#")]),_._v(" 慢启动阈值 + 拥塞避免")]),_._v(" "),v("p",[_._v("对于拥塞控制来说，TCP 主要维护两个核心状态：")]),_._v(" "),v("ul",[v("li",[_._v("拥塞窗口（cwnd）")]),_._v(" "),v("li",[_._v("慢启动阈值（ssthresh）")])]),_._v(" "),v("p",[_._v("在发送端使用拥塞窗口来控制发送窗口的大小")]),_._v(" "),v("p",[_._v("然后采用一种比较保守的慢启动算法来慢慢适应这个网络，在开始传输的一段时间，发送端和接收端会首先通过三次握手建立连接，确定各自接收窗口大小，然后初始化双方的拥塞窗口，接着每经过一轮 RTT（收发时延），拥塞窗口大小翻倍，直到达到慢启动阈值")]),_._v(" "),v("p",[_._v("然后开始进行拥塞避免，拥塞避免具体的做法就是之前每一轮 RTT，拥塞窗口翻倍，现在每一轮就加一个")]),_._v(" "),v("h3",{attrs:{id:"快速重传"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#快速重传"}},[_._v("#")]),_._v(" 快速重传")]),_._v(" "),v("p",[_._v("在 TCP 传输过程中，如果发生了丢包，接收端就会发送之前重复 ACK，比如 第 5 个包丢了，6、7 达到，然后接收端会为 5，6，7 都发送第四个包的 ACK，这个时候发送端受到了 3 个重复的 ACK，意识到丢包了，就会马上进行重传，而不用等到 RTO （超时重传的时间）")]),_._v(" "),v("p",[_._v("选择性重传：报文首部可选性中加入 SACK 属性，通过 left edge 和 right edge 标志那些包到了，然后重传没到的包")]),_._v(" "),v("h3",{attrs:{id:"快速恢复"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#快速恢复"}},[_._v("#")]),_._v(" 快速恢复")]),_._v(" "),v("p",[_._v("如果发送端收到了 3 个重复的 ACK，发现了丢包，觉得现在的网络状况已经进入拥塞状态了，那么就会进入快速恢复阶段")]),_._v(" "),v("ul",[v("li",[_._v("会将拥塞阈值降低为 拥塞窗口的一半")]),_._v(" "),v("li",[_._v("然后拥塞窗口大小变为拥塞阈值")]),_._v(" "),v("li",[_._v("接着 拥塞窗口再进行线性增加，以适应网络状况")])]),_._v(" "),v("h2",{attrs:{id:"option-请求"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#option-请求"}},[_._v("#")]),_._v(" option 请求")]),_._v(" "),v("p",[_._v("旨在发送一种探测请求，以确定针对某个目标地址的请求必须具有怎么样的约束，然后根据约束发送真正的请求。")]),_._v(" "),v("p",[_._v("比如针对跨域资源的预检，就是采用 HTTP 的 OPTIONS 方法先发送的。用来处理跨域请求")]),_._v(" "),v("h2",{attrs:{id:"http-是哪一层的协议"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http-是哪一层的协议"}},[_._v("#")]),_._v(" http 是哪一层的协议")]),_._v(" "),v("p",[_._v("应用层")]),_._v(" "),v("ul",[v("li",[_._v("灵活可扩展，除了规定空格分隔单词，换行分隔字段以外，其他都没有限制，不仅仅可以传输文本，还可以传输图片、视频等任意资源")]),_._v(" "),v("li",[_._v("可靠传输，基于 TCP/IP 所以继承了这一特性")]),_._v(" "),v("li",[_._v("请求-应答，有来有回")]),_._v(" "),v("li",[_._v("无状态，每次 HTTP 请求都是独立的，无关的、默认不需要保存上下文信息")])]),_._v(" "),v("p",[_._v("缺点：")]),_._v(" "),v("ul",[v("li",[_._v("明文传输不安全")]),_._v(" "),v("li",[_._v("复用一个 TCP 链接，会发生对头拥塞")]),_._v(" "),v("li",[_._v("无状态在长连接场景中，需要保存大量上下文，以避免传输大量重复的信息")])]),_._v(" "),v("h2",{attrs:{id:"osi-七层模型-、-tcp-ip-四层模型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#osi-七层模型-、-tcp-ip-四层模型"}},[_._v("#")]),_._v(" OSI 七层模型 、 TCP/IP 四层模型")]),_._v(" "),v("ul",[v("li",[_._v("应用层")]),_._v(" "),v("li",[_._v("表示层")]),_._v(" "),v("li",[_._v("会话层")]),_._v(" "),v("li",[_._v("传输层")]),_._v(" "),v("li",[_._v("网络层")]),_._v(" "),v("li",[_._v("数据链路层")]),_._v(" "),v("li",[_._v("物理层")])]),_._v(" "),v("p",[_._v("TCP/IP 四层概念")]),_._v(" "),v("p",[_._v("应用层：应用层、表示层、会话层：HTTP\n传输层：传输层：TCP/UDP\n网络层：网络层：IP\n数据链路层：数据链路层、物理层")]),_._v(" "),v("h2",{attrs:{id:"tcp-协议怎么保证靠靠-udp-为什么不可靠"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp-协议怎么保证靠靠-udp-为什么不可靠"}},[_._v("#")]),_._v(" TCP 协议怎么保证靠靠，UDP 为什么不可靠")]),_._v(" "),v("p",[_._v("TCP 是面向连接的、可靠的、传输层通信协议\nUDP 是无连接的传输层通信协议，继承 IP 特性,基于数据报文")]),_._v(" "),v("p",[_._v("为什么 TCP 可靠？TCP 的可靠性体现在有状态和控制")]),_._v(" "),v("ul",[v("li",[_._v("会精准记录那些数据发送了，那些数据被对方接收了，那些没有被接收，而且保证数据包按序到达，不允许半点差错，这就是有状态")]),_._v(" "),v("li",[_._v("当意识到丢包了或者网络环境不佳，TCP 会根据具体情况调整自己的行为，控制自己的发送速度或者重发，这是可控制的")])]),_._v(" "),v("p",[_._v("反之 UDP 就是无状态的和不可控制的")]),_._v(" "),v("h2",{attrs:{id:"http2-改进"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http2-改进"}},[_._v("#")]),_._v(" HTTP2 改进")]),_._v(" "),v("ul",[v("li",[_._v("头部压缩")]),_._v(" "),v("li",[_._v("多路复用")]),_._v(" "),v("li",[_._v("服务器推送")]),_._v(" "),v("li",[_._v("二进制分帧")])]),_._v(" "),v("h2",{attrs:{id:"参考"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[_._v("#")]),_._v(" 参考")]),_._v(" "),v("p",[v("a",{attrs:{href:"https://juejin.cn/post/6939691851746279437",target:"_blank",rel:"noopener noreferrer"}},[_._v("https://juejin.cn/post/6939691851746279437"),v("OutboundLink")],1)])])}),[],!1,null,null,null);v.default=e.exports}}]);