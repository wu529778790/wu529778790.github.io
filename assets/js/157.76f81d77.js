(window.webpackJsonp=window.webpackJsonp||[]).push([[157],{496:function(t,a,d){"use strict";d.r(a);var s=d(4),n=Object(s.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",{attrs:{"data-nodeid":"1033"}},[t._v("现代化前端架构离不开构建工具的加持。构建工具的选择、理解和应用决定了是否能够打造一个流畅且接近完美的开发体验。这一讲，我们通过“横向对比构建工具”这个非常新颖的角度，来了解构建工具背后的架构理念。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1034"}},[t._v("提到构建工具，作为经验丰富的前端开发者，相信你能列举出不同时代的代表：从 Browserify + Gulp 到 Parcel，从 Webpack 到 Rollup，甚至尤雨溪最近编写的 Vite，相信你也并不陌生。没错，前端发展到现在，构建工具琳琅满目，且已经成熟稳定下来。但这些构建工具的实现和设计非常复杂，甚至出现了“面向构建工具编程”的调侃。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1035"}},[t._v("事实上，能够熟悉并精通构建工具的开发者凤毛麟角。请注意，"),a("strong",{attrs:{"data-nodeid":"1116"}},[t._v("这里的“熟悉并精通”并不是要求你对不同构建工具的配置项目如数家珍，而是真正能把握构建流程")]),t._v("。在“6 个月就会出现一批新的技术潮流”的前端领域，能始终把握构建工具的奥秘——这也是区分资深架构师和程序员的一个重要标志。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1036"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image2/M01/03/BB/CgpVE1_hlvWAZJNsAAVR01sbE8E875.png",alt:"Lark20201222-144850.png","data-nodeid":"1119"}})]),t._v(" "),a("p",{attrs:{"data-nodeid":"1037"}},[t._v("如何真正了解构建流程，甚至能够自己开发一个构建工具呢？这里我先通过横向比较不同构建工具，让你有一个整体的把控和认知，能够明白构建工具要做什么、怎么做。")]),t._v(" "),a("h3",{attrs:{"data-nodeid":"1038"}},[t._v("从 Tooling.Report 中，我们能学到什么")]),t._v(" "),a("p",{staticClass:"te-preview-highlight",attrs:{"data-nodeid":"2855"}},[a("a",{attrs:{href:"https://bundlers.tooling.report/","data-nodeid":"2858"}},[t._v("Tooling.Report")]),t._v(" 是由 Chrome core team 核心成员以及业内著名开发者打造的构建工具比对平台，其对应 GitHub 地址为："),a("a",{attrs:{href:"https://github.com/GoogleChromeLabs/tooling.report","data-nodeid":"2862"}},[t._v("GoogleChromeLabs tooling.report")]),t._v("。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1040"}},[t._v("这个平台对比了 Webpack v4、Rollup v2、Parcel v2、Browserify + Gulp 在不同维度下的表现，如下图所示：")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1041"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image2/M01/03/A8/CgpVE1_gVd-AKiMRAAFXHtN1HLk529.png",alt:"Drawing 0.png","data-nodeid":"1133"}})]),t._v(" "),a("div",{attrs:{"data-nodeid":"1042"}},[a("p",{staticStyle:{"text-align":"center"}},[t._v("构建工具测评对比图")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"1043"}},[t._v("我们先看看评测数据：Rollup 得分最高，Parcel 得分最低，Webpack 和 Rollup 得分接近。测评通过的 test 得分只是一个方面，实际情况也和不同构建工具的设计目标有关。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1044"}},[t._v("比如，Webpack 的构建主要依赖了插件和 loader，因此它的能力虽然强大，但配置信息较为烦琐。而 Parcel 的设计目标之一就是零配置，开箱即用，但是在功能的集成上相对有限。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1045"}},[t._v("从横向发展来看，各大构建工具之间也在互相借鉴发展。比如，以 "),a("strong",{attrs:{"data-nodeid":"1153"}},[t._v("Webpack")]),t._v(" 为首的工具中，历史上编译构建速度较慢，"),a("strong",{attrs:{"data-nodeid":"1154"}},[t._v("即便监听文件启动增量构建，也无法解决初始时构建时间过长的问题")]),t._v("。而 "),a("strong",{attrs:{"data-nodeid":"1155"}},[t._v("Parcel 主要内置了多核并行构建")]),t._v("，利用多线程实现编译能力，在初始构建阶段就能获得较理想的构建速度。同时 Parcel 还"),a("strong",{attrs:{"data-nodeid":"1156"}},[t._v("内置了文件系统缓存")]),t._v("，可以保存每个文件的编译结果。这一方面 Webpack 新版本（v5）也都有相应跟进。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1046"}},[t._v("因此，在构建工具的横向对比上，功能是否强大是一方面，而"),a("strong",{attrs:{"data-nodeid":"1162"}},[t._v("构建效率")]),t._v("也将会是开发者考虑的核心指标。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1047"}},[t._v("那么对于构建工具来说，在一个现代化的项目中，哪些功能是“必备”的呢？从这些功能上，我们能学习到哪些基建和工程化知识呢？")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1048"}},[t._v("我们还是从上面的分数出发，分析具体的测试维度。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1049"}},[t._v("这些分数来自以下 6 个维度的评测：")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"1050"}},[a("li",{attrs:{"data-nodeid":"1051"}},[a("p",{attrs:{"data-nodeid":"1052"}},[t._v("Code Splitting")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1053"}},[a("p",{attrs:{"data-nodeid":"1054"}},[t._v("Hashing")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1055"}},[a("p",{attrs:{"data-nodeid":"1056"}},[t._v("Importing Modules")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1057"}},[a("p",{attrs:{"data-nodeid":"1058"}},[t._v("Non-JavaScript Resources")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1059"}},[a("p",{attrs:{"data-nodeid":"1060"}},[t._v("Output Module Formats")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1061"}},[a("p",{attrs:{"data-nodeid":"1062"}},[t._v("Transformations")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"1063"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image/M00/8B/D0/CgqCHl_gVeyAEgAmAAH_-9zFwV8373.png",alt:"Drawing 1.png","data-nodeid":"1174"}})]),t._v(" "),a("ul",{attrs:{"data-nodeid":"1064"}},[a("li",{attrs:{"data-nodeid":"1065"}},[a("p",{attrs:{"data-nodeid":"1066"}},[t._v("在 Code Splitting 方面，Rollup 表现最好，这是 Rollup 现代化的一个重要体现，而 Browserify 表层最差；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1067"}},[a("p",{attrs:{"data-nodeid":"1068"}},[t._v("在 Hashing、Importing Modules 以及 Transformation 方面，各大构建工具表现相对趋近；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1069"}},[a("p",{attrs:{"data-nodeid":"1070"}},[t._v("在 Output Module Formats 上，除了 Browserify，其他工具表现相对一致。")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"1811"}},[t._v("这里需要你深入思考：这 6 个维度到底是什么，为什么它们能作为考量指标被选取为评测参考标准？实际上，这个问题反映的技术信息是："),a("strong",{attrs:{"data-nodeid":"1817"}},[t._v("一个现代化构建工具或构建方案，需要重点考量/实现哪些环节")]),t._v("？")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1072"}},[t._v("下面我们逐一进行分析。")]),t._v(" "),a("h4",{attrs:{"data-nodeid":"1073"}},[t._v("Code Splitting")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1074"}},[a("strong",{attrs:{"data-nodeid":"1198"}},[t._v("Code Splitting，即代码分割")]),t._v("。这意味着在构建打包时，能够"),a("strong",{attrs:{"data-nodeid":"1199"}},[t._v("导出公共模块，避免重复打包")]),t._v("，以及"),a("strong",{attrs:{"data-nodeid":"1200"}},[t._v("在页面加载运行时，实现最合理的按需加载策略")]),t._v("。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1075"}},[t._v("实际上，Code Splitting 是一个很大的话题。比如：不同模块间的代码分割机制能否支持不同的上下文环境（Web worker 环境等特殊上下文情况），如何实现对 Dynamic Import 语法特性的支持，应用配置多入口/单入口时是否支持重复模块的抽取并打包，代码模块间是否支持 Living Bindings（如果被依赖的 module 中的值发生了变化，则会映射到所有依赖该值的模块中）。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1076"}},[t._v("Code Splitting 是现代化构建工具的标配，因为它"),a("strong",{attrs:{"data-nodeid":"1207"}},[t._v("直接决定了前端的静态资源产出情况")]),t._v("，影响着项目应用的性能表现。这方面的更多内容，我将会在“代码拆分和按需加载：缩减 bundle size，把性能做到极致”一讲中深入分析。")]),t._v(" "),a("h4",{attrs:{"data-nodeid":"1077"}},[t._v("Hashing")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1078"}},[a("strong",{attrs:{"data-nodeid":"1221"}},[t._v("Hashing，即对打包资源进行版本信息映射")]),t._v("。这个话题背后的重要技术点是"),a("strong",{attrs:{"data-nodeid":"1222"}},[t._v("最大化地利用缓存机制")]),t._v("。我们知道有效的缓存策略将直接影响页面加载表现，决定用户体验。那么对于构建工具来说，为了实现更合理的 hash 机制，构建工具就需要分析各种打包资源，导出模块间依赖关系，依据依赖关系上下文决定产出包的哈希值。因为一个资源的变动，将会引起其依赖下游的关联资源变动，因此"),a("strong",{attrs:{"data-nodeid":"1223"}},[t._v("构建工具进行打包的前提就是对各个模块依赖关系进行分析，并根据依赖关系，支持开发者自行定义哈希策略")]),t._v("（比如，Webpack 提供的不同类型 hash 的区别：hash/chunkhash/contenthash）。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1079"}},[t._v("这就涉及一个知识点：如何区分 Webpack 中的 hash/chunkhash/contenthash？")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"1080"}},[a("li",{attrs:{"data-nodeid":"1081"}},[a("p",{attrs:{"data-nodeid":"1082"}},[a("strong",{attrs:{"data-nodeid":"1229"}},[t._v("hash 反映了项目的构建版本")]),t._v("，因此同一次构建过程中生成的 hash 都是一样的。换句话说，如果项目里某个模块发生更改，触发项目的重新构建，那么文件的 hash 值将会相应地改变。")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1083"}},[a("p",{attrs:{"data-nodeid":"1084"}},[t._v("如果使用 hash 策略，存在一个问题：即使某个模块的内容压根没有改变，但是重新构建后会产生一个新的 hash 值，使得缓存命中率较低。")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1085"}},[a("p",{attrs:{"data-nodeid":"1086"}},[t._v("针对以上问题，chunkhash 和 contenthash 就不一样了，"),a("strong",{attrs:{"data-nodeid":"1236"}},[t._v("chunkhash 会根据入口文件（Entry）进行依赖解析")]),t._v("。")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"1087"}},[a("p",{attrs:{"data-nodeid":"1088"}},[t._v("contenthash 则会根据文件具体内容，生成 hash 值。")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"1089"}},[t._v("我们来具体分析下，假设我们的应用项目中做到了把公共库和业务项目入口文件区分开单独进行打包，"),a("strong",{attrs:{"data-nodeid":"1243"}},[t._v("采用 chunkhash 策略，如果改动了业务项目入口文件，就不会引起公共库的 hash 值改变")]),t._v("。对应以下示例：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"1090"}},[a("code",{attrs:{"data-language":"java"}},[t._v("entry:{\n    main: path.join(__dirname,"),a("span",{staticClass:"hljs-string"},[t._v("'./main.js'")]),t._v("),\n    vendor: ["),a("span",{staticClass:"hljs-string"},[t._v("'react'")]),t._v("]\n},\noutput:{\n    path:path.join(__dirname,"),a("span",{staticClass:"hljs-string"},[t._v("'./build'")]),t._v("),\n    publicPath: "),a("span",{staticClass:"hljs-string"},[t._v("'/build/'")]),t._v(",\n    filname: "),a("span",{staticClass:"hljs-string"},[t._v("'bundle.[chunkhash].js'")]),t._v("\n}\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"1091"}},[t._v("我们再看一个例子，在 index.js 中出现了对 index.css 的引用：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"1092"}},[a("code",{attrs:{"data-language":"java"}},[t._v("require("),a("span",{staticClass:"hljs-string"},[t._v("'./index.css'")]),t._v(")\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"1093"}},[t._v("此时因为 index.js 和 index.css 具有依赖关系，所以共用相同的 chunkhash 值。如果 index.js 内容发生变化，index.css 即使没有改动，在使用 chunkhash 策略时，被单独拆分的 index.css 的 hash 值也发生了变化。如果想让 index.css 完全根据文件内容来确定 hash 值，就可以使用 contenthash 策略了。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1094"}},[t._v("实际上，Webpack 的 hash 策略已经变得比较完善和成熟了。更多内容我在这里只做启发和串联，其中具体的设计思路，你可以参考："),a("a",{attrs:{href:"https://medium.com/@sahilkkrazy/hash-vs-chunkhash-vs-contenthash-e94d38a32208","data-nodeid":"1249"}},[t._v("Hash vs chunkhash vs ContentHash")]),t._v("。")]),t._v(" "),a("h4",{attrs:{"data-nodeid":"1095"}},[t._v("Importing Modules")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1096"}},[a("strong",{attrs:{"data-nodeid":"1258"}},[t._v("Importing Modules，即依赖机制")]),t._v("。当然它对于一个构建流程或工具来说非常重要，因为历史和设计原因，前端开发者一般要面对包括 ESM、CommonJS 等不同模块化方案。而一个构建工具的设计当然也就要兼容不同类型的 modules importing 方案。除此之外，由于 Node.js 的 npm 机制设计，构建工具也要支持对从 node_modules 引入公共包的支持。")]),t._v(" "),a("h4",{attrs:{"data-nodeid":"1097"}},[t._v("Non-JavaScript Resources")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1098"}},[a("strong",{attrs:{"data-nodeid":"1264"}},[t._v("Non-JavaScript Resources，是指对其他非 JavaScript 类型资源导入的支持能力")]),t._v("。这里的 Non-JavaScript Resources 可以是 HTML 文档、CSS 样式资源、JSON 资源、富媒体资源等。这些资源也是构成一个应用的关键内容，构建流程/工具当然要进行理解和支持。")]),t._v(" "),a("h4",{attrs:{"data-nodeid":"1099"}},[t._v("Output Module Formats")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1100"}},[t._v("Output Module Formats 对应上面的 Importing Modules 话题。构建输出内容的模块化方式也需要更加灵活，比如开发者可配置 ESM、CommonJS 等规范的构建内容导出。这方面内容我也会在“现代化前端开发和架构生态篇”中带你做更深入的分析。")]),t._v(" "),a("h4",{attrs:{"data-nodeid":"1101"}},[t._v("Transformations")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1102"}},[t._v("Transformations，现代化前端开发离不开编译/转义过程。比如对 JavaScript 代码的压缩、对无用代码的删除（DCE）等。这里需要注意的是，"),a("strong",{attrs:{"data-nodeid":"1273"}},[t._v("我们在设计构建工具时，对于类似 JSX 的编译、.vue 文件的编译，不会内置到构建工具当中，而是利用 Babel 等社区能力，“无缝融合”到构建流程里")]),t._v("。构建工具只做构建分内的事情，其他扩展能力通过插件化机制来完成，显然是一个合理而必要的设计。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1103"}},[t._v("以上 6 个维度内容，都能展开作为一个独立且丰富的话题深入。设计这节内容是因为我希望你能从大局观上，对构建流程和构建工具要做哪些事情、为什么要做这些事情有一个更清晰的认知。你也可以在"),a("a",{attrs:{href:"https://bundlers.tooling.report/","data-nodeid":"1277"}},[t._v("Tooling.Report")]),t._v("中挖掘到更多内容。")]),t._v(" "),a("h3",{attrs:{"data-nodeid":"1104"}},[t._v("总结")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1105"}},[t._v("这一节我们从"),a("a",{attrs:{href:"https://bundlers.tooling.report/","data-nodeid":"1283"}},[t._v("Tooling.Report")]),t._v("入手，根据其集成分析的结果，横向对比了各大构建工具。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1106"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image/M00/8B/C5/Ciqc1F_gVo-AS0nFAADyzXOR718143.png",alt:"Drawing 2.png","data-nodeid":"1287"}})]),t._v(" "),a("p",{attrs:{"data-nodeid":"1107"}},[t._v("其实对比只是一方面，更重要的是我们需要通过对比结果，去了解各构建工具需要做哪些事情？基础建设和工程化要考虑哪些事情？搞清楚这些信息，我们就能站在更高的视角，进行技术选型，审视工程化和基础建设。下一讲，我将带你深入 Vite 实现源码，来了解当下前端构建工具的“风口浪尖”。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"1108"}},[t._v("这里也给大家留一个思考题：Tooling.Report 的跑分代码是如何实现的？欢迎在留言区和我分享你的观点。我们下一讲再见。")]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"精选评论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#精选评论"}},[t._v("#")]),t._v(" 精选评论")]),t._v(" "),a("h5",{attrs:{id:"凯"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#凯"}},[t._v("#")]),t._v(" **凯：")]),t._v(" "),a("blockquote",[a("p",[t._v("催更了")])]),t._v(" "),a("h6",{attrs:{id:"编辑回复"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编辑回复"}},[t._v("#")]),t._v("     编辑回复：")]),t._v(" "),a("blockquote",[a("p",[t._v("    每周一、三更新哈，争取把最好的内容呈现给大家~")])]),t._v(" "),a("h5",{attrs:{id:"用户3945"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用户3945"}},[t._v("#")]),t._v(" **用户3945：")]),t._v(" "),a("blockquote",[a("p",[t._v("刚好准备开展公司基建的工作，非常喜欢这些内容，有好多东西需要慢慢摸索和实践。")])]),t._v(" "),a("h5",{attrs:{id:"茏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#茏"}},[t._v("#")]),t._v(" **茏：")]),t._v(" "),a("blockquote",[a("p",[t._v("看的过程中我就在想这个测试是如何跑的。一个想法是准备多个标准项目，代表实际开发中项目的变动历史，然后对比同一工具对各个版本项目的打包结果，得到工具对项目变动的处理能力，比如hash问题。另一方面也要对比不同工具对同一项目的打包结果，以得到工具本身的打包能力，比如import/export的版本，这可能需要一个对应基准项目的标准打包结果")])]),t._v(" "),a("h5",{attrs:{id:"息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#息"}},[t._v("#")]),t._v(" **息：")]),t._v(" "),a("blockquote",[a("p",[t._v("老师的课好棒")])]),t._v(" "),a("h5",{attrs:{id:"俊"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#俊"}},[t._v("#")]),t._v(" *俊：")]),t._v(" "),a("blockquote",[a("p",[t._v("个人也非常喜欢 web.dev 中 jake archibald 演讲的 tooling.report, 非常值得思考😁")])])])}),[],!1,null,null,null);a.default=n.exports}}]);