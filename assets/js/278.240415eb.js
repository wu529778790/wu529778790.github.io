(window.webpackJsonp=window.webpackJsonp||[]).push([[278],{614:function(a,t,e){"use strict";e.r(t);var r=e(4),n=Object(r.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"js-中如何检测一个变量是-string-类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js-中如何检测一个变量是-string-类型"}},[a._v("#")]),a._v(" js 中如何检测一个变量是 String 类型")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('functiton isString(obj) {\n  return typeof(obj) === "string" ? true : false;\n}\n')])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function isString(obj) {\n  return obj.constructor === String ? true : false\n}\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('function isString(obj) {\n  return Object.prototype.toString.call(obj) === "[object String]" ? true : false\n}\n')])])]),a._v(" "),t("h2",{attrs:{id:"请用-js-去除字符串空格"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#请用-js-去除字符串空格"}},[a._v("#")]),a._v(" 请用 js 去除字符串空格")]),a._v(" "),t("ol",[t("li",[a._v("使用 replace 正则匹配的方法")])]),a._v(" "),t("p",[a._v("去除所有空格: str = str.replace(/\\s*/g, '');\n去除两头空格：str = str.replace(/^\\s*|\\s*$/g, '');\n去除左空格：str = str.replace(/^\\s*/, '');\n取出右空格：str = str.replace(/(\\s*$)/g, '');")]),a._v(" "),t("p",[a._v("str 为要去除空格的字符串")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var str = ' 23  23 ';\nvar str2 = str.replace(/\\s*/g, '');\nconsole.log(str2); // 2323\n")])])]),t("ol",{attrs:{start:"2"}},[t("li",[a._v("使用 str.trim()方法\ntrim()方法有局限性，无法去除中间的空格")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var str = "     xiao    ming    ";\nvar str2 = str.trim();\nconsole.log(str2); // xiao    ming\n')])])]),t("p",[a._v("同理，str.trimLeft()，str.trimRight()分别用于去除字符串左右空格")]),a._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[a._v("使用 jQuery,$trim(str)方法同上，同样也无法去除中间的空格")])]),a._v(" "),t("h2",{attrs:{id:"如何获取浏览器-url-中查询字符串中的参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何获取浏览器-url-中查询字符串中的参数"}},[a._v("#")]),a._v(" 如何获取浏览器 url 中查询字符串中的参数")]),a._v(" "),t("p",[a._v("测试地址：http://www.runoob.com/jquery/misc-trim.html?channelid=12333&name=xiaoming&age=23")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function showWindowHref (){\n  const Shref = window.location.href;\n  const args = Shref.split('?');\n  if(args[0] == Shref) return '';\n  var arr = args[1].split('&');\n  var obj = {};\n  arr.forEach(item => {\n    const arg = item.split('=')\n    obj[arg[0]] = arg[1]\n  })\n  return obj;\n}\nvar href = showWindowHref();\nconsole.log(href['name'])\n")])])]),t("h2",{attrs:{id:"js-字符串操作函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js-字符串操作函数"}},[a._v("#")]),a._v(" js 字符串操作函数")]),a._v(" "),t("ul",[t("li",[a._v("concat() 将两个或多个字符的文本组合起来，返回一个新字符串")]),a._v(" "),t("li",[a._v("indexOf() 返回字符串中一个子串第一处出现的索引。如果没有匹配项，返回-1。")]),a._v(" "),t("li",[a._v("charAt() 返回指定位置的字符。")]),a._v(" "),t("li",[a._v("lastIndexOf() 返回字符串中一个子串最后一处出现的索引，如果没有匹配项，返回-1。")]),a._v(" "),t("li",[a._v("match() 检查一个字符串是否匹配一个正则表达式")]),a._v(" "),t("li",[a._v("substr() 返回从 string 的 startPos 位置，长度为 length 的字符串")]),a._v(" "),t("li",[a._v("substring() 返回字符串的一个子串，传入参数是其实位置和结束位置")]),a._v(" "),t("li",[a._v("slice() 提取字符串的一部分，并返回一个新字符串")]),a._v(" "),t("li",[a._v("replace() 用来查找匹配一个正则表达式的字符串，然后使用新字符串代替匹配的字符串")]),a._v(" "),t("li",[a._v("search() 执行一个正则表达式匹配查找。如果查找成功，返回字符串中匹配的索引值。否则返回-1")]),a._v(" "),t("li",[a._v("split() 通过将字符串划分成子串，将一个字符串做成一个字符串数组")])]),a._v(" "),t("h2",{attrs:{id:"怎样添加、移除、移动、复制、创建、查找节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#怎样添加、移除、移动、复制、创建、查找节点"}},[a._v("#")]),a._v(" 怎样添加、移除、移动、复制、创建、查找节点")]),a._v(" "),t("ul",[t("li",[a._v("创建新节点")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("createDocumentFragment() // 创建一个DOM片段\ncreateElement() // 创建一个具体的元素\ncreateTextNode() // 创建一个文本节点\n")])])]),t("ul",[t("li",[a._v("添加、移除、替换、插入")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("appendChild() // 添加\nremoveChild() // 移除\nreplaceChild() // 替换\ninsertBefore() // 插入\n")])])]),t("ul",[t("li",[a._v("查找")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("getElementByTagName() // 通过标签名称\ngetElementByName() // 通过元素的Name属性的值\ngetElementById() // 通过元素Id， 唯一性\n")])])]),t("h2",{attrs:{id:"写出三个使用-this-的典型应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#写出三个使用-this-的典型应用"}},[a._v("#")]),a._v(" 写出三个使用 this 的典型应用")]),a._v(" "),t("ul",[t("li",[a._v("在 html 元素事件属性中使用")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('<input type="button" onclick="showInfo(this)" value="点击一下" />\n')])])]),t("ul",[t("li",[a._v("构造函数")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function Animal(name, color) {\n  this.name = name;\n  this.color = color;\n}\n")])])]),t("ul",[t("li",[a._v("input 点击获取值")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('<input type="button" id="text" value="点击一下" />\n<script>\n  var btn = document.getElementById(\'text\');\n  btn.onclick = function(){\n    alert(this.value); // 此处的this是按钮元素\n  }\n<\/script>\n')])])]),t("ul",[t("li",[a._v("apply()/call()求数组最值")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var numbers = [5, 458, 120, -25];\nvar maxInNumbers = Math.max.apply(this, numbers);\nconsole.log(maxInNumbers); // 458\nvar maxInNumbers = Math.max.call(this,5, 458 , 120 , -215);\nconsole.log(maxInNumbers);  // 458\n")])])]),t("h2",{attrs:{id:"比较-typeof-与-instanceof"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#比较-typeof-与-instanceof"}},[a._v("#")]),a._v(" 比较 typeof 与 instanceof")]),a._v(" "),t("p",[a._v("相同点： js 中 typeof 和 instanceof 常用来判断一个变量是否为空，或者是什么类型的。")]),a._v(" "),t("ol",[t("li",[a._v("typeof 一般只能返回如下几个结果： number boolean string function object undefined")]),a._v(" "),t("li",[a._v('typeof 来获取一个变量是否存在，如 if(typeof a !== "undefined"){alert("ok")},而不要去使用 if(a)因为如果 a 不存在则会出错。')]),a._v(" "),t("li",[a._v("对于 Array，Null 等特殊对象使用 typeof 一律返回，这正是 typeof 的局限性。")])]),a._v(" "),t("p",[a._v("instanceof 用于判断一个变量是否属于某个对象的实例。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var a = new Array();\nalert(a instanceof Array); // true\nalert(a instanceof Object); // true\n")])])]),t("p",[a._v("如上，会返回 true，同时 alert(a instanceof Object) 也会返回 true;这是因为 Array 是 object 的子类。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function test(){};\nvar a = new test();\nalert(a instanceof test)   // true\n")])])]),t("p",[a._v("如下，得到的结果为‘N’,这里的 instanceof 测试的 object 是指 js 语法中的 object，不是指 dom 模型对象。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("if (window instanceof Object){ alert('Y')} else {  alert('N');}  // 'N'\n")])])]),t("h2",{attrs:{id:"如何理解闭包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何理解闭包"}},[a._v("#")]),a._v(" 如何理解闭包")]),a._v(" "),t("ul",[t("li",[a._v("定义和用法：当一个函数的返回值是另一个函数，而返回的那个函数如果调用了其父函数内部的其他变量，如果返回的这个函数在外部被执行，就产生了闭包。")]),a._v(" "),t("li",[a._v("表现形式：使函数外部能够调用函数内部定义的变量")]),a._v(" "),t("li",[a._v("实例如下：\n"),t("ol",[t("li",[a._v("根据作用域的规则，底层作用域没有声明的变量，会向上一级找，找到就返回，没找到就一直找，直到 window 的变量，没有就返回 undefined。这里明显 count 是函数内部的 flag2 的那个 count")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var count = 10; // 全局作用域，标记为flag1\nfunction add(){\n  var count = 0;\n  return function (){\n    count+=1;\n    alert(count);\n  }\n}\nvar s = add()\ns(); //输出1\ns(); //输出2\n")])])])]),a._v(" "),t("li",[a._v("变量的作用域")])]),a._v(" "),t("p",[a._v("特点：")]),a._v(" "),t("ol",[t("li",[a._v("函数内部可以读取函数外部的全局变量，在函数外部无法读取函数内的局部变量")]),a._v(" "),t("li",[a._v("函数内部声明变量的时候，一定要使用 var 命令，不用的话其实是声明了一个全局变量。当然 let 也可以。")])]),a._v(" "),t("ul",[t("li",[a._v("使用闭包的注意点")])]),a._v(" "),t("ol",[t("li",[a._v("滥用闭包，会造成内存泄露：由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在 IE 中可能导致内存泄漏。解决办法是，在退出函数之前，将不使用的局部变量全部删除掉。")]),a._v(" "),t("li",[a._v("会改变复函数内部变量的值，所以，如果你把复函数当做对象使用，把闭包当做他的公用方法，把内部变量当做他的私有属性，这时一定要小心，不要随便改变复函数内部变量的值。")])]),a._v(" "),t("h2",{attrs:{id:"什么事跨域-跨域请求资源的方法有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么事跨域-跨域请求资源的方法有哪些"}},[a._v("#")]),a._v(" 什么事跨域？跨域请求资源的方法有哪些？")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("什么是跨域由于路由器的同源策略，凡是发送请求 utl 的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域。")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("网络协议不同，如 http 协议访问 https 协议。")])]),a._v(" "),t("li",[t("p",[a._v("端口不同，如 80 端口访问 8080 端口。")])]),a._v(" "),t("li",[t("p",[a._v("域名不同，如 qianduanblog.com 访问 baidu.com。")])]),a._v(" "),t("li",[t("p",[a._v("子域名不同，如 abc.qianduanblog.com 访问 def.qianduanblog.com。")])]),a._v(" "),t("li",[t("p",[a._v("域名和域名对应 ip,如 www.a.com 访问 20.205.28.90.")])])])]),a._v(" "),t("li",[t("p",[a._v("跨域请求资源的方法")])])]),a._v(" "),t("ol",[t("li",[a._v("proxy 代理")])]),a._v(" "),t("p",[a._v("定义和用法：proxy 代理用于将请求发送给后台服务器，通过服务器来发送请求，然后将请求的结果传递给前端。")]),a._v(" "),t("p",[a._v("实现方法：通过 nginx 代理；")]),a._v(" "),t("p",[a._v("注意点：1、如果你代理的是 https 协议的请求，那么你的 proxy 首先需要信任该证书（尤其是自定义证书）或者忽略证书检查，否则你的请求无法成功。")]),a._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[a._v("CORS 【Cross-Origin Resource Sharing】")])]),a._v(" "),t("p",[a._v("定义和用法：是现代浏览器支持跨域资源请求的一种最常用的方式。")]),a._v(" "),t("p",[a._v("使用方法：一般需要后端人员在处理请求数据的时候，添加允许跨域的相关操作。如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("res.writeHead(200, {\n    \"Content-Type\": \"text/html; charset=UTF-8\",\n    \"Access-Control-Allow-Origin\":'http://localhost',\n    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n    'Access-Control-Allow-Headers': 'X-Requested-With, Content-Type'\n});\n")])])]),t("ol",{attrs:{start:"3"}},[t("li",[a._v("jsonp")])]),a._v(" "),t("p",[a._v("定义和用法：通过动态插入一个 script 标签。浏览器对 script 的资源引用没有同源限制，同时资源加载到页面后会立即执行（没有阻塞的情况下）。")]),a._v(" "),t("p",[a._v("特点：通过情况下，通过动态创建 script 来读取他域的动态资源，获取的数据一般为 json 格式。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('<script>\n    function testjsonp(data) {\n       console.log(data.name); // 获取返回的结果\n    }\n<\/script>\n<script>\n    var _script = document.createElement(\'script\');\n    _script.type = "text/javascript";\n    _script.src = "http://localhost:8888/jsonp?callback=testjsonp";\n    document.head.appendChild(_script);\n<\/script>\n')])])]),t("p",[a._v("缺点：")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("这种方式无法发送 post 请求（这里）")])]),a._v(" "),t("li",[t("p",[a._v("另外要确定 jsonp 的请求是否失败并不容易，大多数框架的实现都是结合超时时间来判定。")])])]),a._v(" "),t("h2",{attrs:{id:"谈谈垃圾回收机制及内存管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#谈谈垃圾回收机制及内存管理"}},[a._v("#")]),a._v(" 谈谈垃圾回收机制及内存管理")]),a._v(" "),t("p",[a._v("回收机制方式")]),a._v(" "),t("ol",[t("li",[a._v("定义：垃圾回收机制，执行环境负责管理代码执行过程中使用的内存。")]),a._v(" "),t("li",[a._v("原理：垃圾收集器(周期性)会定期找出那些不再继续适用的变量，然后释放其内存。但是这个过程不是实时的，因为其开销大，所以垃圾回收器会按照固定的时间间隔周期性执行。")]),a._v(" "),t("li",[a._v("实例：")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function fn1 (){\n  var obj = { name: 'hahaha', age: 10};\n}\nfunction fn2 (){\n  var obj = { name: 'hahaha', age: 10};\n  return obj;\n}\nvar a = fn1();\nvar b = fn2();\n")])])]),t("p",[a._v("fn1 中定义的 obj 为局部变量，而当调用结束后，出了 fn1 的环境，那么该内存会被 js 引擎中的垃圾回收器自动释放；在 fn2 被调用的过程中，返回的对象呗全局变量 b 所指向，所以该快内存并不会被释放。")]),a._v(" "),t("ol",[t("li",[a._v("标记回收策略： 标记清除(较为常用)和引用计数。")])]),a._v(" "),t("p",[a._v("标记清除：")]),a._v(" "),t("p",[a._v("定义和用法：当变量进入环境时，将变量标记“进入环境”，当变量离开环境时，比较为：“离开环境”。某一个时刻，垃圾回收器会过滤掉环境中的变量，以及被环境变量引用的变量，剩下的就是被视为准备回收的变量。")]),a._v(" "),t("p",[a._v("到目前为止 IE，Firefox，opera，chrome，Safari 实现使用的都是标记清除的垃圾回收策略或类似的策略，只不过垃圾收集的时间间隔互不相同。")]),a._v(" "),t("p",[a._v("引用计数：")]),a._v(" "),t("p",[a._v("定义和用法：引用计数是跟踪记录每个值被引用的次数。基本原理：就是变量的引用次数，被引用一次则加一，当这个引用计数为 0 时，被视为准备回收的对象。")]),a._v(" "),t("p",[a._v("内存管理：")]),a._v(" "),t("p",[a._v("什么时候触发垃圾回收？")]),a._v(" "),t("ol",[t("li",[a._v("垃圾回收器周期性运行，如果分配的内存非常多，那么回收工作也会很艰巨，确定垃圾回收时间间隔就变成了一个值得思考的问题。")])]),a._v(" "),t("p",[a._v("IE6 的垃圾回收是根据内存分配量运行的，当环境中的变量，对象，字符串达到一定数量时触发垃圾回收。垃圾回收器一直处于工作状态，严重影响浏览器性能。")]),a._v(" "),t("p",[a._v("IE7 中，垃圾回收器会根据内存分配量与程序占用内存的比例进行动态调整，开始回收工作。")]),a._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[a._v("合理的 GC 方案： (1) 遍历所有可访问的对象；(2) 回收已不可访问的对象。")]),a._v(" "),t("li",[a._v("GC 缺陷： (1) 停止响应其他操作。")]),a._v(" "),t("li",[a._v("GC 优惠策略：(1) 分代回收(Generation GC);(2) 增量 GC；")])]),a._v(" "),t("h2",{attrs:{id:"开发过程中遇见的内存泄漏情况-如何解决的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开发过程中遇见的内存泄漏情况-如何解决的"}},[a._v("#")]),a._v(" 开发过程中遇见的内存泄漏情况，如何解决的？")]),a._v(" "),t("ol",[t("li",[a._v("定义：")])]),a._v(" "),t("p",[a._v("内存泄漏是指一块被分配的内存既不能使用，又不能回收，知道浏览器进程结束。C#和 JAVA 等语言采用了自动垃圾回收方法管理内存，机会不会发生内存泄露。我们知道，浏览器中也是采用自动垃圾回收方法管理内存，但由于浏览器垃圾回收方法有 bug，会产生内存泄露。")]),a._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[t("p",[a._v("内存泄漏的几种情况：")])]),a._v(" "),t("li",[t("p",[a._v("当页面中的元素被移除或替换时，若元素绑定的事件仍没被移除，在 IE 中不会做出恰当处理，此时要先手工移除事件，不然会存在内存泄漏。")])])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('<div id="myDiv">\n  <input type="button" value="Click me" id="myBtn" />\n</div>\n<script>\n  var btn = document.getElementById("myBtn")\n  btn.onclick = function () {\n    document.getElementById("myDiv").innerHTMl = "processing...";\n  }\n<\/script>\n')])])]),t("p",[a._v("解决方法是：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('<div id="myDiv">\n  <input type="button" value="Click me" id="myBtn" />\n</div>\n<script>\n  var btn = document.getElementById("myBtn")\n  btn.onclick = function () {\n    btn.onclick = null;\n    document.getElementById("myDiv").innerHTMl = "processing...";\n  }\n<\/script>\n')])])]),t("ol",{attrs:{start:"2"}},[t("li",[a._v("由于是函数内定义函数，并且内部函数--时间回调的引用外暴了，形成了闭包。闭包可以维持函数内局部变量，使其得不到释放。")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function btnEvent(){\n  var obj = document.createElement('XXX');\n  obj.onclick = function () {\n    // Even if it's a empty function\n  }\n}\n")])])]),t("p",[a._v("解决方法：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('function bindEvent(){\n    var obj=document.createElement("XXX");\n    obj.onclick=function(){\n         //Even if it\'s a empty function\n    }\n    obj=null;\n}\n')])])]),t("h2",{attrs:{id:"javascript-面向对象中继承实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javascript-面向对象中继承实现"}},[a._v("#")]),a._v(" JavaScript 面向对象中继承实现？")]),a._v(" "),t("p",[a._v("面向对象的基本特诊有：封闭，继承，多态。")]),a._v(" "),t("p",[a._v("在 JavaScript 中实现继承的方法：")]),a._v(" "),t("ol",[t("li",[a._v("原型链(prototype chaining)")]),a._v(" "),t("li",[a._v("call()/apply()")]),a._v(" "),t("li",[a._v("混合方式(prototype 和 call()/apply()结合)")]),a._v(" "),t("li",[a._v("对象冒充")])]),a._v(" "),t("p",[a._v("继承方法：")]),a._v(" "),t("ol",[t("li",[a._v("proto 原型链方式：")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('function teacher(name) {\n  this.name = name;\n}\nteacher.prototype.sayName = function(){\n  console.log("name is" + this.name);\n}\nvar teacher1 = new teacher("xiaoming");\nteacher1.sayName();\n\nfunction student(name) {\n  this.name = name;\n}\nstudent.prototype = new teacher();\nvar student1 = new student("xiaolan");\nstudent1.sayName();\n// name is xiaoming\n// name is xiaolan\n')])])]),t("ol",{attrs:{start:"2"}},[t("li",[a._v("call()/apply()方法")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function teacher(name, age) {\n  this.name = name;\n  this.age = age;\n  this.sayhi = function () {\n    alert('name' + name + \", age:\" + age);\n  }\n}\nfunction student () {\n  var args = arguments;\n  teacher.call(this, args[0], args[1]);\n  // teacher.apply(this, arguments);\n}\n\nvar teacher1 = new teacher('xiaoming', 23);\nteacher1.sayhi();\n\nvar student1 = new student('xiaolan', 12);\nstudent1.sayhi();\n\n// alert: name:xiaoming, age: 23;\n// alert: name:xiaolan, age: 12;\n")])])]),t("ol",{attrs:{start:"3"}},[t("li",[a._v("混合方法[prototype, call/apply]")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("  function teacher(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n  teacher.prototype.sayName = function (){\n    console.log('name' + this.name);\n  }\n  teacher.prototype.sayAge = function(){\n    console.log('age' + this.age);\n  }\n  function student() {\n    var args = arguments;\n    teacher.call(this, args[0], args[1]);\n  }\n  student.prototype = new teacher();\n\n  var student1 = new student('xiaolin', 23);\n  student1.sayName();\n  student1.sayAge();\n  // name:xiaolin\n  // age:23\n")])])]),t("ol",{attrs:{start:"4"}},[t("li",[a._v("对象冒充")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('function Person(name, age) {\n  this.name = name;\n  this.age = age;\n  this.show = function (){\n    console.log(this.name + ", " + this.age);\n  }\n}\n\nfunction Student(name, age) {\n  this.student = Person; // 将Person类的构造函数赋值给this.student\n  this.student(name, age); // js中实际上是通过对象冒充来实现继承的\n  delete this.student;\n}\n\nvar S = new Student("小明", 17);\ns.show();\n\nvar P = new Person("小花", 18);\np.show();\n// 小明，17\n// 小花，18\n')])])]),t("h1",{attrs:{id:"javascript-相关程序计算题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javascript-相关程序计算题"}},[a._v("#")]),a._v(" JavaScript 相关程序计算题")]),a._v(" "),t("h2",{attrs:{id:"判断一个字符串中出现次数最多的字符-统计这个次数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#判断一个字符串中出现次数最多的字符-统计这个次数"}},[a._v("#")]),a._v(" 判断一个字符串中出现次数最多的字符，统计这个次数")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var str = \"asdfssaaasasasasaa\";\nvar json = {};\nfor(let i = 0;i < str.length;i++){\n  if (!json[str.charAt(i)]) {\n    json[str.charAt(i)] = 1;\n  }else {\n    json[str.charAt(i)]++;\n  }\n}\nvar iMax = 0;\nvar iIndex = '';\nfor(var i in json){\n  if(json[i]>iMax){\n    iMax = json[i];\n    iIndex = i;\n  }\n}\n\nconsole.log('出现次数最多的是：' + iIndex + '出现' +  iMax + '次')\n\n// 出现次数最多的是：a出现9次\n")])])]),t("h1",{attrs:{id:"javascript-数组对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javascript-数组对象"}},[a._v("#")]),a._v(" JavaScript 数组对象")]),a._v(" "),t("h2",{attrs:{id:"array-相关的属性和方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array-相关的属性和方法"}},[a._v("#")]),a._v(" Array 相关的属性和方法")]),a._v(" "),t("p",[a._v("Array 对象属性")]),a._v(" "),t("p",[a._v("constructor 返回对创建此对象的数组函数的引用")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var test = new Array()\n\nif(test.constructor == Array) {\n  console.log("this is an Array");\n}\nif(test.constructor == Boolean) {\n  console.log("this is a Boolean");\n}\nif(test.constructor == Date) {\n  console.log("this is a Date");\n}\nif(test.constructor == String) {\n  console.log("this is a String");\n}\n')])])]),t("p",[a._v("Array 对象方法")]),a._v(" "),t("p",[a._v("concat()连接两个或更多的数组，并返回结果。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var arr = [1,2,3,4];\nvar arr2 = [5,6,7,8];\nvar arr3 = arr.concat(arr2);\nconsole.log(arr3); // [1, 2, 3, 4, 5, 6, 7, 8]\n")])])]),t("p",[a._v("join()把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分割。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var arr = ['xiao','lin','qiqi','mingtian'];\nvar arr2 = arr.join(',');\nconsole.log(arr2); // 根据','隔开返回的字符串为：\"xiao,lin,qiqi,mingtian\"\n")])])]),t("p",[a._v("pop()删除并返回数组的最后一个元素")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var arr = [2,3,4,5];\nvar arr2 = arr.pop();\nconsole.log(arr2); // 删除的数组的最后一个元素为：5\nconsole.log(arr); // 删除元素之后的数组为： [2,3,4]\n")])])]),t("p",[a._v("shift() 删除并返回数组的第一个元素")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var arr = [2,3,4,5];\nvar arr2 = arr.shift();\nconsole.log(arr2); // 删除的数组的第一个元素为：2\nconsole.log(arr);  // 删除元素之后的数组为：[3, 4，5]\n")])])]),t("p",[a._v("push() 向数组的末尾添加一个或更多元素，并返回新的长度。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var arr = [2,3,4,5];\nvar arr2 = arr.push(6);\nconsole.log(arr2);  // 返回的数组长度：5\nconsole.log(arr);  // [2, 3, 4, 5, 6]\n")])])]),t("p",[a._v("unshift() 向数组的开头添加一个或更多元素，并返回新的长度。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var arr = ['xiao','ming','qiqi','aiming'];\nvar arr1 = arr.unshift('lang');\nconsole.log(arr1);  // 返回的数组的长度：  5\nconsole.log(arr);  //向数组开头添加元素返回的结果：[\"lang\", \"xiao\", \"ming\", \"qiqi\", \"aiming\"]\n")])])]),t("p",[a._v("reverse() 颠倒数组中元素的顺序。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var arr = [2,3,4,5];\narr.reverse();\nconsole.log(arr);   //  [5, 4, 3, 2]\n")])])]),t("p",[a._v("slice() 从某个已有的数组返回选定的元素")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var arr = [2,3,4,5];\nvar arr2 = arr.slice(1,3);\nconsole.log(arr2);  // 截取区间返回的数组为：[3, 4]\nconsole.log(arr);  // [2, 3, 4, 5]\n")])])]),t("p",[a._v("sort() 对数组的元素进行排序")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("借助排序函数，实现数值由小到大排序\nfunction sortNumber(a,b){\n    return a - b\n}\nvar arr = [23,30,42,5];\nvar arr2 = arr.sort(sortNumber);\nconsole.log(arr2);  // [5, 23, 30, 42]\nconsole.log(arr);   // [5, 23, 30, 42]\n\n借助排序函数，实现数值由大到小排序\nfunction sortNumber(a,b){\n    return b - a\n}\nvar arr = [23,30,42,5];\nvar arr2 = arr.sort(sortNumber);\nconsole.log(arr2);  // [42, 30, 23, 5]\nconsole.log(arr);  // [42, 30, 23, 5]\n")])])]),t("p",[a._v("splice() 删除元素，并向数组添加新元素。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("语法:arrayObject.splice(index,howmany,item1,.....,itemX)\nindex:必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。\nhowmany:必需。要删除的项目数量。如果设置为 0，则不会删除项目。\nitem1, ..., itemX:可选。向数组添加的新项目。\n\n// 创建一个新数组，并向其添加一个元素\nvar arr = [1,2,3,4];\narr.splice(2,0,5);\nconsole.log(arr);  // [1, 2, 5, 3, 4]\n\n// 删除位于 index 2 的元素，并添加一个新元素来替代被删除的元素：\nvar arr = [1,2,3,4];\narr.splice(2,1,5);\nconsole.log(arr);  // [1, 2, 5, 4]\n")])])]),t("p",[a._v("toSource() 返回该对象的源代码。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('浏览器支持\n只有 Gecko 核心的浏览器（比如 Firefox）支持该方法，也就是说 IE、Safari、Chrome、Opera 等浏览器均不支持该方法。\n<script type="text/javascript">\nfunction employee(name,job,born){\n    this.name=name;\n    this.job=job;\n    this.born=born;\n}\nvar bill = new employee("Bill Gates","Engineer",1985);\ndocument.write(bill.toSource());\n<\/script>\n输出：({name:"Bill Gates", job:"Engineer", born:1985})\n')])])]),t("p",[a._v("toString() 把数组转换为字符串，并返回结果。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var arr = ['xiao','ming','qiqi','aiming'];\narr.toString();\nconsole.log(arr);  // [\"xiao\", \"ming\", \"qiqi\", \"aiming\"]\n")])])]),t("p",[a._v("toLocaleString() 把数组转换为本地数组，并返回结果。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var arr = ['xiao','ming','qiqi','aiming'];\narr.toLocaleString();\nconsole.log(arr);  // [\"xiao\", \"ming\", \"qiqi\", \"aiming\"]\n")])])]),t("p",[a._v("valueOf() 返回数组对象的原始值")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var arr = ['xiao','ming','qiqi','aiming'];\narr.valueOf('lang');\nconsole.log(arr); // [\"xiao\", \"ming\", \"qiqi\", \"aiming\"]\n")])])]),t("h2",{attrs:{id:"数组去重"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组去重"}},[a._v("#")]),a._v(" 数组去重")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var arr = [0,2,3,4,4,0,2];\nvar obj = {};\nvar tmp = [];\nfor(var i =0;i<arr.length;i++){\n  if(!obj[arr[i]]){\n    obj[arr[i]] = 1;\n    tmp.push(arr[i]);\n  }\n}\nconsole.log(tmp); // [0, 2, 3, 4]\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var arr = [2,3,4,4,5,2,3,6],\n   arr2 = [];\nfor(var i = 0;i< arr.length;i++){\n    if(arr2.indexOf(arr[i]) < 0){\n        arr2.push(arr[i]);\n    }\n}\nconsole.log(arr2);\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var arr = [2,3,4,4,5,2,3,6];\nvar arr2 = arr.filter(function(element,index,self){\nreturn self.indexOf(element) === index;\n});\nconsole.log(arr2);\n")])])]),t("h2",{attrs:{id:"求数组的最值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#求数组的最值"}},[a._v("#")]),a._v(" 求数组的最值")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("求数组最大值:Math.max.apply(null,arr);\nvar arr = [3,43,23,45,65,90];\nvar max = Math.max.apply(null,arr);\nconsole.log(max);\n// 90\n求数组最小值：Math.min.apply(null,arr);\nvar arr = [3,43,23,45,65,90];\nvar min = Math.min.apply(null,arr);\nconsole.log(min);\n// 3\n")])])]),t("p",[a._v("方法二：Array.max = function(arr){} / Array.min = function(arr){}")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var array = [3,43,23,45,65,90];\n\nArray.max = function( array ){\n   return Math.max.apply( Math, array );\n};\nArray.min = function( array ){\n   return Math.min.apply( Math, array );\n};\n\nvar max = Array.max(array);\nconsole.log(max);  // 90\n\nvar min = Array.min(array);\nconsole.log(min);  // 3\n")])])]),t("p",[a._v("方法三：Array.prototype.max = function(){};Array.prototype.min = function(){};")]),a._v(" "),t("ul",[t("li",[a._v("求数组最大值(基本思路：将数组中的第一个赋值赋给变量 max，将数组进行循环与 max 进行比较，将数组中的大值赋给 max，最后返回 max)")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var arr = [3,43,23,45,65,90];\nArray.prototype.max = function () {\n  var max = this[0];\n  var len = this.length;\n  for(var i = 0;i < len;i++>){\n    if(this[i] > max) {\n      max = this[i];\n    }\n  }\n  return max;\n}\nvar max = arr.max();\nconsole.log(max); // 90\n")])])]),t("ul",[t("li",[a._v("求数组最小值")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var arr = [3,43,23,45,65,90];\nArray.prototype.min = function () {\n  var min = this[0];\n  var len = this.length;\n  for(var i = 0;i < len;i++>){\n    if(this[i] < min) {\n      min = this[i];\n    }\n  }\n  return min\n}\nvar min = arr.min()\nconsole.log(min); // 3\n")])])]),t("h2",{attrs:{id:"数组排序相关"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组排序相关"}},[a._v("#")]),a._v(" 数组排序相关")]),a._v(" "),t("p",[a._v("排序详细可查看：https://github.com/wu529778790/study/tree/master/sort")]),a._v(" "),t("p",[a._v("结合 sort 和函数排序：")]),a._v(" "),t("p",[a._v("数组有小到大排序，sort，sortnum")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var arr = [3,43,23,45,65,90];\nfunction sortnum(a, b) {\n  return a- b;\n}\narr = arr.sort(sortnum);\nconsole.log(arr); // [3, 23, 43, 45, 65, 90]\n")])])]),t("p",[a._v("数组由大到小排序")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var arr = [3,43,23,45,65,90];\nfunction sortnum(a,b){\n　　return a+b;\n}\narr = arr.sort(sortnum);\nconsole.log(arr);\n// [90, 65, 45, 23, 43, 3]\n")])])]),t("p",[a._v("冒泡排序：即实现数组由小到大进行排序；思路为：每次比较相邻的两个数，如果后一个比前一个小，换位置。如果要实现由大到小排序，使用 reverse()即可；")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var arr = [3, 1, 4, 6, 5, 7, 2];\nfunction bubbleSort(arr) {\n    var len = arr.length;\n    for (var i = len; i >= 2; --i) {\n        for (var j = 0; j < i - 1; j++) {\n            if (arr[j + 1] < arr[j]) {\n                var temp;\n                temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n    return arr;\n}\n\nvar arr2 = bubbleSort(arr);\nconsole.log(arr2);  // [1, 2, 3, 4, 5, 6, 7]\nvar arr3 = arr2.reverse();\nconsole.log(arr3);  //  [7, 6, 5, 4, 3, 2, 1]\n")])])]),t("p",[a._v("快速排序：采用二分法，去除中间数，数组每次和中间数比较，小的放到左边，大的放右边。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var arr = [3, 1, 4, 6, 5, 7, 2];\nfunction quickSort(arr){\n  if(arr.length == 0){\n    return []; // 返回空数组\n  }\n  var cIndex = Math.floor(arr.length / 2);\n  var c = arr.splice(cIndex, 1);\n  var l = [];\n  var r = [];\n\n  for(var i = 0;i < arr.length; i++) {\n    if(arr[i] < c) {\n      l.push(arr[i])\n    }else {\n      r.push(arr[i])\n    }\n  }\n  return quickSort(l).concat(c, quickSort(r));\n}\n\nconsole.log(quickSort(arr));\n")])])]),t("p",[a._v("##数组的翻转(非 reverse())")]),a._v(" "),t("p",[a._v("方法一：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var arr = [1,2,3,4];\nvar arr2 = [];\nwhile(arr.length) {\n  var num = arr.pop(); // 删除数组最后一个元素并返回被删除的元素\n  arr2.push(num);\n}\nconsole.log(arr2);\n")])])]),t("p",[a._v("方法二：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var arr = [1,2,3,4];\nvar arr2 = [];\nwhile(arr.length) {\n  var num = arr.shift(); // 删除数组第一个元素并返回被删除的元素\n  arr2.unshift(num);\n}\n")])])]),t("h1",{attrs:{id:"jquery-相关"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jquery-相关"}},[a._v("#")]),a._v(" jQuery 相关")]),a._v(" "),t("ol",[t("li",[a._v("jQuery 库中的 $() 是什么？")])]),a._v(" "),t("p",[a._v("$() 函数是 jQuery() 函数的别称。$() 函数用于将任何对象包裹成 jQuery 对象，接着你就被允许调用定义在 jQuery 对象上的多个不同方法。你可以将一个选择器字符串传入 $() 函数，它会返回一个包含所有匹配的 DOM 元素数组的 jQuery 对象。")]),a._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[a._v("如何找到所有 HTML select 标签的选中项？")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$('[name=selectname] :selected')\n")])])]),t("ol",{attrs:{start:"3"}},[t("li",[a._v("$(this) 和 this 关键字在 jQuery 中有何不同？")])]),a._v(" "),t("p",[a._v("$(this) 返回一个 jQuery 对象，你可以对它调用多个 jQuery 方法，比如用 text() 获取文本，用 val() 获取值等等。")]),a._v(" "),t("p",[a._v("而 this 代表当前元素，它是 JavaScript 关键词中的一个，表示上下文中的当前 DOM 元素。你不能对它调用 jQuery 方法，直到它被 $() 函数包裹，例如 $(this)。")]),a._v(" "),t("ol",{attrs:{start:"4"}},[t("li",[a._v("jquery 怎么移除标签 onclick 属性？")])]),a._v(" "),t("p",[a._v('获得 a 标签的 onclick 属性: $("a").attr("onclick")')]),a._v(" "),t("p",[a._v('删除 onclick 属性：$("a").removeAttr("onclick");')]),a._v(" "),t("p",[a._v('设置 onclick 属性：$("a").attr("onclick","test();");')]),a._v(" "),t("ol",{attrs:{start:"5"}},[t("li",[a._v("jquery 中 addClass,removeClass,toggleClass 的使用。")])]),a._v(" "),t("p",[a._v("$(selector).addClass(class)：为每个匹配的元素添加指定的类名")]),a._v(" "),t("p",[a._v("$(selector).removeClass(class)：从所有匹配的元素中删除全部或者指定的类，删除 class 中某个值；")]),a._v(" "),t("p",[a._v("$(selector).toggleClass(class)：如果存在（不存在）就删除（添加）一个类")]),a._v(" "),t("p",[a._v("$(selector).removeAttr(class);删除 class 这个属性；")]),a._v(" "),t("ol",{attrs:{start:"6"}},[t("li",[a._v("JQuery 有几种选择器?")])]),a._v(" "),t("p",[a._v("(1)、基本选择器：#id，class,element,*;")]),a._v(" "),t("p",[a._v("(2)、层次选择器：parent > child，prev + next ，prev ~ siblings")]),a._v(" "),t("p",[a._v("(3)、基本过滤器选择器：:first，:last ，:not ，:even ，:odd ，:eq ，:gt ，:lt")]),a._v(" "),t("p",[a._v("(4)、内容过滤器选择器： :contains ，:empty ，:has ，:parent")]),a._v(" "),t("p",[a._v("(5)、可见性过滤器选择器：:hidden ，:visible")]),a._v(" "),t("p",[a._v("(6)、属性过滤器选择器：[attribute] ，[attribute=value] ，[attribute!=value] ，[attribute^=value] ，[attribute$=value] ，[attribute*=value]")]),a._v(" "),t("p",[a._v("(7)、子元素过滤器选择器：:nth-child ，:first-child ，:last-child ，:only-child")]),a._v(" "),t("p",[a._v("(8)、表单选择器： :input ，:text ，:password ，:radio ，:checkbox ，:submit 等；")]),a._v(" "),t("p",[a._v("(9)、表单过滤器选择器：:enabled ，:disabled ，:checked ，:selected")]),a._v(" "),t("ol",{attrs:{start:"7"}},[t("li",[a._v("jQuery 中的 Delegate()函数有什么作用？")])]),a._v(" "),t("p",[a._v("delegate()会在以下两个情况下使用到：")]),a._v(" "),t("p",[a._v("1、如果你有一个父元素，需要给其下的子元素添加事件，这时你可以使用 delegate()了，代码如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('$("ul").delegate("li", "click", function(){ $(this).hide(); });\n')])])]),t("p",[a._v("2、当元素在当前页面中不可用时，可以使用 delegate()")]),a._v(" "),t("ol",{attrs:{start:"8"}},[t("li",[a._v("$(document).ready()方法和 window.onload 有什么区别？")])]),a._v(" "),t("p",[a._v("(1)、window.onload 方法是在网页中所有的元素(包括元素的所有关联文件)完全加载到浏览器后才执行的。")]),a._v(" "),t("p",[a._v("(2)、$(document).ready() 方法可以在 DOM 载入就绪时就对其进行操纵，并调用执行绑定的函数。")]),a._v(" "),t("ol",{attrs:{start:"9"}},[t("li",[a._v("如何用 jQuery 禁用浏览器的前进后退按钮？")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('<script type="text/javascript" language="javascript">\n　　$(document).ready(function() {\n　　　　window.history.forward(1);\n  　　　　//OR window.history.forward(-1);\n　　});\n<\/script>\n')])])]),t("ol",{attrs:{start:"10"}},[t("li",[a._v("jquery 中$.get()提交和$.post()提交有区别吗？")])]),a._v(" "),t("p",[a._v("相同点：都是异步请求的方式来获取服务端的数据；")]),a._v(" "),t("p",[a._v("异同点：")]),a._v(" "),t("p",[a._v("1、请求方式不同：$.get() 方法使用 GET 方法来进行异步请求的。$.post() 方法使用 POST 方法来进行异步请求的。")]),a._v(" "),t("p",[a._v("2、参数传递方式不同：get 请求会将参数跟在 URL 后进行传递，而 POST 请求则是作为 HTTP 消息的实体内容发送给 Web 服务器的，这种传递是对用户不可见的。")]),a._v(" "),t("p",[a._v("3、数据传输大小不同：get 方式传输的数据大小不能超过 2KB 而 POST 要大的多")]),a._v(" "),t("p",[a._v("4、安全问题： GET 方式请求的数据会被浏览器缓存起来，因此有安全问题。")]),a._v(" "),t("ol",{attrs:{start:"11"}},[t("li",[a._v("写出一个简单的$.ajax()的请求方式？")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("$.ajax({\n    url:'http://www.baidu.com',\n    type:'POST',\n    data:data,\n    cache:true,\n    headers:{},\n    beforeSend：function(){},\n    success:function(){},\n    error:function(){},\n    complete:function(){}\n});\n")])])]),t("ol",{attrs:{start:"12"}},[t("li",[a._v("jQuery 的事件委托方法 bind 、live、delegate、on 之间有什么区别？")])]),a._v(" "),t("p",[a._v("(1)、bind 【jQuery 1.3 之前】")]),a._v(" "),t("p",[a._v("定义和用法：主要用于给选择到的元素上绑定特定事件类型的监听函数；")]),a._v(" "),t("p",[a._v("语法：bind(type,[data],function(eventObject))；")]),a._v(" "),t("p",[a._v("特点：")]),a._v(" "),t("p",[a._v("(1)、适用于页面元素静态绑定。只能给调用它的时候已经存在的元素绑定事件，不能给未来新增的元素绑定事件。")]),a._v(" "),t("p",[a._v("(2)、当页面加载完的时候，你才可以进行 bind()，所以可能产生效率问题。")]),a._v(" "),t("p",[a._v('实例如下：$( "#members li a" ).bind( "click", function( e ) {} );')]),a._v(" "),t("p",[a._v("(2)、live 【jQuery 1.3 之后】\n定义和用法：主要用于给选择到的元素上绑定特定事件类型的监听函数；")]),a._v(" "),t("p",[a._v("语法：live(type, [data], fn);")]),a._v(" "),t("p",[a._v("特点：")]),a._v(" "),t("p",[a._v("(1)、live 方法并没有将监听器绑定到自己(this)身上，而是绑定到了 this.context 上了。")]),a._v(" "),t("p",[a._v("(2)、live 正是利用了事件委托机制来完成事件的监听处理，把节点的处理委托给了 document，新添加的元素不必再绑定一次监听器。")]),a._v(" "),t("p",[a._v('(3)、使用 live（）方法但却只能放在直接选择的元素后面，不能在层级比较深，连缀的 DOM 遍历方法后面使用，即$(“ul”").live...可以，但$("body").find("ul").live...不行；')]),a._v(" "),t("p",[a._v('实例如下：$( document ).on( "click", "#members li a", function( e ) {} );')]),a._v(" "),t("p",[a._v("(3)、delegate 【jQuery 1.4.2 中引入】\n定义和用法：将监听事件绑定在就近的父级元素上")]),a._v(" "),t("p",[a._v("语法：delegate(selector,type,[data],fn)")]),a._v(" "),t("p",[a._v("特点：")]),a._v(" "),t("p",[a._v("(1)、选择就近的父级元素，因为事件可以更快的冒泡上去，能够在第一时间进行处理。")]),a._v(" "),t("p",[a._v("(2)、更精确的小范围使用事件代理，性能优于.live()。可以用在动态添加的元素上。")]),a._v(" "),t("p",[a._v("实例如下：")]),a._v(" "),t("p",[a._v('$("#info*table").delegate("td","click",function(){/*显示更多信息_/});')]),a._v(" "),t("p",[a._v('$("table").find("#info").delegate("td","click",function(){/'),t("em",[a._v("显示更多信息")]),a._v("/});")]),a._v(" "),t("p",[a._v("(4)、on 【1.7 版本整合了之前的三种方式的新事件绑定机制】\n定义和用法：将监听事件绑定到指定元素上。")]),a._v(" "),t("p",[a._v("语法：on(type,[selector],[data],fn)")]),a._v(" "),t("p",[a._v('实例如下：$("#info*table").on("click","td",function(){/*显示更多信息_/});参数的位置写法与 delegate 不一样。')]),a._v(" "),t("p",[a._v("说明：on 方法是当前 JQuery 推荐使用的事件绑定方法，附加只运行一次就删除函数的方法是 one()。")]),a._v(" "),t("p",[a._v("总结：.bind(), .live(), .delegate(),.on()分别对应的相反事件为：.unbind(),.die(), .undelegate(),.off()")]),a._v(" "),t("h1",{attrs:{id:"html-css"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#html-css"}},[a._v("#")]),a._v(" HTML && CSS")]),a._v(" "),t("ol",[t("li",[a._v("什么是盒子模型？")])]),a._v(" "),t("p",[a._v("在网页中，一个元素占有空间的大小由几个部分构成，其中包括元素的内容（content），元素的内边距（padding），元素的边框（border），元素的外边距（margin）四个部分。这四个部分占有的空间中，有的部分可以显示相应的内容，而有的部分只用来分隔相邻的区域或区域。4 个部分一起构成了 css 中元素的盒模型。")]),a._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[a._v("行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？")])]),a._v(" "),t("p",[a._v("行内元素：a、b、span、img、input、strong、select、label、em、button、textarea")]),a._v(" "),t("p",[a._v("块级元素：div、ul、li、dl、dt、dd、p、h1-h6、blockquote")]),a._v(" "),t("p",[a._v("空元素：即系没有内容的 HTML 元素，例如：br、meta、hr、link、input、img")]),a._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[a._v("CSS 实现垂直水平居中")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('<div class="wrapper">\n     <div class="content"></div>\n</div>\n.wrapper {\n    position: relative;\n    width: 500px;\n    height: 500px;\n    border: 1px solid red;\n }\n.content{\n    position: absolute;\n    width: 200px;\n    height: 200px;\n    /*top、bottom、left和right 均设置为0*/\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    /*margin设置为auto*/\n    margin:auto;\n    border: 1px solid green;\n}\n')])])]),t("ol",{attrs:{start:"4"}},[t("li",[a._v("简述一下 src 与 href 的区别")])]),a._v(" "),t("p",[a._v("href 是指向网络资源所在位置，建立和当前元素（锚点）或当前文档（链接）之间的链接，用于超链接。")]),a._v(" "),t("p",[a._v("src 是指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置；在请求 src 资源时会将其指向的资源下载并应用到文档内，例如 js 脚本，img 图片和 frame 等元素。")]),a._v(" "),t("p",[a._v("当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将 js 脚本放在底部而不是头部。")]),a._v(" "),t("ol",{attrs:{start:"5"}},[t("li",[a._v("简述同步和异步的区别")])]),a._v(" "),t("p",[a._v("同步是阻塞模式，异步是非阻塞模式。")]),a._v(" "),t("p",[a._v("同步就是指一个进程在执行某个请求的时候，若该请求需要一段时间才能返回信息，那么这个进程将会一直等待下去，直到收到返回信息才继续执行下去；")]),a._v(" "),t("p",[a._v("异步是指进程不需要一直等下去，而是继续执行下面的操作，不管其他进程的状态。当有消息返回时系统会通知进程进行处理，这样可以提高执行的效率。")]),a._v(" "),t("ol",{attrs:{start:"6"}},[t("li",[a._v("px 和 em 的区别")])]),a._v(" "),t("p",[a._v("相同点：px 和 em 都是长度单位；")]),a._v(" "),t("p",[a._v("异同点：px 的值是固定的，指定是多少就是多少，计算比较容易。em 得值不是固定的，并且 em 会继承父级元素的字体大小。")]),a._v(" "),t("p",[a._v("浏览器的默认字体高都是 16px。所以未经调整的浏览器都符合: 1em=16px。那么 12px=0.75em, 10px=0.625em。")]),a._v(" "),t("ol",{attrs:{start:"7"}},[t("li",[a._v("浏览器的内核分别是什么?")])]),a._v(" "),t("p",[a._v("IE: trident 内核")]),a._v(" "),t("p",[a._v("Firefox：gecko 内核")]),a._v(" "),t("p",[a._v("Safari：webkit 内核")]),a._v(" "),t("p",[a._v("Opera：以前是 presto 内核，Opera 现已改用 Google Chrome 的 Blink 内核")]),a._v(" "),t("p",[a._v("Chrome：Blink(基于 webkit，Google 与 Opera Software 共同开发)")]),a._v(" "),t("ol",{attrs:{start:"8"}},[t("li",[a._v("什么叫优雅降级和渐进增强？")])]),a._v(" "),t("p",[a._v("渐进增强 progressive enhancement：\n针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。")]),a._v(" "),t("p",[a._v("优雅降级 graceful degradation：\n一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。")]),a._v(" "),t("p",[a._v("区别：")]),a._v(" "),t("p",[a._v("a. 优雅降级是从复杂的现状开始，并试图减少用户体验的供给")]),a._v(" "),t("p",[a._v("b. 渐进增强则是从一个非常基础的，能够起作用的版本开始，并不断扩充，以适应未来环境的需要")]),a._v(" "),t("p",[a._v("c. 降级（功能衰减）意味着往回看；而渐进增强则意味着朝前看，同时保证其根基处于安全地带")]),a._v(" "),t("ol",{attrs:{start:"9"}},[t("li",[a._v("sessionStorage 、localStorage 和 cookie 之间的区别")])]),a._v(" "),t("p",[a._v("共同点：用于浏览器端存储的缓存数据")]),a._v(" "),t("p",[a._v("不同点：")]),a._v(" "),t("p",[a._v("(1)、存储内容是否发送到服务器端：当设置了 Cookie 后，数据会发送到服务器端，造成一定的宽带浪费；")]),a._v(" "),t("p",[a._v("web storage,会将数据保存到本地，不会造成宽带浪费；")]),a._v(" "),t("p",[a._v("(2)、数据存储大小不同：Cookie 数据不能超过 4K,适用于会话标识；web storage 数据存储可以达到 5M;")]),a._v(" "),t("p",[a._v("(3)、数据存储的有效期限不同：cookie 只在设置了 Cookid 过期时间之前一直有效，即使关闭窗口或者浏览器；")]),a._v(" "),t("p",[a._v("sessionStorage,仅在关闭浏览器之前有效；localStorage,数据存储永久有效；")]),a._v(" "),t("p",[a._v("(4)、作用域不同：cookie 和 localStorage 是在同源同窗口中都是共享的；sessionStorage 不在不同的浏览器窗口中共享，即使是同一个页面；")]),a._v(" "),t("ol",{attrs:{start:"10"}},[t("li",[a._v("Web Storage 与 Cookie 相比存在的优势：")])]),a._v(" "),t("p",[a._v("(1)、存储空间更大：IE8 下每个独立的存储空间为 10M，其他浏览器实现略有不同，但都比 Cookie 要大很多。")]),a._v(" "),t("p",[a._v("(2)、存储内容不会发送到服务器：当设置了 Cookie 后，Cookie 的内容会随着请求一并发送的服务器，这对于本地存储的数据是一种带宽浪费。而 Web Storage 中的数据则仅仅是存在本地，不会与服务器发生任何交互。")]),a._v(" "),t("p",[a._v("(3)、更多丰富易用的接口：Web Storage 提供了一套更为丰富的接口，如 setItem,getItem,removeItem,clear 等,使得数据操作更为简便。cookie 需要自己封装。")]),a._v(" "),t("p",[a._v("(4)、独立的存储空间：每个域（包括子域）有独立的存储空间，各个存储空间是完全独立的，因此不会造成数据混乱。")]),a._v(" "),t("ol",{attrs:{start:"11"}},[t("li",[a._v("Ajax 的优缺点及工作原理？")])]),a._v(" "),t("p",[a._v("定义和用法:")]),a._v(" "),t("p",[a._v("AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。Ajax 是一种用于创建快速动态网页的技术。Ajax 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。")]),a._v(" "),t("p",[a._v("传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。")]),a._v(" "),t("p",[a._v("优点：")]),a._v(" "),t("p",[a._v("1.减轻服务器的负担,按需取数据,最大程度的减少冗余请求")]),a._v(" "),t("p",[a._v("2.局部刷新页面,减少用户心理和实际的等待时间,带来更好的用户体验")]),a._v(" "),t("p",[a._v("3.基于 xml 标准化,并被广泛支持,不需安装插件等,进一步促进页面和数据的分离")]),a._v(" "),t("p",[a._v("缺点：")]),a._v(" "),t("p",[a._v("1.AJAX 大量的使用了 javascript 和 ajax 引擎,这些取决于浏览器的支持.在编写的时候考虑对浏览器的兼容性.")]),a._v(" "),t("p",[a._v("2.AJAX 只是局部刷新,所以页面的后退按钮是没有用的.")]),a._v(" "),t("p",[a._v("3.对流媒体还有移动设备的支持不是太好等")]),a._v(" "),t("p",[a._v("AJAX 的工作原理：")]),a._v(" "),t("p",[a._v("1.创建 ajax 对象（XMLHttpRequest/ActiveXObject(Microsoft.XMLHttp)）")]),a._v(" "),t("p",[a._v("2.判断数据传输方式(GET/POST)")]),a._v(" "),t("p",[a._v("3.打开链接 open()")]),a._v(" "),t("p",[a._v("4.发送 send()")]),a._v(" "),t("p",[a._v("5.当 ajax 对象完成第四步（onreadystatechange）数据接收完成，判断 http 响应状态（status）200-300 之间或者 304（缓存）执行回调函数")]),a._v(" "),t("ol",{attrs:{start:"12"}},[t("li",[a._v("请指出 document load 和 document ready 的区别？")])]),a._v(" "),t("p",[a._v("共同点：这两种事件都代表的是页面文档加载时触发。")]),a._v(" "),t("p",[a._v("异同点：")]),a._v(" "),t("p",[a._v("ready 事件的触发，表示文档结构已经加载完成（不包含图片等非文字媒体文件）。")]),a._v(" "),t("p",[a._v("onload 事件的触发，表示页面包含图片等文件在内的所有元素都加载完成。")]),a._v(" "),t("h2",{attrs:{id:"正则表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正则表达式"}},[a._v("#")]),a._v(" 正则表达式")]),a._v(" "),t("ol",[t("li",[a._v("写一个 function，清除字符串前后的空格。（兼容所有浏览器）")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('function trim(str) {\n    if (str && typeof str === "string") {\n        return str.replace(/(^\\s*)|(\\s*)$/g,""); //去除前后空白符\n    }\n}\n')])])]),t("ol",{attrs:{start:"2"}},[t("li",[a._v("使用正则表达式验证邮箱格式")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(' var reg = /^(\\w)+(\\.\\w+)*@(\\w)+((\\.\\w{2,3}){1,3})$/;\n var email = "example@qq.com";\n console.log(reg.test(email));  // true\n')])])]),t("h2",{attrs:{id:"开发及性能优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开发及性能优化"}},[a._v("#")]),a._v(" 开发及性能优化")]),a._v(" "),t("ol",[t("li",[a._v("规避 javascript 多人开发函数重名问题")])]),a._v(" "),t("ul",[t("li",[a._v("命名空间")]),a._v(" "),t("li",[a._v("封闭空间")]),a._v(" "),t("li",[a._v("js 模块化 mvc（数据层、表现层、控制层）")]),a._v(" "),t("li",[a._v("seajs")]),a._v(" "),t("li",[a._v("变量转换成对象的属性")]),a._v(" "),t("li",[a._v("对象化")])]),a._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[a._v("请说出三种减低页面加载时间的方法")])]),a._v(" "),t("p",[a._v("压缩 css、js 文件")]),a._v(" "),t("p",[a._v("合并 js、css 文件，减少 http 请求")]),a._v(" "),t("p",[a._v("外部 js、css 文件放在最底下")]),a._v(" "),t("p",[a._v("减少 dom 操作，尽可能用变量替代不必要的 dom 操作")]),a._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[a._v("你所了解到的 Web 攻击技术")])]),a._v(" "),t("p",[a._v("（1）XSS（Cross-Site Scripting，跨站脚本攻击）：指通过存在安全漏洞的 Web 网站注册用户的浏览器内运行非法的 HTML 标签或者 JavaScript 进行的一种攻击。")]),a._v(" "),t("p",[a._v("（2）SQL 注入攻击")]),a._v(" "),t("p",[a._v("（3）CSRF（Cross-Site Request Forgeries，跨站点请求伪造）：指攻击者通过设置好的陷阱，强制对已完成的认证用户进行非预期的个人信息或设定信息等某些状态更新。")]),a._v(" "),t("ol",{attrs:{start:"4"}},[t("li",[a._v("web 前端开发，如何提高页面性能优化？")])]),a._v(" "),t("p",[a._v("内容方面：")]),a._v(" "),t("p",[a._v("(1). 减少 HTTP 请求 (Make Fewer HTTP Requests)")]),a._v(" "),t("p",[a._v("(2). 减少 DOM 元素数量 (Reduce the Number of DOM Elements)")]),a._v(" "),t("p",[a._v("(3). 使得 Ajax 可缓存 (Make Ajax Cacheable)")]),a._v(" "),t("p",[a._v("针对 CSS：")]),a._v(" "),t("p",[a._v("(1). 把 CSS 放到代码页上端 (Put Stylesheets at the Top)")]),a._v(" "),t("p",[a._v("(2). 从页面中剥离 JavaScript 与 CSS (Make JavaScript and CSS External)")]),a._v(" "),t("p",[a._v("(3). 精简 JavaScript 与 CSS (Minify JavaScript and CSS)")]),a._v(" "),t("p",[a._v("(4). 避免 CSS 表达式 (Avoid CSS Expressions)")]),a._v(" "),t("p",[a._v("针对 JavaScript ：")]),a._v(" "),t("p",[a._v("(1). 脚本放到 HTML 代码页底部 (Put Scripts at the Bottom)")]),a._v(" "),t("p",[a._v("(2). 从页面中剥离 JavaScript 与 CSS (Make JavaScript and CSS External)")]),a._v(" "),t("p",[a._v("(3). 精简 JavaScript 与 CSS (Minify JavaScript and CSS)")]),a._v(" "),t("p",[a._v("(4). 移除重复脚本 (Remove Duplicate Scripts)")]),a._v(" "),t("p",[a._v("面向图片(Image)：")]),a._v(" "),t("p",[a._v("(1). 优化图片")]),a._v(" "),t("p",[a._v("(2). 不要在 HTML 中使用缩放图片")]),a._v(" "),t("p",[a._v("(3). 使用恰当的图片格式")]),a._v(" "),t("p",[a._v("(4). 使用 CSS Sprites 技巧对图片优化")]),a._v(" "),t("ol",{attrs:{start:"5"}},[t("li",[a._v("前端开发中，如何优化图像？图像格式的区别？")])]),a._v(" "),t("p",[a._v("优化图像：")]),a._v(" "),t("p",[a._v("1、不用图片，尽量用 css3 代替。 比如说要实现修饰效果，如半透明、边框、圆角、阴影、渐变等，在当前主流浏览器中都可以用 CSS 达成。")]),a._v(" "),t("p",[a._v("2、 使用矢量图 SVG 替代位图。对于绝大多数图案、图标等，矢量图更小，且可缩放而无需生成多套图。现在主流浏览器都支持 SVG 了，所以可放心使用！")]),a._v(" "),t("p",[a._v("3.、使用恰当的图片格式。我们常见的图片格式有 JPEG、GIF、PNG。")]),a._v(" "),t("p",[a._v("基本上，内容图片多为照片之类的，适用于 JPEG。")]),a._v(" "),t("p",[a._v("而修饰图片通常更适合用无损压缩的 PNG。")]),a._v(" "),t("p",[a._v("GIF 基本上除了 GIF 动画外不要使用。且动画的话，也更建议用 video 元素和视频格式，或用 SVG 动画取代。")]),a._v(" "),t("p",[a._v("4、按照 HTTP 协议设置合理的缓存。")]),a._v(" "),t("p",[a._v("5、使用字体图标 webfont、CSS Sprites 等。")]),a._v(" "),t("p",[a._v("6、用 CSS 或 JavaScript 实现预加载。")]),a._v(" "),t("p",[a._v("7、WebP 图片格式能给前端带来的优化。WebP 支持无损、有损压缩，动态、静态图片，压缩比率优于 GIF、JPEG、JPEG2000、PG 等格式，非常适合用于网络等图片传输。")]),a._v(" "),t("p",[a._v("图像格式的区别：")]),a._v(" "),t("p",[a._v("矢量图：图标字体，如 font-awesome；svg")]),a._v(" "),t("p",[a._v("位图：gif,jpg(jpeg),png")]),a._v(" "),t("p",[a._v("区别：")]),a._v(" "),t("p",[a._v("1、gif:是是一种无损，8 位图片格式。具有支持动画，索引透明，压缩等特性。适用于做色彩简单(色调少)的图片，如 logo,各种小图标 icons 等。")]),a._v(" "),t("p",[a._v("2、JPEG 格式是一种大小与质量相平衡的压缩图片格式。适用于允许轻微失真的色彩丰富的照片，不适合做色彩简单(色调少)的图片，如 logo,各种小图标 icons 等。")]),a._v(" "),t("p",[a._v("3、png:PNG 可以细分为三种格式:PNG8，PNG24，PNG32。后面的数字代表这种 PNG 格式最多可以索引和存储的颜色值。")]),a._v(" "),t("p",[a._v("关于透明：PNG8 支持索引透明和 alpha 透明;PNG24 不支持透明;而 PNG32 在 24 位的 PNG 基础上增加了 8 位（256 阶）的 alpha 通道透明;")]),a._v(" "),t("p",[a._v("优缺点：")]),a._v(" "),t("p",[a._v("1、能在保证最不失真的情况下尽可能压缩图像文件的大小。")]),a._v(" "),t("p",[a._v("2、对于需要高保真的较复杂的图像，PNG 虽然能无损压缩，但图片文件较大，不适合应用在 Web 页面上。")]),a._v(" "),t("ol",{attrs:{start:"6"}},[t("li",[a._v("浏览器是如何渲染页面的？")])]),a._v(" "),t("p",[a._v("渲染的流程如下：")]),a._v(" "),t("p",[a._v("1.解析 HTML 文件，创建 DOM 树。")]),a._v(" "),t("p",[a._v("自上而下，遇到任何样式（link、style）与脚本（script）都会阻塞（外部样式不阻塞后续外部脚本的加载）。")]),a._v(" "),t("p",[a._v("2.解析 CSS。优先级：浏览器默认设置<用户设置<外部样式<内联样式<HTML 中的 style 样式；")]),a._v(" "),t("p",[a._v("3.将 CSS 与 DOM 合并，构建渲染树（Render Tree）")]),a._v(" "),t("p",[a._v("4.布局和绘制，重绘（repaint）和重排（reflow）")]),a._v(" "),t("p",[a._v("转：https://www.cnblogs.com/wdlhao/p/8290436.html")])])}),[],!1,null,null,null);t.default=n.exports}}]);