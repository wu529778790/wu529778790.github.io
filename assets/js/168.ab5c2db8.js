(window.webpackJsonp=window.webpackJsonp||[]).push([[168],{504:function(t,a,s){"use strict";s.r(a);var n=s(4),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",{attrs:{"data-nodeid":"7844"}},[t._v("客观来说，小程序在用户规模及商业化方面的巨大成功，并不能掩盖其技术环节的设计问题和痛点。从孱弱简陋的小程序开发体验，到整体架构实现，再到小程序 APIs 碎片化现状，就注定了小程序多端方案层出不穷，展现出百家争鸣的局面。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"7845"}},[t._v("欣欣向荣的小程序多端方案背后有着深广且有趣的技术话题，这一讲，就让我们一同解析小程序多端方案技术。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"7846"}},[t._v("小程序生态如今已经如火如荼地开展开来，自腾讯微信小程序后，各巨头也纷纷建立起自己的小程序。这些小程序的设计原理类似，但是对于开发者来说，开发层面并不互通。在此背景下，效率为先，也就有了各种小程序多端方案。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"7847"}},[t._v("小程序多端方案的愿景很简单，就是使用一种 DSL，可以“write once，run evrywhere”，这也就不再需要开发完微信小程序，再开发头条小程序、百度小程序。小程序多端方案也许听起来很神奇，但技术实现上我们可以大体划分为三类：")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"7848"}},[a("li",{attrs:{"data-nodeid":"7849"}},[a("p",{attrs:{"data-nodeid":"7850"}},[t._v("编译时方案")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"7851"}},[a("p",{attrs:{"data-nodeid":"7852"}},[t._v("运行时方案")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"7853"}},[a("p",{attrs:{"data-nodeid":"7854"}},[t._v("编译时和运行时的结合方案")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"7855"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image/M00/91/75/Ciqc1GAOlPOADUxDAACGGDiNvBo264.png",alt:"Drawing 0.png","data-nodeid":"8041"}})]),t._v(" "),a("p",{attrs:{"data-nodeid":"7856"}},[t._v("事实上，单纯的编译时方案或运行时方案都不能完全满足"),a("strong",{attrs:{"data-nodeid":"8047"}},[t._v("跨端需求")]),t._v("，因此两者结合而成的第三种——编译时和运行时的结合方案，是目前的主流技术。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"7857"}},[t._v("基于以上技术方案，小程序多端方案最终对外提供的使用方式可以分为：")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"7858"}},[a("li",{attrs:{"data-nodeid":"7859"}},[a("p",{attrs:{"data-nodeid":"7860"}},[t._v("类 Vue 风格框架")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"7861"}},[a("p",{attrs:{"data-nodeid":"7862"}},[t._v("类 React 风格框架")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"7863"}},[a("p",{attrs:{"data-nodeid":"7864"}},[t._v("自定义 DSL 框架")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"7865"}},[t._v("下面我们将具体深入小程序多端方案的实现。")]),t._v(" "),a("h3",{attrs:{"data-nodeid":"7866"}},[t._v("小程序多端——编译时方案")]),t._v(" "),a("p",{attrs:{"data-nodeid":"7867"}},[t._v("顾名思义，编译时方案的工作量主要集中在"),a("strong",{attrs:{"data-nodeid":"8063"}},[t._v("编译转化环节")]),t._v("上。这类多端框架在编译阶段，"),a("strong",{attrs:{"data-nodeid":"8064"}},[t._v("基于 AST（抽象语法树）技术")]),t._v("进行各平台小程序适配。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"7868"}},[t._v("目前社区上存在较多基于 Vue DSL 和 React DSL 的静态编译方案。其实现理念类似，但也有区别，我们分开来看。")]),t._v(" "),a("h4",{attrs:{"data-nodeid":"7869"}},[t._v("Vue DSL 静态编译")]),t._v(" "),a("p",{attrs:{"data-nodeid":"7870"}},[t._v("Vue 的设计风格和各小程序设计风格更加接近，因此 Vue DSL 静态编译方案相对容易。Vue 中单文件组件主要由：")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"7871"}},[a("li",{attrs:{"data-nodeid":"7872"}},[a("p",{attrs:{"data-nodeid":"7873"}},[t._v("template")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"7874"}},[a("p",{attrs:{"data-nodeid":"7875"}},[t._v("script")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"7876"}},[a("p",{attrs:{"data-nodeid":"7877"}},[t._v("style")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"7878"}},[t._v("组成，它分别对应了小程序中的：")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"7879"}},[a("li",{attrs:{"data-nodeid":"7880"}},[a("p",{attrs:{"data-nodeid":"7881"}},[t._v(".wxml 文件，template 文件")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"7882"}},[a("p",{attrs:{"data-nodeid":"7883"}},[t._v(".js 文件，.json 文件")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"7884"}},[a("p",{attrs:{"data-nodeid":"7885"}},[t._v(".wxss 文件")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"7886"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image/M00/93/2E/CgqCHmAT7b2AYQJdAADnHNucgjE454.png",alt:"Lark20210129-191128.png","data-nodeid":"8077"}})]),t._v(" "),a("p",{attrs:{"data-nodeid":"7887"}},[t._v("其中，因为小程序基本都可以接受 H5 环境中的 CSS，因此"),a("strong",{attrs:{"data-nodeid":"8083"}},[t._v("style 部分基本可以直接平滑迁移")]),t._v("。template 转换为 .wxml 文件，需要进行 HTML 标签、模版语法的转换。以微信小程序举例，转换目标如下图：")]),t._v(" "),a("p",{attrs:{"data-nodeid":"7888"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image/M00/93/23/Ciqc1GAT7auABbA4AAD1EDPUmAQ243.png",alt:"Lark20210129-191131.png","data-nodeid":"8086"}})]),t._v(" "),a("div",{attrs:{"data-nodeid":"7889"}},[a("p",{staticStyle:{"text-align":"center"}},[t._v("编译过程图")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"7890"}},[t._v("那么上图表述的编译过程具体应该如何实现呢？可能你会想到正则，但正则的能力有限，复杂度也较高。更普遍的做法，如 mpvue、uni-app 等，都依赖了 AST（抽象语法树）技术。AST（抽象语法树）其实并不复杂，Babel 生态就为我们提供了很多开箱即用的 AST 分析和操作工具。下图是一个简单的 Vue 模版经过 AST 分析后的产出：")]),t._v(" "),a("p",{attrs:{"data-nodeid":"7891"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image/M00/91/75/Ciqc1GAOlROAPr2kAAK2OejCvBU840.png",alt:"Drawing 3.png","data-nodeid":"8090"}})]),t._v(" "),a("p",{attrs:{"data-nodeid":"7892"}},[t._v("对应模版代码：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"7893"}},[a("code",{attrs:{"data-language":"java"}},[t._v('<a><b v-if="a" /></a>\n')])]),t._v(" "),a("p",{attrs:{"data-nodeid":"7894"}},[t._v("经过 AST 解析为：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"7895"}},[a("code",{attrs:{"data-language":"java"}},[t._v("type: "),a("span",{staticClass:"hljs-number"},[t._v("1")]),t._v("\ntag: a\nattrsList: []\nattrsMap: {}\nrawAttrsMap: {}\nchildren:\n  - type: "),a("span",{staticClass:"hljs-number"},[t._v("1")]),t._v("\n    tag: b\n    attrsList: []\n    attrsMap:\n      v-"),a("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(": a\n    rawAttrsMap: {}\n    children: []\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(": a\n    ifConditions:\n      - exp: a\n        block: "),a("span",{staticClass:"hljs-string"},[t._v("'[Circular ~.children.0]'")]),t._v("\n    plain: "),a("span",{staticClass:"hljs-keyword"},[t._v("true")]),t._v("\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("static")]),t._v(": "),a("span",{staticClass:"hljs-keyword"},[t._v("false")]),t._v("\n    staticRoot: "),a("span",{staticClass:"hljs-keyword"},[t._v("false")]),t._v("\n    ifProcessed: "),a("span",{staticClass:"hljs-keyword"},[t._v("true")]),t._v("\nplain: "),a("span",{staticClass:"hljs-keyword"},[t._v("true")]),t._v("\n"),a("span",{staticClass:"hljs-keyword"},[t._v("static")]),t._v(": "),a("span",{staticClass:"hljs-keyword"},[t._v("false")]),t._v("\nstaticRoot: "),a("span",{staticClass:"hljs-keyword"},[t._v("false")]),t._v("\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"7896"}},[t._v("基于以上类似 JSON 一般的 AST 产出结果，我们可以生成小程序指定的 DSL。整体流程如图：")]),t._v(" "),a("p",{attrs:{"data-nodeid":"7897"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image/M00/93/2E/CgqCHmAT7ceAKd6fAACYXlFC1nQ021.png",alt:"Lark20210129-191134.png","data-nodeid":"8096"}})]),t._v(" "),a("p",{attrs:{"data-nodeid":"7898"}},[t._v("熟悉 Vue 原理的同学可能会知道，Vue 中 template 会被 vue-loader 编译，我们的小程序多端方案就需要"),a("strong",{attrs:{"data-nodeid":"8102"}},[t._v("将 Vue 模版编译为小程序 .wxml 文件")]),t._v("，思路异曲同工。可是，也许你会有疑问：Vue 中的 script 部分，怎么和小程序结合呢？这就需要在小程序运行时下文章功夫了，请继续阅读。")]),t._v(" "),a("h3",{attrs:{"data-nodeid":"7899"}},[t._v("小程序多端——运行时方案")]),t._v(" "),a("p",{attrs:{"data-nodeid":"7900"}},[t._v("前面我们介绍了 Vue 单文件组件的 template 编译过程，而 script 部分的处理会更加困难。试想，对于一段 Vue 代码，我们通过响应式理念监听数据变化，触发视图修改，放到小程序中，多端方案要做的就是监听数据变化，调用 setData() 方法，触发小程序渲染层变化。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"7901"}},[t._v("一般在 Vue 单文件组件的 script 部分，我们会使用以下代码：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"7902"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-keyword"},[t._v("new")]),t._v(" Vue({\n  data() {},\n  methods: {},\n  components: {}\n})\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"7903"}},[t._v("来初始化一个 Vue 实例。对于多端方案来说，就完全可以引入一个 Vue 的运行时版，对上述代码进行解析和执行。事实上，mpvue 就是 fork 了一份 Vue.js 的代码，因此内置了 Vue runtime 能力，同时添加了小程序平台的支持。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"7904"}},[t._v("具体还需要做哪些小程序平台特性支持呢？举一个例子，以微信小程序为例，微信小程序平台规定，小程序页面中需要有一个 Page() 方法，以生成一个小程序实例，其中 Page() 方法是小程序官方提供的 API。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"7905"}},[t._v("那么对于业务方写的"),a("code",{attrs:{"data-backticks":"1","data-nodeid":"8109"}},[t._v("new Vue()")]),t._v("代码，"),a("strong",{attrs:{"data-nodeid":"8115"}},[t._v("多端平台要手动执行微信小程序平台的 Page()，完成初始化处理")]),t._v("，如下：")]),t._v(" "),a("p",{attrs:{"data-nodeid":"7906"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image/M00/93/2E/CgqCHmAT7dKAGSVzAAEawS6G6xY828.png",alt:"Lark20210129-191136.png","data-nodeid":"8118"}})]),t._v(" "),a("p",{attrs:{"data-nodeid":"7907"}},[t._v("经过上述步骤，我们的多端方案内置了 Vue 运行时版，并实例化了一个 Vue 实例，同时在初始阶段调用了小程序平台的 Page() 方法，因此也就有了一个小程序实例。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"7908"}},[t._v("下面的工作，就是"),a("strong",{attrs:{"data-nodeid":"8125"}},[t._v("在运行时将 Vue 实例和小程序实例进行关联")]),t._v("，以做到：数据变动时，小程序实例能够调用 setData() 方法，进行渲染层更新。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"7909"}},[t._v("思想确立后，如何实施呢？首先这就需要你对 Vue 原理足够清楚了：Vue 基于响应式，对数据进行监听，在数据改动时，新生成一份虚拟节点 VNode。接下来"),a("strong",{attrs:{"data-nodeid":"8131"}},[t._v("对比新旧两份虚拟节点，找到 Diff，并进行 patch 操作，最终更新了真实的 DOM 节点")]),t._v("。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"7910"}},[t._v("因为小程序架构中，并没有提供操作小程序节点的 API 方法，因此对于小程序多端方案，我们显然不需要进行 Vue 源码中的 patch 操作。又因为小程序隔离了渲染进程（渲染层）和逻辑进程（逻辑层），我们不需要处理渲染层，只需要调用 setData() 方法，更新一份最新的数据就可以了。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"7911"}},[t._v("因此，借助 Vue 现有的能力，我们秉承“数据部分让 Vue 运行时版接手，渲染部分让小程序架构接手”的理念，就能实现一个类 Vue 风格的多端框架。框架原理如图：")]),t._v(" "),a("p",{attrs:{"data-nodeid":"7912"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image/M00/94/37/CgqCHmAXmvKAEQr9AAErNUu9oi4120.png",alt:"图片2.png","data-nodeid":"8136"}})]),t._v(" "),a("div",{attrs:{"data-nodeid":"7913"}},[a("p",{staticStyle:{"text-align":"center"}},[t._v("类 Vue 风格的多端框架原理图")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"7914"}},[t._v("当然，整个框架的设计还要考虑事件处理等模块，我们就不再具体展开。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"7915"}},[t._v("至此，编译时和运行时方案组合在一起，我们就实现了一个类 Vue 风格的小程序多端框架的技术方案架构。目前社区上都是采用了这一套技术架构方案，但是不同框架有各自的特点，比如"),a("strong",{attrs:{"data-nodeid":"8143"}},[t._v("网易考拉 Megalo 在上述方案的基础上，将整个数据结构进行了扁平化，目的是在调用 setData() 方法时，可以获得更好的性能")]),t._v("。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"7916"}},[t._v("探索并没有到此为止，事实上，类 React 的小程序多端方案架构虽然道理和类 Vue 方案差不多，也需要将编译时和运行时相结合，但很多重要环节的处理却更加复杂，这是怎么回事呢？我们继续探索。")]),t._v(" "),a("h3",{attrs:{"data-nodeid":"7917"}},[t._v("小程序多端——类 React 风格的编译时和运行时结合方案")]),t._v(" "),a("p",{attrs:{"data-nodeid":"7918"}},[t._v("类 React 风格的小程序多端方案，存在多项棘手的问题，其中之一就是：如何将 JSX 转换为小程序模版？")]),t._v(" "),a("p",{attrs:{"data-nodeid":"7919"}},[t._v("我们知道不同于 Vue 模版理念，React 生态选择了 JSX 来表达视图，但是 JSX 过于灵活，单纯基于 AST（抽象语法树）技术很难进行一对一转换。比如：")]),t._v(" "),a("pre",{staticClass:"lang-js",attrs:{"data-nodeid":"7920"}},[a("code",{attrs:{"data-language":"js"}},[a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" "),a("span",{staticClass:"hljs-title"},[t._v("CompParent")]),t._v("("),a("span",{staticClass:"hljs-params"},[t._v("{children, ...props}")]),t._v(") ")]),t._v("{\n  "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" "),a("span",{staticClass:"hljs-keyword"},[t._v("typeof")]),t._v(" children === "),a("span",{staticClass:"hljs-string"},[t._v("'function'")]),t._v(" ? children(props) : "),a("span",{staticClass:"hljs-literal"},[t._v("null")]),t._v("\n}\n"),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[t._v("function")]),t._v(" "),a("span",{staticClass:"hljs-title"},[t._v("Comp")]),t._v("("),a("span",{staticClass:"hljs-params"}),t._v(") ")]),t._v("{\n  "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" (\n    "),a("span",{staticClass:"xml"},[a("span",{staticClass:"hljs-tag"},[t._v("<"),a("span",{staticClass:"hljs-name"},[t._v("CompParent")]),t._v(">")]),t._v("\n      {props => "),a("span",{staticClass:"hljs-tag"},[t._v("<"),a("span",{staticClass:"hljs-name"},[t._v("div")]),t._v(">")]),t._v("{props.data}"),a("span",{staticClass:"hljs-tag"},[t._v("</"),a("span",{staticClass:"hljs-name"},[t._v("div")]),t._v(">")]),t._v("}\n    "),a("span",{staticClass:"hljs-tag"},[t._v("</"),a("span",{staticClass:"hljs-name"},[t._v("CompParent")]),t._v(">")])]),t._v("\n  )\n}\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"7921"}},[t._v("这段代码是 React 中，利用 JSX 表达能力实现的 Render Prop 模式，这也是静态编译的噩梦："),a("strong",{attrs:{"data-nodeid":"8153"}},[t._v("如果不将代码运行，很难计算出需要表达的视图结果")]),t._v("。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"7922"}},[t._v("针对这个“JSX 处理”问题，类 React 风格的小程序多端方案就可以分成两个流派：")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"7923"}},[a("li",{attrs:{"data-nodeid":"7924"}},[a("p",{attrs:{"data-nodeid":"7925"}},[t._v("强行静态编译型，代表有：京东的 Taro 1/2，去哪儿的 Nanachi 等；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"7926"}},[a("p",{attrs:{"data-nodeid":"7927"}},[t._v("运行时处理型，代表有：Taro Next，蚂蚁的 Remax。")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"7928"}},[t._v("强行静态编译型需要业务使用方在编写代码时，规避掉一些难以在编译阶段处理的动态化的写法，因此这类多端框架说到底是使用了限制的、阉割版的 JSX。比如在早期 Taro 版本的文档中，就有了清晰的说明：")]),t._v(" "),a("p",{attrs:{"data-nodeid":"7929"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image2/M01/09/65/Cip5yGAOlUeAEB4oAAO9Arzu18g785.png",alt:"Drawing 7.png","data-nodeid":"8160"}})]),t._v(" "),a("p",{attrs:{"data-nodeid":"7930"}},[t._v("因此，我认为强行静态编译 JSX 是一条死胡同，并不是一个完美的解决方案。事实上，Taro 发展到了 v3 版本之后，也意识到了这个问题，所以和蚂蚁 Remax 方案一样，Taro 新版本进行了架构升级，在运行时增加了对 React JSX 以及后续流程处理。具体是怎么做到的呢？请你继续阅读。")]),t._v(" "),a("h4",{attrs:{"data-nodeid":"7931"}},[t._v("React 设计理念助力多端小程序起飞")]),t._v(" "),a("p",{attrs:{"data-nodeid":"7932"}},[t._v("我认为在"),a("strong",{attrs:{"data-nodeid":"8168"}},[t._v("运行时开发者能够处理 React JSX 的核心基础其实在于 React 的设计理念")]),t._v("，React 将自身能力充分解耦，并提供给社区接入关键环节。这里我们需要先进行一些 React 原理解析。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"7933"}},[t._v("React 核心理念可以分为三大部分：")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"7934"}},[a("li",{attrs:{"data-nodeid":"7935"}},[a("p",{attrs:{"data-nodeid":"7936"}},[t._v("React Core：处理最核心的 APIs，与终端平台和渲染解耦，主要提供了下面这些能力：")]),t._v(" "),a("ol",{attrs:{"data-nodeid":"7937"}},[a("li",{attrs:{"data-nodeid":"7938"}},[a("p",{attrs:{"data-nodeid":"7939"}},[t._v("React.createElement()")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"7940"}},[a("p",{attrs:{"data-nodeid":"7941"}},[t._v("React.createClass()")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"7942"}},[a("p",{attrs:{"data-nodeid":"7943"}},[t._v("React.Component")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"7944"}},[a("p",{attrs:{"data-nodeid":"7945"}},[t._v("React.Children")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"7946"}},[a("p",{attrs:{"data-nodeid":"7947"}},[t._v("React.PropTypes")])])])]),t._v(" "),a("li",{attrs:{"data-nodeid":"7948"}},[a("p",{attrs:{"data-nodeid":"7949"}},[t._v("React Renderer：渲染器定义了一个 React Tree 如何构建接轨不同平台，比如：")]),t._v(" "),a("ol",{attrs:{"data-nodeid":"7950"}},[a("li",{attrs:{"data-nodeid":"7951"}},[a("p",{attrs:{"data-nodeid":"7952"}},[t._v("React-dom 渲染组件树为 DOM elements；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"7953"}},[a("p",{attrs:{"data-nodeid":"7954"}},[t._v("React Native 渲染组件树为不同原生平台视图。")])])])]),t._v(" "),a("li",{attrs:{"data-nodeid":"7955"}},[a("p",{attrs:{"data-nodeid":"7956"}},[t._v("Reconciler：负责 diff 算法，接驳 patch 行为。可以被 React-dom、React Native、React ART 这些 renderers 共用，并提供基础计算能力。现在 React 主要有两种类型的 reconcilers：")]),t._v(" "),a("ol",{attrs:{"data-nodeid":"7957"}},[a("li",{attrs:{"data-nodeid":"7958"}},[a("p",{attrs:{"data-nodeid":"7959"}},[t._v("Stack reconciler，React 15 以及更早期 React 版本使用；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"7960"}},[a("p",{attrs:{"data-nodeid":"7961"}},[t._v("Fiber reconciler，新一代的架构。")])])])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"7962"}},[t._v("更多基础内容，如 React Components、React Instances、React Elements，我们就不再一一展开。这里需要你了解的是：")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"7963"}},[a("li",{attrs:{"data-nodeid":"7964"}},[a("p",{attrs:{"data-nodeid":"7965"}},[t._v("React team 将 Reconciler 部分作为一个独立的 npm 包（"),a("a",{attrs:{href:"https://www.npmjs.com/package/react-reconciler","data-nodeid":"8186"}},[t._v("react-reconciler")]),t._v(" 发布）；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"7966"}},[a("p",{attrs:{"data-nodeid":"7967"}},[t._v("在 React 环境下，不同平台，可以依赖一个 "),a("a",{attrs:{href:"https://github.com/facebook/react/tree/master/packages/react-reconciler#api","data-nodeid":"8191"}},[t._v("hostConfig")]),t._v(" 配置，和 react-reconciler 互动，连接并使用 Reconciler 能力；")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"7968"}},[a("p",{attrs:{"data-nodeid":"7969"}},[t._v("因此，不同平台的 renderers 在 HostConfig 中内置基本方法，即可构造自己的渲染逻辑。")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"7970"}},[t._v("核心架构可以总结为下图：")]),t._v(" "),a("p",{attrs:{"data-nodeid":"7971"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image/M00/93/2E/CgqCHmAT7hyAENc8AAFoe_ttcg4719.png",alt:"Lark20210129-191112.png","data-nodeid":"8197"}})]),t._v(" "),a("p",{attrs:{"data-nodeid":"7972"}},[t._v("React 的 Reconciler 并不关心 renderers 中的节点是什么形状，只会把这个计算结果透传到 HostConfig 中定义的方法中，我们在这些方法（比如 appendChild、removeChild、insertBefore）中，完成渲染的准备和目的。而 HostConfig 其实就是一个对象：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"7973"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" HostConfig = {\n  "),a("span",{staticClass:"hljs-comment"},[t._v("//TODO We will specify all required methods here")]),t._v("\n}\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"7974"}},[t._v("翻看 "),a("a",{attrs:{href:"https://github.com/facebook/react/blob/master/packages/react-reconciler/src/forks/ReactFiberHostConfig.custom.js","data-nodeid":"8202"}},[t._v("react-reconciler")]),t._v(" 源码，可以总结出，完整的 hostConfig 包含了：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"7975"}},[a("code",{attrs:{"data-language":"java"}},[t._v("HostConfig.getPublicInstance\nHostConfig.getRootHostContext\nHostConfig.getChildHostContext\nHostConfig.prepareForCommit\nHostConfig.resetAfterCommit\nHostConfig.createInstance\nHostConfig.appendInitialChild\nHostConfig.finalizeInitialChildren\nHostConfig.prepareUpdate\nHostConfig.shouldSetTextContent\nHostConfig.shouldDeprioritizeSubtree\nHostConfig.createTextInstance\nHostConfig.scheduleDeferredCallback\nHostConfig.cancelDeferredCallback\nHostConfig.setTimeout\nHostConfig.clearTimeout\nHostConfig.noTimeout\nHostConfig.now\nHostConfig.isPrimaryRenderer\nHostConfig.supportsMutation\nHostConfig.supportsPersistence\nHostConfig.supportsHydration\n"),a("span",{staticClass:"hljs-comment"},[t._v("// -------------------")]),t._v("\n"),a("span",{staticClass:"hljs-comment"},[t._v("//      Mutation")]),t._v("\n"),a("span",{staticClass:"hljs-comment"},[t._v("//     (optional)")]),t._v("\n"),a("span",{staticClass:"hljs-comment"},[t._v("// -------------------")]),t._v("\nHostConfig.appendChild\nHostConfig.appendChildToContainer\nHostConfig.commitTextUpdate\nHostConfig.commitMount\nHostConfig.commitUpdate\nHostConfig.insertBefore\nHostConfig.insertInContainerBefore\nHostConfig.removeChild\nHostConfig.removeChildFromContainer\nHostConfig.resetTextContent\nHostConfig.hideInstance\nHostConfig.hideTextInstance\nHostConfig.unhideInstance\nHostConfig.unhideTextInstance\n"),a("span",{staticClass:"hljs-comment"},[t._v("// -------------------")]),t._v("\n"),a("span",{staticClass:"hljs-comment"},[t._v("//     Persistence")]),t._v("\n"),a("span",{staticClass:"hljs-comment"},[t._v("//     (optional)")]),t._v("\n"),a("span",{staticClass:"hljs-comment"},[t._v("// -------------------")]),t._v("\nHostConfig.cloneInstance\nHostConfig.createContainerChildSet\nHostConfig.appendChildToContainerChildSet\nHostConfig.finalizeContainerChildren\nHostConfig.replaceContainerChildren\nHostConfig.cloneHiddenInstance\nHostConfig.cloneUnhiddenInstance\nHostConfig.createHiddenTextInstance\n"),a("span",{staticClass:"hljs-comment"},[t._v("// -------------------")]),t._v("\n"),a("span",{staticClass:"hljs-comment"},[t._v("//     Hydration")]),t._v("\n"),a("span",{staticClass:"hljs-comment"},[t._v("//     (optional)")]),t._v("\n"),a("span",{staticClass:"hljs-comment"},[t._v("// -------------------")]),t._v("\nHostConfig.canHydrateInstance\nHostConfig.canHydrateTextInstance\nHostConfig.getNextHydratableSibling\nHostConfig.getFirstHydratableChild\nHostConfig.hydrateInstance\nHostConfig.hydrateTextInstance\nHostConfig.didNotMatchHydratedContainerTextInstance\nHostConfig.didNotMatchHydratedTextInstance\nHostConfig.didNotHydrateContainerInstance\nHostConfig.didNotHydrateInstance\nHostConfig.didNotFindHydratableContainerInstance\nHostConfig.didNotFindHydratableContainerTextInstance\nHostConfig.didNotFindHydratableInstance\nHostConfig.didNotFindHydratableTextInstance\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"7976"}},[t._v("React reconciler 阶段会在不同的时机，调用上面这些方法。比如在 reconciler 阶段新建节点时会调用 createInstance 等方法；在提交阶段创建新的子节点时，调用 appendChild 方法。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"7977"}},[t._v("依照 React 支持 web 和原生（React Native）的思路，如下图：")]),t._v(" "),a("p",{attrs:{"data-nodeid":"7978"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image/M00/91/75/Ciqc1GAOlWyAV2OnAADz2iM_2mM698.png",alt:"Drawing 9.png","data-nodeid":"8208"}})]),t._v(" "),a("p",{attrs:{"data-nodeid":"7979"}},[t._v("你可以类比出一套更好的 React 支持多端小程序的架构设计，如下图：")]),t._v(" "),a("p",{attrs:{"data-nodeid":"7980"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image/M00/93/2E/CgqCHmAT8DSAGRn-AAJEN4yKmdI464.png",alt:"Lark20210129-192321.png","data-nodeid":"8212"}})]),t._v(" "),a("p",{attrs:{"data-nodeid":"7981"}},[t._v("我们知道类 Vue 风格的多端框架，可以将 Vue template 编译为小程序模版。那么有了数据，类 React 风格的多端框架，在初始化时如何渲染出来页面呢？")]),t._v(" "),a("p",{attrs:{"data-nodeid":"7982"}},[t._v("以 Remax 为例，上图所示 VNodeData 数据中，包含了节点信息，比如 type=“view”，我们可以"),a("strong",{attrs:{"data-nodeid":"8219"}},[t._v("通过递归 VNodeData 这个数据结构，根据不同的 type 渲染出不同的小程序模版")]),t._v("。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"7983"}},[t._v("总结一下，在初始化阶段以及第一次 mount 时，我们"),a("strong",{attrs:{"data-nodeid":"8225"}},[t._v("通过 setData() 方法初始化小程序")]),t._v("。具体是通过递归数据结构，渲染小程序页面。接着，在数据发生变化时，我们通过 React reconciler 阶段的计算信息，以及自定义配置的 HostConfig 衔接函数，更新数据，并通过 setData() 方法触发小程序的渲染更新。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"7984"}},[t._v("了解了类 React 风格的多端方案架构设计，我们可以结合实际框架实现，来进一步巩固思想，看一看实践中，开源方案的实施情况，请继续阅读。")]),t._v(" "),a("h4",{attrs:{"data-nodeid":"7985"}},[t._v("剖析一款“网红”框架 —— Taro Next")]),t._v(" "),a("p",{attrs:{"data-nodeid":"7986"}},[t._v("在 2019 年 GMTC 大会上，京东 Taro 团队介绍了《小程序跨框架开发的探索与实践》，其中的 v3 理念就与上述思路吻合（目前仍然在版本开发中："),a("a",{attrs:{href:"https://github.com/nervjs/taro","data-nodeid":"8231"}},[t._v("NervJS-taro")]),t._v("）。在分享中的一处截图如下：")]),t._v(" "),a("p",{attrs:{"data-nodeid":"7987"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image/M00/93/23/Ciqc1GAT8D6ADrYMAAICYbpPasw785.png",alt:"Lark20210129-192324.png","data-nodeid":"8235"}})]),t._v(" "),a("p",{attrs:{"data-nodeid":"7988"}},[t._v("由上图即可推知：Taro 团队提供的 "),a("a",{attrs:{href:"https://github.com/NervJS/taro/tree/next/packages/taro-react","data-nodeid":"8239"}},[t._v("taro-react")]),t._v("包，是用来连接 React reconciler 和 taro-runtime 的。它主要负责：")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"7989"}},[a("li",{attrs:{"data-nodeid":"7990"}},[a("p",{attrs:{"data-nodeid":"7991"}},[t._v("实现 HostConfig 配置")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"7992"}},[a("p",{attrs:{"data-nodeid":"7993"}},[t._v("实现 render 函数")])])]),t._v(" "),a("p",{attrs:{"data-nodeid":"7994"}},[t._v("比如，HostConfig 在 taro-react 源码中的实现为：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"7995"}},[a("code",{attrs:{"data-language":"java"}},[a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" hostConfig: HostConfig<\n  string, "),a("span",{staticClass:"hljs-comment"},[t._v("// Type")]),t._v("\n  Props, "),a("span",{staticClass:"hljs-comment"},[t._v("// Props")]),t._v("\n  TaroElement, "),a("span",{staticClass:"hljs-comment"},[t._v("// Container")]),t._v("\n  TaroElement, "),a("span",{staticClass:"hljs-comment"},[t._v("// Instance")]),t._v("\n  TaroText, "),a("span",{staticClass:"hljs-comment"},[t._v("// TextInstance")]),t._v("\n  TaroElement, "),a("span",{staticClass:"hljs-comment"},[t._v("// HydratableInstance")]),t._v("\n  TaroElement, "),a("span",{staticClass:"hljs-comment"},[t._v("// PublicInstance")]),t._v("\n  object, "),a("span",{staticClass:"hljs-comment"},[t._v("// HostContext")]),t._v("\n  string[], "),a("span",{staticClass:"hljs-comment"},[t._v("// UpdatePayload")]),t._v("\n  unknown, "),a("span",{staticClass:"hljs-comment"},[t._v("// ChildSet")]),t._v("\n  unknown, "),a("span",{staticClass:"hljs-comment"},[t._v("// TimeoutHandle")]),t._v("\n  unknown "),a("span",{staticClass:"hljs-comment"},[t._v("// NoTimeout")]),t._v("\n> & {\n  hideInstance (instance: TaroElement): "),a("span",{staticClass:"hljs-function"},[a("span",{staticClass:"hljs-keyword"},[t._v("void")]),t._v("\n  "),a("span",{staticClass:"hljs-title"},[t._v("unhideInstance")]),t._v(" "),a("span",{staticClass:"hljs-params"},[t._v("(instance: TaroElement, props)")]),t._v(": "),a("span",{staticClass:"hljs-keyword"},[t._v("void")]),t._v("\n} ")]),t._v("= {\n  "),a("span",{staticClass:"hljs-comment"},[t._v("// 创建 element 实例")]),t._v("\n  createInstance (type) {\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" document.createElement(type)\n  },\n  "),a("span",{staticClass:"hljs-comment"},[t._v("// 创建 text node 实例")]),t._v("\n  createTextInstance (text) {\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" document.createTextNode(text)\n  },\n  getPublicInstance (inst: TaroElement) {\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" inst\n  },\n  getRootHostContext () {\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" {}\n  },\n  getChildHostContext () {\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" {}\n  },\n  "),a("span",{staticClass:"hljs-comment"},[t._v("// appendChild 方法实现")]),t._v("\n  appendChild (parent, child) {\n    parent.appendChild(child)\n  },\n  "),a("span",{staticClass:"hljs-comment"},[t._v("// appendInitialChild 方法实现")]),t._v("\n  appendInitialChild (parent, child) {\n    parent.appendChild(child)\n  },\n  "),a("span",{staticClass:"hljs-comment"},[t._v("// appendChildToContainer 方法实现")]),t._v("\n  appendChildToContainer (parent, child) {\n    parent.appendChild(child)\n  },\n  "),a("span",{staticClass:"hljs-comment"},[t._v("// removeChild 方法实现")]),t._v("\n  removeChild (parent, child) {\n    parent.removeChild(child)\n  },\n  "),a("span",{staticClass:"hljs-comment"},[t._v("// removeChildFromContainer 方法实现")]),t._v("\n  removeChildFromContainer (parent, child) {\n    parent.removeChild(child)\n  },\n  "),a("span",{staticClass:"hljs-comment"},[t._v("// insertBefore 方法实现")]),t._v("\n  insertBefore (parent, child, refChild) {\n    parent.insertBefore(child, refChild)\n  },\n  "),a("span",{staticClass:"hljs-comment"},[t._v("// insertInContainerBefore 方法实现")]),t._v("\n  insertInContainerBefore (parent, child, refChild) {\n    parent.insertBefore(child, refChild)\n  },\n  "),a("span",{staticClass:"hljs-comment"},[t._v("// commitTextUpdate 方法实现")]),t._v("\n  commitTextUpdate (textInst, _, newText) {\n    textInst.nodeValue = newText\n  },\n  finalizeInitialChildren (dom, _, props) {\n    updateProps(dom, {}, props)\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" "),a("span",{staticClass:"hljs-keyword"},[t._v("false")]),t._v("\n  },\n  prepareUpdate () {\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" EMPTY_ARR\n  },\n  commitUpdate (dom, _payload, _type, oldProps, newProps) {\n    updateProps(dom, oldProps, newProps)\n  },\n  hideInstance (instance) {\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" style = instance.style\n    style.setProperty("),a("span",{staticClass:"hljs-string"},[t._v("'display'")]),t._v(", "),a("span",{staticClass:"hljs-string"},[t._v("'none'")]),t._v(")\n  },\n  unhideInstance (instance, props) {\n    "),a("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" styleProp = props.style\n    let display = styleProp?.hasOwnProperty("),a("span",{staticClass:"hljs-string"},[t._v("'display'")]),t._v(") ? styleProp.display : "),a("span",{staticClass:"hljs-keyword"},[t._v("null")]),t._v("\n    display = display == "),a("span",{staticClass:"hljs-keyword"},[t._v("null")]),t._v(" || typeof display === "),a("span",{staticClass:"hljs-string"},[t._v("'boolean'")]),t._v(" || display === "),a("span",{staticClass:"hljs-string"},[t._v("''")]),t._v(" ? "),a("span",{staticClass:"hljs-string"},[t._v("''")]),t._v(" : ("),a("span",{staticClass:"hljs-string"},[t._v("''")]),t._v(" + display).trim()\n    "),a("span",{staticClass:"hljs-comment"},[t._v("// eslint-disable-next-line dot-notation")]),t._v("\n    instance.style["),a("span",{staticClass:"hljs-string"},[t._v("'display'")]),t._v("] = display\n  },\n  shouldSetTextContent: returnFalse,\n  shouldDeprioritizeSubtree: returnFalse,\n  prepareForCommit: noop,\n  resetAfterCommit: noop,\n  commitMount: noop,\n  now,\n  scheduleDeferredCallback,\n  cancelDeferredCallback,\n  clearTimeout: clearTimeout,\n  setTimeout: setTimeout,\n  noTimeout: -"),a("span",{staticClass:"hljs-number"},[t._v("1")]),t._v(",\n  supportsMutation: "),a("span",{staticClass:"hljs-keyword"},[t._v("true")]),t._v(",\n  supportsPersistence: "),a("span",{staticClass:"hljs-keyword"},[t._v("false")]),t._v(",\n  isPrimaryRenderer: "),a("span",{staticClass:"hljs-keyword"},[t._v("true")]),t._v(",\n  supportsHydration: "),a("span",{staticClass:"hljs-keyword"},[t._v("false")]),t._v("\n}\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"7996"}},[t._v("以 insertBefore 方法为例：")]),t._v(" "),a("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"7997"}},[a("code",{attrs:{"data-language":"java"}},[t._v("insertBefore (parent, child, refChild) {\n  parent.insertBefore(child, refChild)\n},\n")])]),t._v(" "),a("p",{attrs:{"data-nodeid":"7998"}},[t._v("parent 实际上是一个 TaroNode 对象，其 insertBefore 方法在 taro-runtime 中给出。"),a("a",{attrs:{href:"https://github.com/NervJS/taro/tree/next/packages/taro-runtime","data-nodeid":"8248"}},[t._v("taro-runtime")]),t._v(" 模拟了 DOM/BOM APIs，但是在小程序环境中，它并不能直接操作 DOM 节点，而是操作数据（即"),a("strong",{attrs:{"data-nodeid":"8258"}},[t._v("前文提到的 VNodeData，对应 Taro 里面的 TaroNode")]),t._v("）。比如源码中，仍然以 insertBefore 方法举例，"),a("a",{attrs:{href:"https://github.com/NervJS/taro/blob/aaf9c133907805801803d2cb9d147c952e0b199b/packages/taro-runtime/src/dom/node.ts#L88","data-nodeid":"8256"}},[t._v("相关处理逻辑为")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" insertBefore"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TaroNode")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newChild"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" refChild"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" TaroNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" isReplace"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" boolean"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("T")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    newChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    newChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parentNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// payload 数据")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("payload")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" UpdatePayload\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 存在 refChild(TaroNode 类型)")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("refChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("findIndex")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("childNodes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" refChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("childNodes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("splice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("isReplace "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        payload "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("path")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" newChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hydrate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        payload "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("path")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_path"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("Shortcuts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Childnodes"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("childNodes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hydrate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("childNodes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      payload "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("path")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" newChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hydrate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    CurrentReconciler"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("insertBefore"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" refChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("enqueueUpdate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("payload"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" newChild\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",{attrs:{"data-nodeid":"8000"}},[t._v("整体 Taro Next 的类 React 多端方案架构如图，出自《小程序跨框架开发的探索与实践》分享：")]),t._v(" "),a("p",{attrs:{"data-nodeid":"9417"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image/M00/94/2C/Ciqc1GAXmzmACf4fAAVidO1Nf0U984.png",alt:"图片3.png","data-nodeid":"9420"}})]),t._v(" "),a("p",{staticClass:"te-preview-highlight",attrs:{"data-nodeid":"8002"}},[t._v("了解了不同框架风格（Vue 和 React）的多端小程序技术架构方案，并不意味着我们就能直接写出一个新的框架，和社区上成熟方案相争锋指日可待了。一个成熟的技术方案除了实现主体架构，还包括多方面的内容，比如性能优化。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"8003"}},[t._v("如何在已有思路基础上，完成更好的设计，也值得开发者深思，我们将继续展开这个话题。")]),t._v(" "),a("h3",{attrs:{"data-nodeid":"8004"}},[t._v("小程序多端方案优化方向")]),t._v(" "),a("p",{attrs:{"data-nodeid":"8005"}},[t._v("一个成熟的小程序多端方案要考虑的环节是立体的，比如以 "),a("a",{attrs:{href:"https://developers.weixin.qq.com/miniprogram/dev/extended/kbone/","data-nodeid":"8269"}},[t._v("kbone")]),t._v(" 为代表，运行时方案都是通过模拟 Web 环境来彻底对接前端生态，而 Remax 只是简单的通过 react reconciler 连接 React 和小程序。如何从更高的角度，衡量和理解小程序多端方案的更多技术方向，我们从下面几个话题来继续阐述。")]),t._v(" "),a("h4",{attrs:{"data-nodeid":"8006"}},[t._v("性能优化方向")]),t._v(" "),a("p",{attrs:{"data-nodeid":"8007"}},[t._v("从前文我们可以了解到，小程序多端框架主要由编译时和运行时两部分组成，一般来说，"),a("strong",{attrs:{"data-nodeid":"8277"}},[t._v("编译时做的事情越多，下的功夫越大，也就意味着运行时越轻量，负担越小，因此性能也就会更好")]),t._v("。比如，我们可以在编译时做到 AOT（Ahead of Time）性能调优、Dead Code Elimination 等。而厚重的运行时一般意味着需要将完整的组件树在逻辑层传输到视图层，也就导致数据传输量更大，且页面中会存在更多的监听器。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"8008"}},[t._v("另一方面，随着终端性能的增强，找到编译时和运行时所承担工作的平衡点，也显得至关重要。以 mpvue 框架为主，一般编译时都会完成"),a("strong",{attrs:{"data-nodeid":"8287"}},[t._v("静态模版")]),t._v("的编译工作；而以 Remax 为代表，"),a("strong",{attrs:{"data-nodeid":"8288"}},[t._v("动态构建视图层表达就放在了运行时完成")]),t._v("。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"8009"}},[t._v("在我看来，关于运行时和编译时的各中取舍，需要基于大量 benchmark 调研，也需要开发设计者广阔的技术视野和选型能力。除此之外，一般我们可以从以下几个方面来进一步实现性能优化。")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"8010"}},[a("li",{attrs:{"data-nodeid":"8011"}},[a("p",{attrs:{"data-nodeid":"8012"}},[a("strong",{attrs:{"data-nodeid":"8294"}},[t._v("框架包 size")]),t._v("。小程序的初始加载性能直接依赖于资源的包大小，因此小程序多端框架的包 size，至关重要。为此，各解决方案都从不同的角度完成瘦身，比如 Taro 力争实现更轻量的 DOM/BOM APIs，不同于 jsdom（size：2.1M），Taro 的核心的 DOM/BOM APIs 代码才 1000 行不到。")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"8013"}},[a("p",{attrs:{"data-nodeid":"8014"}},[a("strong",{attrs:{"data-nodeid":"8299"}},[t._v("数据更新粒度")]),t._v("。在数据更新阶段，小程序的 setData() 所负载的数据一直是重要的优化方向，目前已经成为默认的常规手段，那么利用框架来完成 setData() 方法调用优化也就顺其自然了。比如数据负载的扁平化处理和增量处理，都是常见的优化手段。")])])]),t._v(" "),a("h4",{attrs:{"data-nodeid":"8015"}},[t._v("未来发展方向")]),t._v(" "),a("p",{attrs:{"data-nodeid":"8016"}},[t._v("好的技术架构决定着未来发展潜力，上文我们提到了 React 将 React core、React-dom 等解耦，才奠定了现代化小程序多端方案的可行性。而小程序多端方案的设计，也决定着自身的未来应用空间。在此层面上，我认为开发者可重点考虑以下几个方面。")]),t._v(" "),a("ul",{attrs:{"data-nodeid":"8017"}},[a("li",{attrs:{"data-nodeid":"8018"}},[a("p",{attrs:{"data-nodeid":"8019"}},[a("strong",{attrs:{"data-nodeid":"8310"}},[t._v("工程化方案")]),t._v("。小程序多端需要有一体化的工程解决方案，在设计上可以与 Webpack 等工程化工具深度融合绑定，并对外提供服务。但需要"),a("strong",{attrs:{"data-nodeid":"8311"}},[t._v("兼顾关键环节的可插拔性")]),t._v("，能够适应多种工程化工具，对于未来发展和当下应用场景来说，尤其重要。")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"8020"}},[a("p",{attrs:{"data-nodeid":"8021"}},[a("strong",{attrs:{"data-nodeid":"8320"}},[t._v("框架方案")]),t._v("。React 和 Vue 无疑是当前最重要的前端框架，目前小程序多端方案也都以二者为主。但是"),a("strong",{attrs:{"data-nodeid":"8321"}},[t._v("Flutter 和 Angular，甚至更小众的框架也应该得到重视")]),t._v("。考虑到投入产出比，如果小程序多端团队难以面面俱到地支持这些框架和新 DSL，那么交给社区寻求支持，也是一个思路。比如，Taro 团队将支持的重点放在 React/Vue，而快应用以及 Flutter 和 Angular，暂且交给社区来适配和维护。")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"8022"}},[a("p",{attrs:{"data-nodeid":"8023"}},[a("strong",{attrs:{"data-nodeid":"8330"}},[t._v("跟进 Web 发展")]),t._v("。在运行时，小程序多端方案一般需要在小程序逻辑层中运行 React 或者是 Vue 的运行时版，然后通过适配层，实现自定义渲染器。这就要求设计开发者需要"),a("strong",{attrs:{"data-nodeid":"8331"}},[t._v("跟进 Web 发展及 Web 框架的运行时能力，且实现适配层")]),t._v("。这无疑对技术能力和水平提出了较高要求。如何处理 Web 和 Web 框架的关系、如何保持兼容互通，决定了小程序多端方案的生死。")])]),t._v(" "),a("li",{attrs:{"data-nodeid":"8024"}},[a("p",{attrs:{"data-nodeid":"8025"}},[a("strong",{attrs:{"data-nodeid":"8352"}},[t._v("渐进增强型能力")]),t._v("。无论是和 Web 兼容互通还是多种小程序之间的差异磨平，对于多端方案来说，很难从理论上彻底实现“write once，run evrywhere”。因此，这就需"),a("strong",{attrs:{"data-nodeid":"8353"}},[t._v("要框架级别上实现一套渐进增强能力")]),t._v("。这种能力，可以是语法或 DSL 层面的暂时性妥协/便利性扩展，也可以通过暴露全局变量，进行不同环境的业务分发。比如"),a("strong",{attrs:{"data-nodeid":"8354"}},[t._v("腾讯开源的")]),t._v(" "),a("a",{attrs:{href:"https://github.com/Tencent/omi/tree/master/packages/omix","data-nodeid":"8346"}},[t._v("OMIX")]),t._v(" "),a("strong",{attrs:{"data-nodeid":"8355"}},[t._v("框架")]),t._v("：OMIX 有自己的一套 DSL，但整体保留小程序已有的语法。在小程序已有语法之上，OMIX 还进行了扩充和增强，比如引入了 Vue 中比较有代表性的 computed。")])])]),t._v(" "),a("h3",{attrs:{"data-nodeid":"8026"}},[t._v("总结")]),t._v(" "),a("p",{attrs:{"data-nodeid":"8027"}},[t._v("这一讲我们针对小程序多端方案进行了原理层面的分析，同时站在更高的视角，对不同方案和多端框架进行了比对和技术展望。实际上，理解全部内容需要你对 React 和 Vue 框架原理有更深入的了解，也需要对编译原理和宿主环境（小程序底层实现架构）有清晰的认知。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"8028"}},[t._v("本讲内容如下：")]),t._v(" "),a("p",{attrs:{"data-nodeid":"8029"}},[a("img",{attrs:{src:"https://s0.lgstatic.com/i/image/M00/91/80/CgqCHmAOlbyATtP1AAHVogfDtTQ350.png",alt:"Drawing 13.png","data-nodeid":"8361"}})]),t._v(" "),a("p",{attrs:{"data-nodeid":"8030"}},[t._v("从小程序发展元年开始，到 2018 微信小程序的起飞，再到后续各大厂商快速跟进、各大寡头平台自建小程序生态，小程序现象带给我们的不仅仅是业务价值方面的讨论和启迪，也应该是对相关技术架构的巡礼和探索。作为开发者，我认为对技术的深度挖掘和运用，是能够始终矗立在时代风口浪尖的重要根基。")]),t._v(" "),a("p",{attrs:{"data-nodeid":"8031"}},[t._v("下一讲，我将带你分析 Flutter 和原生跨平台技术栈，同时梳理当下相关技术热点。跨平台其实是一个老生常谈的话题，技术方案也是历经变迁，但始终热点不断。下一讲的内容和今天的内容也有着千丝万缕的联系，别走开，我们下一讲再见！")]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"精选评论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#精选评论"}},[t._v("#")]),t._v(" 精选评论")]),t._v(" "),a("h5",{attrs:{id:"_9381"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9381"}},[t._v("#")]),t._v(" **9381")]),t._v(" "),a("blockquote",[a("p",[t._v("编译时不能vue语法和小程序的写法不能100%转换，所以需要运行时的介入，拦截patch方法去调用setData，而taro next/remax这种重心在运行时的话，性能方面仍需benchmark。omix是自己的一套DSL，但这有学习成本和招聘成本。")])]),t._v(" "),a("h5",{attrs:{id:"_0929"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0929"}},[t._v("#")]),t._v(" **0929")]),t._v(" "),a("blockquote",[a("p",[t._v("渐进增强的小程序框架，还有mpx，结合vue运行时的一些东西，性能做到了最优")])])])}),[],!1,null,null,null);a.default=e.exports}}]);