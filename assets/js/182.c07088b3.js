(window.webpackJsonp=window.webpackJsonp||[]).push([[182],{519:function(t,s,a){"use strict";a.r(s);var n=a(4),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",{attrs:{"data-nodeid":"118470"}},[t._v("性能始终是宏大的话题，前面几讲我们或多或少都有涉及性能优化的各种方案。其实，除了传统的性能优化手段以外，我们还需要对性能进行把关，目的是在性能恶化时有所感知、有所防控。那么，一个性能守卫系统即性能监控系统究竟应该如何设计呢？")]),t._v(" "),s("p",{attrs:{"data-nodeid":"118471"}},[t._v("借助 Node.js 的能力，这一讲我们就下钻到 CI/CD 流程，设计一个性能守卫系统。希望通过这一讲的学习，你可以认识到：Node.js 除了同构直出、数据聚合以外，还能做一些重要的，且有趣的服务。")]),t._v(" "),s("h3",{attrs:{"data-nodeid":"118472"}},[t._v("性能守卫理论基础")]),t._v(" "),s("p",{attrs:{"data-nodeid":"118473"}},[t._v("性能守卫的含义是：对每次上线进行性能把关，对性能恶化做到提前预警。它包含了一个性能监控平台，同时也需要给出更多的性能建议和指标建设。")]),t._v(" "),s("p",{attrs:{"data-nodeid":"118474"}},[t._v("那么我们如何感知到性能的好坏呢？我们对于 Load/DOMContentLoaded 事件、FP/FCP 指标已经耳熟能详了，下面我们再扩充几个更加现代化的指标。")]),t._v(" "),s("ul",{attrs:{"data-nodeid":"118475"}},[s("li",{attrs:{"data-nodeid":"118476"}},[s("p",{attrs:{"data-nodeid":"118477"}},[s("strong",{attrs:{"data-nodeid":"118648"}},[t._v("LCP（Largest Contentful Paint）")])])])]),t._v(" "),s("p",{attrs:{"data-nodeid":"118478"}},[t._v("衡量页面的加载体验，它表示视口内可见的最大内容元素的渲染时间。相比 FCP，这个指标可以"),s("strong",{attrs:{"data-nodeid":"118654"}},[t._v("更加真实地反映具体内容加载速度")]),t._v("。比如，如果页面渲染前有一个 loading 动画，那么 FCP 可能会以 loading 动画出现的时间为准，而 LCP 定义了 loading 动画加载后，真实渲染出内容的时间。")]),t._v(" "),s("ul",{attrs:{"data-nodeid":"118479"}},[s("li",{attrs:{"data-nodeid":"118480"}},[s("p",{attrs:{"data-nodeid":"118481"}},[s("strong",{attrs:{"data-nodeid":"118658"}},[t._v("FID（First Input Delay）")])])])]),t._v(" "),s("p",{attrs:{"data-nodeid":"118482"}},[t._v("衡量可交互性，它表示用户和页面进行首次交互操作所花费的时间。它比 TTI（Time to Interact）更加提前，这个阶段虽然页面已经显示出部分内容，但并不能完全具备可交互性，对于用户的响应可能会有较大的延迟。")]),t._v(" "),s("ul",{attrs:{"data-nodeid":"118483"}},[s("li",{attrs:{"data-nodeid":"118484"}},[s("p",{attrs:{"data-nodeid":"118485"}},[s("strong",{attrs:{"data-nodeid":"118663"}},[t._v("CLS（Cumulative Layout Shift）")])])])]),t._v(" "),s("p",{attrs:{"data-nodeid":"118486"}},[t._v("衡量视觉稳定性，表示页面的整个生命周期中，发生的每个意外的样式移动的所有单独布局更改得分的总和。所以这个分数当然"),s("strong",{attrs:{"data-nodeid":"118669"}},[t._v("越小越好")]),t._v("。")]),t._v(" "),s("p",{attrs:{"data-nodeid":"118487"}},[t._v("以上是几个重要的、现代化的性能指标。结合我们传统的 FP/FCP/FMP 时间等，我们可以构建出一个相对完备的指标系统。这里我们就不再一一分析如何获取和收集这些性能指标了，相关内容社区上有不少文章。我们把目光放到更高层面，请你思考一下：如何从这些指标中，得到监控素材？")]),t._v(" "),s("p",{attrs:{"data-nodeid":"118488"}},[t._v("业界公认的监控素材主要由两方面提供：")]),t._v(" "),s("ul",{attrs:{"data-nodeid":"118489"}},[s("li",{attrs:{"data-nodeid":"118490"}},[s("p",{attrs:{"data-nodeid":"118491"}},[t._v("真实用户监控（Real User Monitoring，RUM）")])]),t._v(" "),s("li",{attrs:{"data-nodeid":"118492"}},[s("p",{attrs:{"data-nodeid":"118493"}},[t._v("合成监控（Synthetic Monitoring，SYN）")])])]),t._v(" "),s("p",{attrs:{"data-nodeid":"118494"}},[t._v("真实用户监控是基于用户真实访问应用情况，在应用生命周期内计算产出性能指标，并进行上报。开发者拉取日志服务器上的指标数据，进行清洗加工，最终生成真实的访问监控报告。")]),t._v(" "),s("p",{attrs:{"data-nodeid":"118495"}},[t._v("真实用户监控一般搭配稳定的 SDK，会"),s("strong",{attrs:{"data-nodeid":"118680"}},[t._v("在一定程度上影响用户的访问性能")]),t._v("，也给用户带来了额外的流量消耗。")]),t._v(" "),s("p",{attrs:{"data-nodeid":"118496"}},[t._v("合成监控是一种实验室数据，它指的是在某一个模拟场景中，通过工具，搭配规则和性能审计条目，得到一个合成的监控报告。")]),t._v(" "),s("p",{attrs:{"data-nodeid":"118497"}},[t._v("合成监控的优点比较明显，它的实现比较简单，有现成成熟的解决方案；如果搭配丰富的场景和规则，得到的数据类型也会较多。但它的缺点是"),s("strong",{attrs:{"data-nodeid":"118691"}},[t._v("数据量相对较小")]),t._v("，且"),s("strong",{attrs:{"data-nodeid":"118692"}},[t._v("模拟条件配置相对复杂")]),t._v("，无法完全反映真实场景。")]),t._v(" "),s("p",{attrs:{"data-nodeid":"118498"}},[t._v("而在 CI/CD pipeline 上，我们需要设计的性能守卫方案就是一种合成监控方案。在方案设计上，我们需要做到扬长避短。")]),t._v(" "),s("h3",{attrs:{"data-nodeid":"118499"}},[t._v("Lighthouse 原理介绍")]),t._v(" "),s("p",{attrs:{"data-nodeid":"118500"}},[t._v("前文提到，合成监控有成熟的方案，比如 Lighthouse。我们的方案也基于 Lighthouse 进行，这里对 Lighthouse 原理进行介绍。")]),t._v(" "),s("p",{attrs:{"data-nodeid":"118501"}},[t._v("Lighthouse 是一个开源的自动化工具，它提供了四种使用方式，分别是：")]),t._v(" "),s("ul",{attrs:{"data-nodeid":"118502"}},[s("li",{attrs:{"data-nodeid":"118503"}},[s("p",{attrs:{"data-nodeid":"118504"}},[t._v("Chrome DevTools")])]),t._v(" "),s("li",{attrs:{"data-nodeid":"118505"}},[s("p",{attrs:{"data-nodeid":"118506"}},[t._v("Chrome 插件")])]),t._v(" "),s("li",{attrs:{"data-nodeid":"118507"}},[s("p",{attrs:{"data-nodeid":"118508"}},[t._v("Node cli")])]),t._v(" "),s("li",{attrs:{"data-nodeid":"118509"}},[s("p",{attrs:{"data-nodeid":"118510"}},[t._v("Node module")])])]),t._v(" "),s("p",{attrs:{"data-nodeid":"118511"}},[t._v("我们先通过 Chrome DevTools 来迅速体验一下 Lighthouse。在 Audits 面板下，进行相关测试，可以得到一个网址的相关测试报告，内容如下图：")]),t._v(" "),s("p",{attrs:{"data-nodeid":"120345"}},[s("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M00/1E/30/Cgp9HWBQb2CADycKAAQtT4ZYeUw221.png",alt:"2021316-164058.png","data-nodeid":"120348"}})]),t._v(" "),s("p",{attrs:{"data-nodeid":"118514"}},[t._v("这个报告是如何得出的呢？我们先来看 Lighthouse 的架构图：")]),t._v(" "),s("p",{attrs:{"data-nodeid":"121089"}},[s("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M00/1E/30/Cgp9HWBQb2mAJMDKAAY-FB_Vr9U016.png",alt:"2021316-16411.png","data-nodeid":"121092"}})]),t._v(" "),s("div",{attrs:{"data-nodeid":"121825"}},[s("p",{staticStyle:{"text-align":"center"}},[t._v("Lighthouse 架构图")])]),t._v(" "),s("p",{attrs:{"data-nodeid":"118518"}},[t._v("图中的一些关键名词：")]),t._v(" "),s("ul",{attrs:{"data-nodeid":"118519"}},[s("li",{attrs:{"data-nodeid":"118520"}},[s("p",{attrs:{"data-nodeid":"118521"}},[t._v("Driver（驱动器），根据"),s("a",{attrs:{href:"https://chromedevtools.github.io/devtools-protocol/","data-nodeid":"118720"}},[t._v("Chrome Debugging Protocol")]),t._v("协议与浏览器交互的对象；")])]),t._v(" "),s("li",{attrs:{"data-nodeid":"118522"}},[s("p",{attrs:{"data-nodeid":"118523"}},[t._v("Gatherers（采集器），调用 Driver 运行浏览器命令后得到的网页基础信息，每个采集器都会收集自己的目标信息，并生成中间产物（Artifacts）；")])]),t._v(" "),s("li",{attrs:{"data-nodeid":"118524"}},[s("p",{attrs:{"data-nodeid":"118525"}},[t._v("Artifacts（中间产物），一系列 Gatherers 的集合，会被 Audits 使用，并计算得分；")])]),t._v(" "),s("li",{attrs:{"data-nodeid":"118526"}},[s("p",{attrs:{"data-nodeid":"118527"}},[t._v("Audits（审计项），以 Artifacts 作为输入，进行性能测试并评估分数后得到的 LHAR（LightHouse Audit Result Object）标准数据对象。")])])]),t._v(" "),s("p",{attrs:{"data-nodeid":"118528"}},[t._v("我们结合上述名词，对 Lighthouse 架构原理进行分析：")]),t._v(" "),s("ul",{attrs:{"data-nodeid":"118529"}},[s("li",{attrs:{"data-nodeid":"118530"}},[s("p",{attrs:{"data-nodeid":"118531"}},[t._v("首先，Lighthouse 驱动 Driver，底层通过 Chrome DevTool Protocol 调用浏览器进行应用的加载和渲染；")])]),t._v(" "),s("li",{attrs:{"data-nodeid":"118532"}},[s("p",{attrs:{"data-nodeid":"118533"}},[t._v("然后通过 Gatherers 模块集合，获取收集到的 Artifacts 信息；")])]),t._v(" "),s("li",{attrs:{"data-nodeid":"118534"}},[s("p",{attrs:{"data-nodeid":"118535"}},[t._v("Artifacts 信息在 Auditing 阶段，通过对自定义指标的审计，得到 Audits 结果，并生成相关文件。")])])]),t._v(" "),s("p",{attrs:{"data-nodeid":"118536"}},[t._v("从该流程中我们可以得到的关键信息：")]),t._v(" "),s("ul",{attrs:{"data-nodeid":"118537"}},[s("li",{attrs:{"data-nodeid":"118538"}},[s("p",{attrs:{"data-nodeid":"118539"}},[t._v("Lighthouse 会与浏览器建立连接，并通过 CDP 与浏览器进行交互；")])]),t._v(" "),s("li",{attrs:{"data-nodeid":"118540"}},[s("p",{attrs:{"data-nodeid":"118541"}},[t._v("通过 Lighthouse，我们可以自定义审计项并得到审计结果。")])])]),t._v(" "),s("p",{attrs:{"data-nodeid":"118542"}},[t._v("在我们的性能守卫系统中，是采用 Lighthouse 的后两种使用方式（Node.js cli/ Node.js 模块）进行性能跑分的，下面代码给出一个基本的使用方式：")]),t._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"118543"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" fs = require("),s("span",{staticClass:"hljs-string"},[t._v("'fs'")]),t._v(");\n"),s("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" lighthouse = require("),s("span",{staticClass:"hljs-string"},[t._v("'lighthouse'")]),t._v(");\n"),s("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" chromeLauncher = require("),s("span",{staticClass:"hljs-string"},[t._v("'chrome-launcher'")]),t._v(");\n(async () => {\n  "),s("span",{staticClass:"hljs-comment"},[t._v("// 启动一个 chrome，")]),t._v("\n  "),s("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" chrome = await chromeLauncher.launch({chromeFlags: ["),s("span",{staticClass:"hljs-string"},[t._v("'--headless'")]),t._v("]});\n  "),s("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" options = {logLevel: "),s("span",{staticClass:"hljs-string"},[t._v("'info'")]),t._v(", output: "),s("span",{staticClass:"hljs-string"},[t._v("'html'")]),t._v(", onlyCategories: ["),s("span",{staticClass:"hljs-string"},[t._v("'performance'")]),t._v("], port: chrome.port};\n  "),s("span",{staticClass:"hljs-comment"},[t._v("// 使用 lighthouse 对目标页面进行跑分")]),t._v("\n  "),s("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" runnerResult = "),s("span",{staticClass:"hljs-function"},[t._v("await "),s("span",{staticClass:"hljs-title"},[t._v("lighthouse")]),s("span",{staticClass:"hljs-params"},[t._v("("),s("span",{staticClass:"hljs-string"},[t._v("'https://example.com'")]),t._v(", options)")])]),t._v(";\n  "),s("span",{staticClass:"hljs-comment"},[t._v("// `.report` 是一个 html 类型的分析页面")]),t._v("\n  "),s("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" reportHtml = runnerResult.report;\n  fs.writeFileSync("),s("span",{staticClass:"hljs-string"},[t._v("'lhreport.html'")]),t._v(", reportHtml);\n  "),s("span",{staticClass:"hljs-comment"},[t._v("// `.lhr` 是用于 lighthous-ci 的结果集合")]),t._v("\n  console.log("),s("span",{staticClass:"hljs-string"},[t._v("'Report is done for'")]),t._v(", runnerResult.lhr.finalUrl);\n  console.log("),s("span",{staticClass:"hljs-string"},[t._v("'Performance score was'")]),t._v(", runnerResult.lhr.categories.performance.score * "),s("span",{staticClass:"hljs-number"},[t._v("100")]),t._v(");\n  await chrome.kill();\n})();\n")])]),t._v(" "),s("p",{attrs:{"data-nodeid":"118544"}},[t._v("上面的代码描述了一个简单的 Node.js 环境使用 Lighthouse 的场景。其中提到了 lighthous-ci，这是官方给出的 CI/CD 过程接入 Lighthouse 的方案。但一般在企业中，CI/CD 过程相对敏感，我们的性能守卫系统就需要"),s("strong",{attrs:{"data-nodeid":"118738"}},[t._v("在私有前提下，介入 CI/CD 流程")]),t._v("，本质上来说是实现一个专有的 lighthous-ci。")]),t._v(" "),s("h3",{attrs:{"data-nodeid":"118545"}},[t._v("性能守卫系统：Perf-patronus")]),t._v(" "),s("p",{attrs:{"data-nodeid":"118546"}},[t._v("我们暂且给性能守卫系统起名为 Perf-patronus，寓意为性能-护卫神。")]),t._v(" "),s("p",{attrs:{"data-nodeid":"118547"}},[t._v("预计 Perf-patronus 会默认监控以下性能指标：")]),t._v(" "),s("ul",{attrs:{"data-nodeid":"118548"}},[s("li",{attrs:{"data-nodeid":"118549"}},[s("p",{attrs:{"data-nodeid":"118550"}},[t._v("FCP")])]),t._v(" "),s("li",{attrs:{"data-nodeid":"118551"}},[s("p",{attrs:{"data-nodeid":"118552"}},[t._v("Total Blocking Time")])]),t._v(" "),s("li",{attrs:{"data-nodeid":"118553"}},[s("p",{attrs:{"data-nodeid":"118554"}},[t._v("First CPU Idle")])]),t._v(" "),s("li",{attrs:{"data-nodeid":"118555"}},[s("p",{attrs:{"data-nodeid":"118556"}},[t._v("TTI")])]),t._v(" "),s("li",{attrs:{"data-nodeid":"118557"}},[s("p",{attrs:{"data-nodeid":"118558"}},[t._v("Speed Index")])]),t._v(" "),s("li",{attrs:{"data-nodeid":"118559"}},[s("p",{attrs:{"data-nodeid":"118560"}},[t._v("LCP")])])]),t._v(" "),s("p",{attrs:{"data-nodeid":"118561"}},[t._v("其工作架构和流程如下图所示：")]),t._v(" "),s("p",{attrs:{"data-nodeid":"122556"}},[s("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M00/1E/2D/CioPOWBQb4SAdIJfAAJdsaoSFEo871.png",alt:"2021316-16414.png","data-nodeid":"122559"}})]),t._v(" "),s("div",{attrs:{"data-nodeid":"123282"}},[s("p",{staticStyle:{"text-align":"center"}},[t._v("Perf-patronus 工作架构及流程图")])]),t._v(" "),s("ul",{attrs:{"data-nodeid":"118565"}},[s("li",{attrs:{"data-nodeid":"118566"}},[s("p",{attrs:{"data-nodeid":"118567"}},[t._v("特定环境完成 MR 部署后，开始进行性能体检服务。")])]),t._v(" "),s("li",{attrs:{"data-nodeid":"118568"}},[s("p",{attrs:{"data-nodeid":"118569"}},[t._v("性能体检服务由消息队列 worker 消费完成。")])]),t._v(" "),s("li",{attrs:{"data-nodeid":"118570"}},[s("p",{attrs:{"data-nodeid":"118571"}},[t._v("每一次性能体检产出体检数据，根据数据内容是否达标，进行后续消息提醒；体检数据内容同时被性能守卫系统平台所消费，展现相关页面的性能情况。")])]),t._v(" "),s("li",{attrs:{"data-nodeid":"118572"}},[s("p",{attrs:{"data-nodeid":"118573"}},[t._v("性能数据由 Redis 存储。")])]),t._v(" "),s("li",{attrs:{"data-nodeid":"118574"}},[s("p",{attrs:{"data-nodeid":"118575"}},[t._v("性能体检相关富媒体资源（页面截图等）可以由容器持久化目录存储，或上传到 OSS 服务")])])]),t._v(" "),s("p",{attrs:{"data-nodeid":"118576"}},[t._v("预计平台使用情况，如下图所示：")]),t._v(" "),s("p",{attrs:{"data-nodeid":"124003"}},[s("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M00/1E/2D/CioPOWBQb5CALjlnAAK6aSqJM3s808.png",alt:"2021316-164050.png","data-nodeid":"124006"}})]),t._v(" "),s("p",{attrs:{"data-nodeid":"118579"}},[t._v("技术架构流程相对清晰，但我们需要思考一个重要的问题：如何真实反映用户情况？并以此为出发点，完善性能守卫系统的相关设计。")]),t._v(" "),s("p",{attrs:{"data-nodeid":"118580"}},[s("strong",{attrs:{"data-nodeid":"118772"}},[t._v("如何真实反映用户情况？")])]),t._v(" "),s("p",{attrs:{"data-nodeid":"118581"}},[t._v("真实用户访问页面的情况千变万化，即便我们的代码没有变化，其他可变因素也会大量存在。因此我们应该统一共识一个相对稳定可靠的性能评判标准，其中关键一环是分析可能出现的可变因素，对每一类可变因素进行不同针对性设计，保证每次性能服务产出结果的说服力和稳定性。")]),t._v(" "),s("p",{attrs:{"data-nodeid":"118582"}},[s("strong",{attrs:{"data-nodeid":"118777"}},[t._v("常见不确定和波动因素")])]),t._v(" "),s("ul",{attrs:{"data-nodeid":"118583"}},[s("li",{attrs:{"data-nodeid":"118584"}},[s("p",{attrs:{"data-nodeid":"118585"}},[s("strong",{attrs:{"data-nodeid":"118781"}},[t._v("页面不确定性")])])])]),t._v(" "),s("p",{attrs:{"data-nodeid":"118586"}},[t._v("比如 A/B 实验情况。这种情况性能体检服务无法进行处理，需要接入者保证页面性能的可对比性。")]),t._v(" "),s("ul",{attrs:{"data-nodeid":"118587"}},[s("li",{attrs:{"data-nodeid":"118588"}},[s("p",{attrs:{"data-nodeid":"118589"}},[s("strong",{attrs:{"data-nodeid":"118786"}},[t._v("用户侧网络情况不确定性")])])])]),t._v(" "),s("p",{attrs:{"data-nodeid":"118590"}},[t._v("针对这种情况，性能体检服务应该设计有可靠的 Throttling 机制，以及较合理的请求等待时间。")]),t._v(" "),s("ul",{attrs:{"data-nodeid":"118591"}},[s("li",{attrs:{"data-nodeid":"118592"}},[s("p",{attrs:{"data-nodeid":"118593"}},[s("strong",{attrs:{"data-nodeid":"118791"}},[t._v("终端设备不确定性")])])])]),t._v(" "),s("p",{attrs:{"data-nodeid":"118594"}},[t._v("性能体检服务应该设计有可靠的 CPU Simulating 能力，并统一 CPU 能力测试范围标准。")]),t._v(" "),s("ul",{attrs:{"data-nodeid":"118595"}},[s("li",{attrs:{"data-nodeid":"118596"}},[s("p",{attrs:{"data-nodeid":"118597"}},[s("strong",{attrs:{"data-nodeid":"118798"}},[t._v("页面服务器不稳定性")]),s("br"),t._v("\n这方面因素影响较小，应该不用过多考虑。对于服务挂掉的情况，反映出性能异常即可。")])]),t._v(" "),s("li",{attrs:{"data-nodeid":"118598"}},[s("p",{attrs:{"data-nodeid":"118599"}},[s("strong",{attrs:{"data-nodeid":"118802"}},[t._v("性能体检服务的稳定性")])])])]),t._v(" "),s("p",{attrs:{"data-nodeid":"118600"}},[t._v("在同一台机器上，如果不确定有其他应用服务，会影响性能体检服务的稳定性和一致性。不过预计该影响因素不大，可以通过模拟网络环境和 CPU 能力，来保障性能体检服务的稳定性和一致性。")]),t._v(" "),s("p",{attrs:{"data-nodeid":"118601"}},[t._v("在对性能服务的跑分设计时，都需要考虑上述可变因素，大体上我们可以通过以下手段，最大化地磨平差异：")]),t._v(" "),s("ul",{attrs:{"data-nodeid":"118602"}},[s("li",{attrs:{"data-nodeid":"118603"}},[s("p",{attrs:{"data-nodeid":"118604"}},[t._v("保证性能体检服务的硬件/容器能力；")])]),t._v(" "),s("li",{attrs:{"data-nodeid":"118605"}},[s("p",{attrs:{"data-nodeid":"118606"}},[t._v("需要接入者清楚代码或页面变动对页面性能可能产生的影响，并做好相应接入侧处理；")])]),t._v(" "),s("li",{attrs:{"data-nodeid":"118607"}},[s("p",{attrs:{"data-nodeid":"118608"}},[s("strong",{attrs:{"data-nodeid":"118811"}},[t._v("自动化重复多次跑性能服务，取平均值")]),t._v("；")])]),t._v(" "),s("li",{attrs:{"data-nodeid":"118609"}},[s("p",{attrs:{"data-nodeid":"118610"}},[t._v("模拟多种网络/终端情况，设计得分权重。")])])]),t._v(" "),s("p",{attrs:{"data-nodeid":"118611"}},[s("strong",{attrs:{"data-nodeid":"118816"}},[t._v("如何解决有“用户态”页面的鉴权问题？")])]),t._v(" "),s("p",{attrs:{"data-nodeid":"118612"}},[t._v("对于有登录状态的页面，我们提供以下几种方案进行登录状态的性能服务：")]),t._v(" "),s("ul",{attrs:{"data-nodeid":"118613"}},[s("li",{attrs:{"data-nodeid":"118614"}},[s("p",{attrs:{"data-nodeid":"118615"}},[t._v("通过"),s("a",{attrs:{href:"https://github.com/puppeteer/puppeteer/blob/main/docs/api.md#pagesetcookiecookies","data-nodeid":"118821"}},[t._v("Puppeteer page.cookie")]),t._v("，测试时通过 script 实现登录态；")])]),t._v(" "),s("li",{attrs:{"data-nodeid":"118616"}},[s("p",{attrs:{"data-nodeid":"118617"}},[t._v("通过请求服务时，传递参数解决登录态问题。")])])]),t._v(" "),s("h4",{attrs:{"data-nodeid":"126858"}},[t._v("整体流程")]),t._v(" "),s("p",{attrs:{"data-nodeid":"118619"}},[t._v("下面我们通过代码来串联整个流程。入口任务：")]),t._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"118620"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-function"},[t._v("async "),s("span",{staticClass:"hljs-title"},[t._v("run")]),s("span",{staticClass:"hljs-params"},[t._v("(runOptions: RunOptions)")]),t._v(" ")]),t._v("{\n\t"),s("span",{staticClass:"hljs-comment"},[t._v("// 检查相关数据")]),t._v("\n  "),s("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" results = {};\n  "),s("span",{staticClass:"hljs-comment"},[t._v("// 使用 Puppeteer 创建一个无头浏览器")]),t._v("\n  "),s("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" context = await "),s("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".createPuppeteer(runOptions);\n  "),s("span",{staticClass:"hljs-keyword"},[t._v("try")]),t._v(" {\n    "),s("span",{staticClass:"hljs-comment"},[t._v("// 执行必要的登录流程")]),t._v("\n    await "),s("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".Login(context);\n    "),s("span",{staticClass:"hljs-comment"},[t._v("// 页面打开前的钩子函数")]),t._v("\n    await "),s("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".before(context);\n    "),s("span",{staticClass:"hljs-comment"},[t._v("// 打开页面，获取 lighthouse 数据")]),t._v("\n    await "),s("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".getLighthouseResult(context);\n    "),s("span",{staticClass:"hljs-comment"},[t._v("// 页面打开后的钩子函数")]),t._v("\n    await "),s("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".after(context, results);\n    "),s("span",{staticClass:"hljs-comment"},[t._v("// 收集页面性能数据")]),t._v("\n    "),s("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" await "),s("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".collectArtifact(context, results);\n  } "),s("span",{staticClass:"hljs-keyword"},[t._v("catch")]),t._v(" (error) {\n    "),s("span",{staticClass:"hljs-keyword"},[t._v("throw")]),t._v(" error;\n  } "),s("span",{staticClass:"hljs-keyword"},[t._v("finally")]),t._v(" {\n    "),s("span",{staticClass:"hljs-comment"},[t._v("// 关闭页面和无头浏览器")]),t._v("\n    await "),s("span",{staticClass:"hljs-keyword"},[t._v("this")]),t._v(".disposeDriver(context);\n  }\n}\n")])]),t._v(" "),s("p",{attrs:{"data-nodeid":"118621"}},[t._v("其中，创建一个 Puppeteer 无头浏览器的逻辑，如下代码：")]),t._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"118622"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-function"},[t._v("async "),s("span",{staticClass:"hljs-title"},[t._v("createPuppeteer")]),t._v(" "),s("span",{staticClass:"hljs-params"},[t._v("(runOptions: RunOptions)")]),t._v(" ")]),t._v("{\n\t"),s("span",{staticClass:"hljs-comment"},[t._v("// 启动配置项可以参考 [puppeteerlaunchoptions](https://zhaoqize.github.io/puppeteer-api-zh_CN/#?product=Puppeteer&version=v5.3.0&show=api-puppeteerlaunchoptions)")]),t._v("\n  "),s("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" launchOptions: puppeteer.LaunchOptions = {\n    headless: "),s("span",{staticClass:"hljs-keyword"},[t._v("true")]),t._v(", "),s("span",{staticClass:"hljs-comment"},[t._v("// 是否采用无头模式")]),t._v("\n    defaultViewport: { width: "),s("span",{staticClass:"hljs-number"},[t._v("1440")]),t._v(", height: "),s("span",{staticClass:"hljs-number"},[t._v("960")]),t._v(" }, "),s("span",{staticClass:"hljs-comment"},[t._v("// 指定页面视口宽高")]),t._v("\n    args: ["),s("span",{staticClass:"hljs-string"},[t._v("'--no-sandbox'")]),t._v(", "),s("span",{staticClass:"hljs-string"},[t._v("'--disable-dev-shm-usage'")]),t._v("],\n    "),s("span",{staticClass:"hljs-comment"},[t._v("// Chromium 安装路径")]),t._v("\n    executablePath: "),s("span",{staticClass:"hljs-string"},[t._v("'xxx'")]),t._v(",\n  };\n  "),s("span",{staticClass:"hljs-comment"},[t._v("// 创建一个浏览器对象")]),t._v("\n  "),s("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" browser = await puppeteer.launch(launchOptions);\n  "),s("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" page = (await browser.pages())["),s("span",{staticClass:"hljs-number"},[t._v("0")]),t._v("];\n  "),s("span",{staticClass:"hljs-comment"},[t._v("// 返回浏览器和页面对象")]),t._v("\n  "),s("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" { browser, page };\n}\n")])]),t._v(" "),s("p",{attrs:{"data-nodeid":"118623"}},[t._v("打开相关页面，并执行 Lighthouse 模块，如下代码所示：")]),t._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"118624"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-function"},[t._v("async "),s("span",{staticClass:"hljs-title"},[t._v("getLighthouseResult")]),s("span",{staticClass:"hljs-params"},[t._v("(context: Context)")]),t._v(" ")]),t._v("{\n\t"),s("span",{staticClass:"hljs-comment"},[t._v("// 获取上下文信息，包括 browser 和页面地址")]),t._v("\n  "),s("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" { browser, url } = context;\n  "),s("span",{staticClass:"hljs-comment"},[t._v("// 使用 lighthouse 模块进行性能采集")]),t._v("\n  "),s("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" { artifacts, lhr } = "),s("span",{staticClass:"hljs-function"},[t._v("await "),s("span",{staticClass:"hljs-title"},[t._v("lighthouse")]),s("span",{staticClass:"hljs-params"},[t._v("(url, {\n    port: new URL(browser.wsEndpoint()")]),t._v(").port,\n    output: 'json',\n    logLevel: 'info',\n    emulatedFormFactor: 'desktop',\n    throttling: ")]),t._v("{\n      rttMs: "),s("span",{staticClass:"hljs-number"},[t._v("40")]),t._v(",\n      throughputKbps: "),s("span",{staticClass:"hljs-number"},[t._v("10")]),t._v(" * "),s("span",{staticClass:"hljs-number"},[t._v("1024")]),t._v(",\n      cpuSlowdownMultiplier: "),s("span",{staticClass:"hljs-number"},[t._v("1")]),t._v(",\n      requestLatencyMs: "),s("span",{staticClass:"hljs-number"},[t._v("0")]),t._v(", \n      downloadThroughputKbps: "),s("span",{staticClass:"hljs-number"},[t._v("0")]),t._v(",\n      uploadThroughputKbps: "),s("span",{staticClass:"hljs-number"},[t._v("0")]),t._v(",\n    },\n    disableDeviceEmulation: "),s("span",{staticClass:"hljs-keyword"},[t._v("true")]),t._v(",\n    "),s("span",{staticClass:"hljs-comment"},[t._v("// 只检测 performance 模块")]),t._v("\n    onlyCategories: ["),s("span",{staticClass:"hljs-string"},[t._v("'performance'")]),t._v("],\n  });\n  "),s("span",{staticClass:"hljs-comment"},[t._v("// 回填数据")]),t._v("\n  context.lhr = lhr;\n  context.artifacts = artifacts;\n}\n")])]),t._v(" "),s("p",{attrs:{"data-nodeid":"118625"}},[t._v("上述流程都是常规启用 Lighthouse 模块，在 Node.js 环境中对相关页面执行 Lighthouse 的逻辑。")]),t._v(" "),s("p",{attrs:{"data-nodeid":"118626"}},[t._v("我们自定义的逻辑往往可以通过  Lighthouse 插件实现，一个 Lighthouse 插件就是一个 Node.js 模块，在插件中我们可以定义 Lighthouse 的检查项，并在产出报告中以一个新的 category 呈现。")]),t._v(" "),s("p",{attrs:{"data-nodeid":"118627"}},[t._v("举个例子，我们想要实现“检查页面中是否含有大小超过 5MB 的 GIF  图片”的任务，如以下代码：")]),t._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"118628"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-keyword"},[t._v("module")]),t._v("."),s("span",{staticClass:"hljs-keyword"},[t._v("exports")]),t._v(" = {\n  "),s("span",{staticClass:"hljs-comment"},[t._v("// 对应 audits")]),t._v("\n  audits: [{\n    path: "),s("span",{staticClass:"hljs-string"},[t._v("'lighthouse-plugin-cinememe/audits/cinememe.js'")]),t._v(",\n  }],\n  "),s("span",{staticClass:"hljs-comment"},[t._v("// 该 plugin 对应的 category")]),t._v("\n  category: {\n    title: "),s("span",{staticClass:"hljs-string"},[t._v("'Obligatory Cinememes'")]),t._v(",\n    description: "),s("span",{staticClass:"hljs-string"},[t._v("'Modern webapps should have cinememes to ensure a positive '")]),t._v(" +\n      "),s("span",{staticClass:"hljs-string"},[t._v("'user experience.'")]),t._v(",\n    auditRefs: [\n      {id: "),s("span",{staticClass:"hljs-string"},[t._v("'cinememe'")]),t._v(", weight: "),s("span",{staticClass:"hljs-number"},[t._v("1")]),t._v("},\n    ],\n  },\n};\n")])]),t._v(" "),s("p",{attrs:{"data-nodeid":"118629"}},[t._v("对应自定义 Audits，如下代码：")]),t._v(" "),s("pre",{staticClass:"lang-java",attrs:{"data-nodeid":"118630"}},[s("code",{attrs:{"data-language":"java"}},[s("span",{staticClass:"hljs-string"},[t._v("'use strict'")]),t._v(";\n"),s("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" Audit = require("),s("span",{staticClass:"hljs-string"},[t._v("'lighthouse'")]),t._v(").Audit;\n"),s("span",{staticClass:"hljs-comment"},[t._v("// 继承 Audit 类")]),t._v("\n"),s("span",{staticClass:"hljs-class"},[s("span",{staticClass:"hljs-keyword"},[t._v("class")]),t._v(" "),s("span",{staticClass:"hljs-title"},[t._v("CinememeAudit")]),t._v(" "),s("span",{staticClass:"hljs-keyword"},[t._v("extends")]),t._v(" "),s("span",{staticClass:"hljs-title"},[t._v("Audit")]),t._v(" ")]),t._v("{\n  "),s("span",{staticClass:"hljs-function"},[s("span",{staticClass:"hljs-keyword"},[t._v("static")]),t._v(" get "),s("span",{staticClass:"hljs-title"},[t._v("meta")]),s("span",{staticClass:"hljs-params"},[t._v("()")]),t._v(" ")]),t._v("{\n    "),s("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" {\n      id: "),s("span",{staticClass:"hljs-string"},[t._v("'cinememe'")]),t._v(",\n      title: "),s("span",{staticClass:"hljs-string"},[t._v("'Has cinememes'")]),t._v(",\n      failureTitle: "),s("span",{staticClass:"hljs-string"},[t._v("'Does not have cinememes'")]),t._v(",\n      description: "),s("span",{staticClass:"hljs-string"},[t._v("'This page should have a cinememe in order to be a modern '")]),t._v(" +\n        "),s("span",{staticClass:"hljs-string"},[t._v("'webapp.'")]),t._v(",\n      requiredArtifacts: ["),s("span",{staticClass:"hljs-string"},[t._v("'ImageElements'")]),t._v("],\n    };\n  }\n  "),s("span",{staticClass:"hljs-function"},[s("span",{staticClass:"hljs-keyword"},[t._v("static")]),t._v(" "),s("span",{staticClass:"hljs-title"},[t._v("audit")]),s("span",{staticClass:"hljs-params"},[t._v("(artifacts)")]),t._v(" ")]),t._v("{\n    "),s("span",{staticClass:"hljs-comment"},[t._v("// 默认 hasCinememe 为 false（大小超过 5MB 的 GIF 图片）")]),t._v("\n    let hasCinememe = "),s("span",{staticClass:"hljs-keyword"},[t._v("false")]),t._v(";\n    "),s("span",{staticClass:"hljs-comment"},[t._v("// 非 Cinememe 图片结果")]),t._v("\n    "),s("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" results = [];\n    "),s("span",{staticClass:"hljs-comment"},[t._v("// 过滤筛选相关图片")]),t._v("\n    artifacts.ImageElements.filter(image => {\n      "),s("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" !image.isCss &&\n        image.mimeType &&\n        image.mimeType !== "),s("span",{staticClass:"hljs-string"},[t._v("'image/svg+xml'")]),t._v(" &&\n        image.naturalHeight > "),s("span",{staticClass:"hljs-number"},[t._v("5")]),t._v(" &&\n        image.naturalWidth > "),s("span",{staticClass:"hljs-number"},[t._v("5")]),t._v(" &&\n        image.displayedWidth &&\n        image.displayedHeight;\n    }).forEach(image => {\n      "),s("span",{staticClass:"hljs-keyword"},[t._v("if")]),t._v(" (image.mimeType === "),s("span",{staticClass:"hljs-string"},[t._v("'image/gif'")]),t._v(" && image.resourceSize >= "),s("span",{staticClass:"hljs-number"},[t._v("5000000")]),t._v(") {\n        hasCinememe = "),s("span",{staticClass:"hljs-keyword"},[t._v("true")]),t._v(";\n      } "),s("span",{staticClass:"hljs-keyword"},[t._v("else")]),t._v(" {\n        results.push(image);\n      }\n    });\n    "),s("span",{staticClass:"hljs-keyword"},[t._v("const")]),t._v(" headings = [\n      {key: "),s("span",{staticClass:"hljs-string"},[t._v("'src'")]),t._v(", itemType: "),s("span",{staticClass:"hljs-string"},[t._v("'thumbnail'")]),t._v(", text: "),s("span",{staticClass:"hljs-string"},[t._v("''")]),t._v("},\n      {key: "),s("span",{staticClass:"hljs-string"},[t._v("'src'")]),t._v(", itemType: "),s("span",{staticClass:"hljs-string"},[t._v("'url'")]),t._v(", text: "),s("span",{staticClass:"hljs-string"},[t._v("'url'")]),t._v("},\n      {key: "),s("span",{staticClass:"hljs-string"},[t._v("'mimeType'")]),t._v(", itemType: "),s("span",{staticClass:"hljs-string"},[t._v("'text'")]),t._v(", text: "),s("span",{staticClass:"hljs-string"},[t._v("'MIME type'")]),t._v("},\n      {key: "),s("span",{staticClass:"hljs-string"},[t._v("'resourceSize'")]),t._v(", itemType: "),s("span",{staticClass:"hljs-string"},[t._v("'text'")]),t._v(", text: "),s("span",{staticClass:"hljs-string"},[t._v("'Resource Size'")]),t._v("},\n    ];\n    "),s("span",{staticClass:"hljs-keyword"},[t._v("return")]),t._v(" {\n      score: hasCinememe > "),s("span",{staticClass:"hljs-number"},[t._v("0")]),t._v(" ? "),s("span",{staticClass:"hljs-number"},[t._v("1")]),t._v(" : "),s("span",{staticClass:"hljs-number"},[t._v("0")]),t._v(",\n      details: Audit.makeTableDetails(headings, results),\n    };\n  }\n}\n"),s("span",{staticClass:"hljs-keyword"},[t._v("module")]),t._v("."),s("span",{staticClass:"hljs-keyword"},[t._v("exports")]),t._v(" = CinememeAudit;\n")])]),t._v(" "),s("p",{attrs:{"data-nodeid":"118631"}},[t._v("通过上面插件，我们就可以在 Node.js 环境中，结合 CI/CD 流程，找出页面中大小超过 5MB 的 GIF  图片了。")]),t._v(" "),s("p",{attrs:{"data-nodeid":"118632"}},[t._v("由插件原理可知，一个性能守卫系统，是通过常规插件和自定义插件集合而成的，具有良好的扩展性。")]),t._v(" "),s("h3",{attrs:{"data-nodeid":"118633"}},[t._v("总结")]),t._v(" "),s("p",{attrs:{"data-nodeid":"118634"}},[t._v("这一讲我们通过一个性能守卫系统，拓宽了 Node.js 的应用场景。我们需要对性能话题有一个更现代化的理论认知：传统的性能指标数据依然重要，但是现代化的性能指标数据也在很大程度上反映了用户体验。我们也应该通过学习，了解 Lighthouse 架构及其原理，并能通过 Lighthouse 插件进行自定义扩展，实现我们自主的性能指标考量。")]),t._v(" "),s("p",{attrs:{"data-nodeid":"118635"}},[t._v("本讲内容总结如下：")]),t._v(" "),s("p",{staticClass:"te-preview-highlight",attrs:{"data-nodeid":"127566"}},[s("img",{attrs:{src:"https://s0.lgstatic.com/i/image6/M00/1E/2D/CioPOWBQb6SAJRoFAAK5HjTcnpc020.png",alt:"Drawing 8.png","data-nodeid":"127569"}})]),t._v(" "),s("p",{attrs:{"data-nodeid":"118637"}},[t._v("一方面，性能知识把基于 Lighthouse 的 Node.js 相关模块搬上 CI/CD 系统，这样一来我们能够守卫每一次上线，分析每一次上线对性能产生的影响——这是非常重要的实践。任何能力和扩展如果只是在本地，或通过 Chrome 插件的形式尝鲜显然是不够的，借助于 Node.js，我们能做到更多。")]),t._v(" "),s("p",{attrs:{"data-nodeid":"118638"}},[t._v("下一讲，我们将深入讲解 Node.js 另外一个重要的应用场景：企业级 BFF 网关。网关这个话题可以和微服务、Serverless 等概念相结合，想象空间无限大；同时我们又要深入到网关实现代码，抽丝剥茧，请你做好准备。")]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"精选评论"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#精选评论"}},[t._v("#")]),t._v(" 精选评论")])])}),[],!1,null,null,null);s.default=e.exports}}]);